[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Health and Biomedical Sciences",
    "section": "",
    "text": "Data science is revolutionising how medicine is understood, how biomedical research is conducted and how healthcare is delivered. Despite the widely-recognised opportunities that data can bring to biomedicine and healthcare, there is a shortage of data skills in the healthcare sector. This course aims to equip honours students with the key foundations and data skills that are needed for data-driven innovation.\n\n\nBIME10076 • Autumn 2025Deanery of Biomedical SciencesCollege of Medicine and Veterinary Medicine"
  },
  {
    "objectID": "course-information/timetable.html",
    "href": "course-information/timetable.html",
    "title": "Timetable",
    "section": "",
    "text": "You can find class times for this course via your University of Edinburgh calendar (links open in a new window):\n\nView your calendar in Office 365\nInformation about Student Timetables\n\nTODO: Add this years course timetable PDF"
  },
  {
    "objectID": "course-information/index.html",
    "href": "course-information/index.html",
    "title": "Course Information",
    "section": "",
    "text": "Course Name: Data Science for Health and Biomedical Sciences\nCourse Code: BIME10076\nSCQF Credits: 20\nLink to course on DRPS: http://www.drps.ed.ac.uk/24-25/dpt/cxbime10076.htm\n\nCourse Handbook\nData Science 2024-25 Handbook_FINAL.docx\n\n\nCourse Outline\nThe course aims to provide a broad introduction to data science in health and biomedical sciences, covering key concepts and principles, data analysis skills and implications of working with biomedical and healthcare data. Key topics in the course include: types of human health data; computational methods (e.g. process modelling and machine learning); data wrangling, analysis and reporting using the R programming language; legal considerations and bias in health data. This course is delivered in a flipped classroom format: it is based around short pre-recorded videos, which are complemented with readings and self-guided programming tasks. The students also have a weekly in-person tutorial, which provides an opportunity for further improvement of their programming practice and discussion of the core concepts. We will also offer weekly quizzes to provide the students with valuable formative feedback.\nLearning Outcomes\nOn completion of this course, the student will be able to:\n\nApply a range of specialised data science techniques to different medical and healthcare scenarios.\nAnalyse health and biomedical data with the use of the R programming language, including summarisation, visualisation and interpretation.\nCritically examine the ethical, societal and regulatory principles and implications of data science in health.\nExplain and critically discuss key concepts, principles and methods of data science in health.\n\nRecommended Reading & Resources\nThere is no compulsory course text.\nHowever, we recommended:\n\nR for Health Data Science (free online) by Ewen Harrison and Riinu Pius\nR for Data Science (free online) by Hadley Wickham, Mine Cetinkaya-Rundel and Garrett Grolemund\nValue Sensitive Design by Batya Friedman and David G. Hendry (available from the Library)\n\n\n\nTimetable\nYou can find class times for this course via your University of Edinburgh calendar (links open in a new window):\n\nView your calendar in Office 365\nInformation about Student Timetables\n\nEssential Course Guide\nThis is general information that applied to all BMTO courses.\nhttps://www.ed.ac.uk/biomedical-sciences/bmto/bmto-undergraduate-students/academic-guidance-and-support/academic-guidance/student-guide/biomedical-sciences-undergraduate-student-handbook\nCourse Handbook\nYou can find the course handbook here (PDF and docx versions) -&gt; https://github.com/DDI-Students/data-science-for-health-bms-24-25/blob/main/documents/. To download it, click “Download raw file” at the top right."
  },
  {
    "objectID": "course-information/gen-ai-guidance.html",
    "href": "course-information/gen-ai-guidance.html",
    "title": "ChatGPT (generative AI) guidance",
    "section": "",
    "text": "Generative AI tools are a form of AI that can generate content based on a prompt that you give it. It’s important to know that they attempt to create content based on data they have seen before, rather than having a database of “answers”. As such, they are not entirely reliable as you’ve no doubt noticed! They can however be useful for us as programmers to act as a pair programmer and personal tutor.\nHere is some guidance to bear in mind:\n\nTry Solving Problems Yourself First\nBefore going directly to a GenAI tool, try solving the problem yourself. This will strengthen your understanding and your learning muscles. Your attempted solution will likely be different from anything GenAI produces which will enhance learning even more if you ask it for an example after you’re finished.\n\n\nAsk For Explanations, Not Just Solutions\nAsk the AI for an explanation of what it has produced rather than just take it at face value. That way, next time you come across the same issue, you will have a better chance of success. You can also ask for explanations of error messages. Sometimes error messages can be a little vague so it can help to get a fuller explanation.\n\n\nAsk For Some Practice Exercises\nIf you want to practice a specific skill, ask for 10 exercises (without the solutions!) so you can practice. Once you’ve attempted each exercise, you can ask for a solution. Remember, sometimes it gets it wrong so check the code.\n\n\nBe Precise With Your Prompt\nTo get the best results, set the context and be precise. You will get much better results if the tool understands your learning stage and your context.\nGood example: “Hi! I’m learning data science using the tidyverse. So far, I’ve learned the basics like x, y, z. Please suggest 2 options with examples for what I should learn next.”\nBad example: “How do you use tidyverse for data science?”\n\n\nDon’t Just Immediately Ask For a Solution\nAsk for some hints rather than a full solution. Tell it what you’re stuck on and the code you’ve tried so far.\n\n\nAsk For a Code Review\nUsually done by a human, code reviews can help you gain a different perspective on your code and give you skills to improve. Paste in your code and ask for a code review. You might discover alternative ways to achieve the same result.\n\n\nAcademic Integrity\nAcknowledge your use of GenAI tools in any assessments you submit. Don’t submit any code that your don’t understand or wouldn’t be able to explain to someone. Remember, this is your learning and you’d only be doing yourself a disservice.\nAcknowledgment: This document was created based on ideas from ChatGPT\nUseful Links:\n\nAs well as ChatGPT, you can access Github Copilot for free as a student: https://education.github.com/discount_requests/application. Make sure the verified email address on your Github account is your University email address.\nYou can use Copilot and ChatGPT in RStudio. Watch this video for instructions on setting it up: https://youtu.be/t7NrkAeosog?si=QdY8cxbey_LlEzgz\nUniversity’s policy on GenAI: https://www.ed.ac.uk/sites/default/files/atoms/files/universityguidanceforstudentsonworkingwithgenerativeai.pdf\nBook on how to use GenAI for learning, including coding: https://psyteachr.github.io/AITutoR/"
  },
  {
    "objectID": "content/week-2/topic-2.html",
    "href": "content/week-2/topic-2.html",
    "title": "Importing Data",
    "section": "",
    "text": "We will be using one of the datasets available from Public Health Scotland, called Cancelled Planned Operations by Health Board.\nHere are the functions we’ll be covering in the the videos:\n\n base::library() we’re already familiar with for loading packages\n readr::read_csv() for importing CSV files\n here::here() is a function that helps R find files\n readxl::read_excel() for importing Excel files\n\n\n artwork by Allison Horst\nNote: The word before the ::  is the name of the package and the word after the ::  is the name of a function from that package, in the format: package::function()",
    "crumbs": [
      "Content",
      "Week 2: Data Tidying and Wrangling",
      "Topic 2: Importing Data"
    ]
  },
  {
    "objectID": "content/week-2/topic-2.html#how-to-import-data",
    "href": "content/week-2/topic-2.html#how-to-import-data",
    "title": "Importing Data",
    "section": "",
    "text": "We will be using one of the datasets available from Public Health Scotland, called Cancelled Planned Operations by Health Board.\nHere are the functions we’ll be covering in the the videos:\n\n base::library() we’re already familiar with for loading packages\n readr::read_csv() for importing CSV files\n here::here() is a function that helps R find files\n readxl::read_excel() for importing Excel files\n\n\n artwork by Allison Horst\nNote: The word before the ::  is the name of the package and the word after the ::  is the name of a function from that package, in the format: package::function()",
    "crumbs": [
      "Content",
      "Week 2: Data Tidying and Wrangling",
      "Topic 2: Importing Data"
    ]
  },
  {
    "objectID": "content/week-2/topic-2.html#csv-files",
    "href": "content/week-2/topic-2.html#csv-files",
    "title": "Importing Data",
    "section": "CSV Files",
    "text": "CSV Files\nWatch the following video to find out how to import CSV files using R code and also using the import wizard, with some extra tips to help you deal with dates.\nIf you want to recreate the session in the video on your own computer, you can download the cancelled_operations project folder here: cancelled_operations.zip Note: To open the project, make sure to “unzip” or “extract all” from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.\nAlternatively, here are the individual files, but to recreate the file structure, you will need to create your own RStudio project and within this a “data” folder to store examples 2, 3 and 4 in, for the examples to work:\n\n\n\n phs_cancelled1.csv\n\n\n\n\n\n\n\n phs_cancelled2.csv\n\n\n\n\n\n\n\n phs_cancelled3.csv\n\n\n\n\n\n\n\n phs_cancelled4.csv\n\n\n\n\n\nDownload the video transcript link here.\n\nUncommon File Formats\nIn the video on how to import CSV files above, we show you how to use the import wizard to provide a preview of how R might read in your file.\nThe example CSV file we are using is in the common format where values are separated by commas, but as mentioned briefly in the video, if your file uses a different delimeter (separator), for example, dots or spaces or semi-colons, you can specify this in the import options of the wizard.\n\n\nExcel Files\nWatch the following video to find out how to import Excel files using R code and also using the import wizard.\nIf you want to recreate the session in the video on your own computer, you can download the cancelled_operations project folder here: cancelled_operations_excel.zip Note: To open the project, make sure to “unzip” or “extract all” from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.\nAlternatively, here is the individual file, but to recreate the file structure, you will need to create your own RStudio project and within this a “data” folder to store the file for it to work phs_cancelled.xlsx\n\nDownload the video transcript link here.\nNote: the readxl package was developed fairly recently so if you are searching on the internet to find solutions to problems reading in Excel files, make sure to include the package name, or limit the time range.\n\n\nOpen Data\nOpen data refers to information made freely available to the general public and can be used by anyone for any purpose. The government and other public bodies such as the NHS are increasingly making datasets available to the public on the web.",
    "crumbs": [
      "Content",
      "Week 2: Data Tidying and Wrangling",
      "Topic 2: Importing Data"
    ]
  },
  {
    "objectID": "content/week-2/topic-2.html#benefits-of-sharing",
    "href": "content/week-2/topic-2.html#benefits-of-sharing",
    "title": "Importing Data",
    "section": "Benefits of sharing",
    "text": "Benefits of sharing\nThere are many benefits to opening up healthcare data to the public, including greater transparency and the empowerment of patients to be more involved in their own healthcare. But perhaps more importantly still, these datasets are a rich source of information which data scientists and analysts from around the world can tap into in order to improve our understanding of health and disease. After all, Data Saves Lives!\n\nShow me more data!\nThroughout this course, we are using open data freely available from the Public Health Scotland website, but there are many other excellent sources of open data available online too, here are a few:\n\nNHS Open Data Portal: launched in March 2020 to improve access to healthcare data\nWHO: datasets based on global health priorities\nKaggle: a whole variety of topics, not just healthcare, excellent for practicing on\nUK Government: contains nearly 25,000 data sets from all central government departments and a number of other public sector bodies and local authorities\nUK Data Archive: larger datasets\nGlobal Burden of Disease: a catalog of surveys, censuses, vital statistics, and other global health-related data\n\nLet’s look at how we can import data from the web directly from inside RStudio.\n\n\nRecap Download and Import\nThe open data we’re going to import is one you’ll be very familiar with by now, from the Public Health Scotland website. It can be found at the following link:\nwww.opendata.nhs.scot/dataset/cancelled-planned-operations\nAs you can see from the screenshot below, the CSV files can be manually downloaded from the website.\n\nIn order to start looking at them in R, you would then have to save your file to a relevant folder on your computer, then from within R, call on the file using the read_csv() command, making sure to include the correct path location.\nThis is what we did when learning how to read in CSV files from our computer (see the Import CSV video above). Let’s just remind ourselves of how we did this:\n\n# Load the tidyverse  \nlibrary(tidyverse) \n\nread_csv(\"data/phs_cancelled.csv\")\n\n\n\nImport CSV files directly from the web\nThe great news is that you can save time by extracting the data directly from the website using R. The code for this should look very familiar to you as this is the method we have been using frequently in many of the examples. There is no need to download the data first.\nTry running the following code in your RStudio environment, where instead of a folder and file name as our argument, we have the URL address from the website.\n\n library(tidyverse)\n \n # Import the open data csv file on cancelled operations\n read_csv(\"https://www.opendata.nhs.scot/dataset/479848ef-41f8-44c5-bfb5-666e0df8f574/resource/0f1cf6b1-ebf6-4928-b490-0a721cc98884/download/cancellations_by_board_february_2022.csv\")\n\nNote: You can copy the URL address by right-clicking on the download option and selecting **Copy link address. See screenshot below:\n\n\nHow does it know?\nHow are we able to use the same command to extract data from our own local computer or from a remote web page? R is clever enough to be able to work out what you want. If it detects that you have used a URL, it carries out a different underlying operation than if you had included a local file path.\n\n\n\nStay up to date\nExtracting the data directly from the website, means that if the underlying dataset on the website is updated, you will be able to quickly rerun the code to immediately update your own analysis in R too.\nIn the code above we imported the data but we didn’t save the result as an object. If we want to carry on exploring this data we need to store the result.\n\n #| \n # Load the tidyverse  \n library(tidyverse) \n \n # Store the open data csv file as \"cancelled_ops\"\n cancelled_ops &lt;- read_csv(\"https://www.opendata.nhs.scot/dataset/479848ef-41f8-44c5-bfb5-666e0df8f574/resource/0f1cf6b1-ebf6-4928-b490-0a721cc98884/download/cancellations_by_board_february_2022.csv\")\n \n # Print \"cancelled_ops\" in order to view it \n cancelled_ops \n \n dim(cancelled_ops)\n\nRemember, if you store or save an object to your environment, R doesn’t immediately display the output but it is saved for future reference. On the other hand, if you run code without saving it as an object, you will see the output immediately, but it won’t be saved for future reference.\nIn the code above, we have first saved the object, and then “printed” it too so that we can view the output immediately.\n\n\nDatabases\nThere are various R packages designed to help you connect to different types of databases. We don’t have time to cover these in this course but if you would like to find out more, here are a few pointers:\n\nfor MySQL databases have a look at the RMySQL package\nfor PostgresSQL, the RPostgresSQL package\nfor Oracle, the ROracle package\n\nYou get the idea!\nYou will also need to have a look at the DBI package which will allow you to access and interrogate your database.",
    "crumbs": [
      "Content",
      "Week 2: Data Tidying and Wrangling",
      "Topic 2: Importing Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-6.html",
    "href": "content/week-1/topic-6.html",
    "title": "Topic 6: Troubleshooting and Error Messages",
    "section": "",
    "text": "When coding in R it is normal to spend a large part of your time dealing with error messages. This is the same whether you are a beginner or advanced R user. It can be time consuming trying to decipher these error messages and also very frustrating. Troubleshooting error messages is a skill in itself but it does get easier, promise!\nHere are a few tips which will hopefully help to speed up the process. First, here’s a quick checklist, with more detail included below.\n\ncheck you’ve not done something daft (spelling, comma, bracket, etc.)\nreally look at the error message for clues (sometimes they’re surprisingly helpful)\nRestart R and try running the code again (this is often very successful)\nif using an unfamiliar function - check documentation (F1)\ntry Googling the error message directly (Google is actually quite clever)\ntry simplifying your code and run smaller chunks (build from what you know works)\nask a fellow R user or the community (Slack: NHS-R or R4DS)\n\nMost of the error messages that you see will be because there’s a typo or other minor issue like a misspelled word, or forgotten a bracket or comma, or typed one = instead of two ==. So quickly check over your code to see if any of these might be the culprit first. Watch out for capitalisation (case sensitivity); R does recognise upper and lower case.\nTake a closer look at your error message to see if it might be helpful in working out what has gone wrong. Error messages can look a bit daunting at first. Aside from the alarming red text, the error messages often include unfamiliar words, but hidden amongst this, you will often find some more useful plain English or a hint as to what might be wrong. For example, the error messages will often let you know which line your code broke down on and there is also a visual reference shown alongside your code, indicated by a red line and cross.\nUnfortunately, warnings are also printed in the same red font. In many cases, warnings can be safely ignored. Especially if the output, whether a plot or a table, otherwise looks like what you’d expect it to look like. \nRestart R and do this often! There is no harm in restarting R, you will not lose any work as all of your code is written down, ready to be run again at the click of a button (or press of a keyboard shortcut). The joy of reproducibility! It is good practice to restart R often as a messy environment can cause unexpected behaviour, particularly when you are starting your analysis and still slightly undecided on the best object names to use so might change them a number of times before settling.\nWhen trying out a new function, make sure you know how it works and have explored examples of the function “in action”.You can check the documentation (press F1 with cursor inside function name), and scroll down to the bottom to see code examples. Google will also provide you with copious examples of how a function might be used. Or another way of finding the most relevant help is to restrict your search to more recent years. For ggplot2, dplyr, assignment operators, and many other introductory R topic-related questions, there is also the new introverse package which provides beginner-oriented help to complement the official documentation.\nIf you have no clue why you are getting a particular error message, it can be worth copying and pasting the error messages directly into Google. This can help to give some indication as to why your code isn’t working and then you can start to refine your search to make it more relevant. Try to remove text which is specific to your own project,e.g., your specific file or variable name, although often Google is clever enough to ignore these anyway.\nIf you’re still struggling to work out what’s going on, you can always ask someone.A friendly colleague is best, even if they’re not an “R expert” a second pair of eyes can often spot that extra ” or missing ) you’re too tired to see.\nThere are several online communities for free R help:\n\nhttps://community.rstudio.com/ (search through existing questions, or post your own, everyone is really friendly there)\nhttps://www.rfordatasci.com/ - join the Slack group\nAlternatively, there’s a similar group for those who identify as a woman or gender minority: https://rladies.org/\nFind further events and training course from the NHS-R community: https://nhsrcommunity.com/\n\nFollow the #rstats hashtag on Twitter, and when posting about R on Twitter, use this hashtag so other people can find your Tweet.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 6: Troubleshooting and Error Messages"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html",
    "href": "content/week-1/topic-4.html",
    "title": "Types of Health Data",
    "section": "",
    "text": "When we are interacting with data sources for our analysis, we need to be aware of the different types of data that we may encounter.\nWe will mainly be using CSV files in this course but it’s useful to know about other formats that you may come across.\nThe following are some examples of the common types of data along with some code snippets illustrating how you would use them. You don’t need to remember all of these snippets but you will certainly come across them one day!",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html#csv-comma-separated-values",
    "href": "content/week-1/topic-4.html#csv-comma-separated-values",
    "title": "Types of Health Data",
    "section": "CSV (Comma Separated Values)",
    "text": "CSV (Comma Separated Values)\nCSV files are the most common format for storing tabular data, particularly in this course. They are simple text files that use commas to separate values. Each line in the file represents a row of data, and each value in the row is separated by a comma. CSV files can be easily imported into RStudio using the read_csv function in the readr package (also included in Tidyverse package which we will cover later).\nThe examples below use code that you may not be familiar with. Don’t worry! You will soon be using very similar code.\n\nExample\nlibrary(readr)\ndata &lt;- read_csv(\"data.csv\")",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html#tsv-tab-separated-values",
    "href": "content/week-1/topic-4.html#tsv-tab-separated-values",
    "title": "Types of Health Data",
    "section": "TSV (Tab Separated Values)",
    "text": "TSV (Tab Separated Values)\nSimilar to CSV files, TSV files use tabs to separate values instead of commas. They are also simple text files that can be easily imported into RStudio using the read_tsv function in the readr package.\n\nExample\nlibrary(readr)\ndata &lt;- read_tsv(\"data.tsv\")",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html#json-javascript-object-notation",
    "href": "content/week-1/topic-4.html#json-javascript-object-notation",
    "title": "Types of Health Data",
    "section": "JSON (JavaScript Object Notation)",
    "text": "JSON (JavaScript Object Notation)\nJSON is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate. JSON files are often used to store structured data, such as data from APIs (Application Programming Interfaces).\nDon’t worry if you don’t know what an API or JavaScript are. JSON files can be imported into RStudio using the fromJSON function in the jsonlite package.\n\nExample\nlibrary(jsonlite)\ndata &lt;- fromJSON(\"data.json\")",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html#xml-extensible-markup-language",
    "href": "content/week-1/topic-4.html#xml-extensible-markup-language",
    "title": "Types of Health Data",
    "section": "XML (eXtensible Markup Language)",
    "text": "XML (eXtensible Markup Language)\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. XML files are often used to store structured data, such as data from web services.\nXML files can be imported into RStudio using the xml2 package.\n\nExample\nlibrary(xml2)\ndata &lt;- read_xml(\"data.xml\")",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html#databases",
    "href": "content/week-1/topic-4.html#databases",
    "title": "Types of Health Data",
    "section": "Databases",
    "text": "Databases\nDatabases are structured collections of data that can be accessed and managed using a database management system (DBMS). There are many types of databases, including relational databases (e.g., MySQL, PostgreSQL) and NoSQL databases (e.g., MongoDB, Cassandra).\n\nExample\nlibrary(DBI)\nlibrary(RSQLite)\ncon &lt;- dbConnect(RSQLite::SQLite(), \"database.db\")\ndata &lt;- dbGetQuery(con, \"SELECT * FROM table_name\")\ndbDisconnect(con)",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-4.html#what-types-of-data-are-used-in-health-research",
    "href": "content/week-1/topic-4.html#what-types-of-data-are-used-in-health-research",
    "title": "Types of Health Data",
    "section": "What types of data are used in health research?",
    "text": "What types of data are used in health research?\nThe datasets used by health data scientists comes from lots of different sources. Read this short document from Health Data Research UK that describes some of the most common types of data used in health research such as patient data and data from samples.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 4: Types of Health Data"
    ]
  },
  {
    "objectID": "content/week-1/topic-2.html",
    "href": "content/week-1/topic-2.html",
    "title": "Topic 2: The Role of Ethics in Health and Social Care",
    "section": "",
    "text": "Ethics can be defined as a discipline that systematically conceptualises, defines and defends ideas of right and wrong, good and bad. It is the means by which we evaluate actions, behaviours, attitudes, characteristics or state of affairs as good or bad. There are many philosophical lenses and frameworks which are applied to ethical approaches in health and social care.\n\n\n\nEthics in Health and Social Care\n\n\nOn a practical level, the Health Research Authority protects and promotes the interests of patients and the public in health and social care research. One of their core functions is to promote ethical review for research in the NHS in Scotland. Research Ethics Committees (REC) are based in geographical Health Boards receiving applications via IRAS (Integrated Research Application Service). All universities will also have their own version of ethical review panel acting as a precursor to seeking HRA approval. The recently formed Research Data Scotland (RDS) has a mission ‘to improve the economic, social and environmental wellbeing in Scotland by enabling access to and linkage of data about people, places and businesses for research in the public good’. RDS have established ‘partnership with Scottish Government, Scotland’s leading academic institutions and Public Health Scotland to facilitate insight from public sector data and promote and advance health and social wellbeing in Scotland’. Safe Havens, including virtual options, are in place for researchers to access public datasets under supervision with ethical review already in place.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 2: The Role of Ethics in Health and Social Care"
    ]
  },
  {
    "objectID": "content/week-1/topic-2.html#overview",
    "href": "content/week-1/topic-2.html#overview",
    "title": "Topic 2: The Role of Ethics in Health and Social Care",
    "section": "",
    "text": "Ethics can be defined as a discipline that systematically conceptualises, defines and defends ideas of right and wrong, good and bad. It is the means by which we evaluate actions, behaviours, attitudes, characteristics or state of affairs as good or bad. There are many philosophical lenses and frameworks which are applied to ethical approaches in health and social care.\n\n\n\nEthics in Health and Social Care\n\n\nOn a practical level, the Health Research Authority protects and promotes the interests of patients and the public in health and social care research. One of their core functions is to promote ethical review for research in the NHS in Scotland. Research Ethics Committees (REC) are based in geographical Health Boards receiving applications via IRAS (Integrated Research Application Service). All universities will also have their own version of ethical review panel acting as a precursor to seeking HRA approval. The recently formed Research Data Scotland (RDS) has a mission ‘to improve the economic, social and environmental wellbeing in Scotland by enabling access to and linkage of data about people, places and businesses for research in the public good’. RDS have established ‘partnership with Scottish Government, Scotland’s leading academic institutions and Public Health Scotland to facilitate insight from public sector data and promote and advance health and social wellbeing in Scotland’. Safe Havens, including virtual options, are in place for researchers to access public datasets under supervision with ethical review already in place.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 2: The Role of Ethics in Health and Social Care"
    ]
  },
  {
    "objectID": "content/week-1/index.html",
    "href": "content/week-1/index.html",
    "title": "Overview",
    "section": "",
    "text": "Welcome to the course! This week you will be introduced to key concepts in health data science. We’ll also cover basic R operators and an intro to RMarkdown. You will also get to know your classmates and your lecturer in the live sessions on Thursday and Friday.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Overview"
    ]
  },
  {
    "objectID": "content/week-1/index.html#learning-outcomes",
    "href": "content/week-1/index.html#learning-outcomes",
    "title": "Overview",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of the week you will be able to:\n\nDescribe different examples of data in healthcare\nSummarise key phases in the data science process\nUse some basic R functions\nKnow what RMarkdown is\nUnderstand how to approach errors in code\n\n\nStructure of this week’s materials\n\nIntroduction to Health Data Science: 2 videos, 1 reading\nRole of Ethics in Health and Social Care: 1 reading \nGetting started with R: 1 video, 1 reading, 5 code samples, 4 practice questions\nTypes of Health Data: 1 reading with code samples\nGuide to R Markdown: 1 reading with RStudio examples\nTroubleshooting and Error Messages: 1 reading",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Overview"
    ]
  },
  {
    "objectID": "content/index.html",
    "href": "content/index.html",
    "title": "Readings, videos and exercises",
    "section": "",
    "text": "Each week, you will be given a set of readings, videos and exercises to complete. These are designed to help you understand the material and to prepare you for the tutorials and assignment.\nIn-person tutorials will be held on Thursday and Friday afternoons from 2-5pm. During the tutorials you will work in pairs to complete coding exercises together. This is called pair programming and is an effective and fun way to learn to code. The tutorials are an important part of the course and you are expected to attend.\nIt is important to complete the material before the tutorials, as the exercises will build on the material covered in the videos and readings. The tutorials will be a chance to ask questions and to get help with the exercises.",
    "crumbs": [
      "Content",
      "Readings, videos and exercises"
    ]
  },
  {
    "objectID": "content/index.html#quiz",
    "href": "content/index.html#quiz",
    "title": "Readings, videos and exercises",
    "section": " Quiz",
    "text": "Quiz\nThere will be a quiz at the beginning of each tutorial to informally test your understanding of the material and discuss in your pairs.",
    "crumbs": [
      "Content",
      "Readings, videos and exercises"
    ]
  },
  {
    "objectID": "content/index.html#homework",
    "href": "content/index.html#homework",
    "title": "Readings, videos and exercises",
    "section": " Homework",
    "text": "Homework\nOn some weeks, there will be a homework exercise that you can complete on your own for practice. These won’t be marked, but they will be a good way to practice the material and to prepare for the assignment.\nNote: The content will be released weekly",
    "crumbs": [
      "Content",
      "Readings, videos and exercises"
    ]
  },
  {
    "objectID": "content/index.html#weekly-topics",
    "href": "content/index.html#weekly-topics",
    "title": "Readings, videos and exercises",
    "section": "Weekly Topics:",
    "text": "Weekly Topics:\n Week 1: Introduction\n Week 2: Data Tidying and Wrangling\n Week 3: Data Visualisation and Storytelling\n Week 4: Analysing & Presenting Data in R\n Week 5: Maps, tables, functions\n Week 6: Machine Learning & Analysing Clinical Tests\n Week 7: Improving Healthcare Processes & Integrating Health Data\n Week 8: Data and Identity\n Week 9: Data Ownership\n Week 10: Working with Genomic Data",
    "crumbs": [
      "Content",
      "Readings, videos and exercises"
    ]
  },
  {
    "objectID": "assessment/formative-assessment.html",
    "href": "assessment/formative-assessment.html",
    "title": "formative-assessment",
    "section": "",
    "text": "As the formative part of your assessment, please use the TurnItIn box below submit a document with a link to your assessment website. On the assessment website, we’d like to see about 1 page of content. Ideally, this would include these three elements:\n\nAn indication of the topic (focus) of your data exploration\nA data visualisation that represents a first stab at investigating your research question\nA commentary about what the data visualisation depicts, and what you plan to do next\n\nA key part of this formative exercise is for you to go through the steps to set up and update your assessment GitHub repository and website. This is why we insist on you submitting a link to your website. If you encounter any problems, please use the drop-in sessions to ask for help.\nYou can continue working on the assessment while you wait for feedback, but please don’t push any changes to GitHub."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assessment/index.html",
    "href": "assessment/index.html",
    "title": "Assessment and Feedback Information",
    "section": "",
    "text": "Assessment Description\n\n\n\nAssessment Type\nPercentage of Final Mark\n\n\nCoursework - R Programming Assignment\n70%\n\n\nCoursework - Essay\n30%\n\n\n\n\n\nImportant Dates\nR Programming Assignment submission - 25 November 2024 @ 13:00\nEssay submission - 2 December 2024 @ 13:00\n\n\nFeedback and Grades\nStudents will be invited to complete a weekly formative quiz, and will be provided feedback on this.\nStudents will also be given an opportunity to submit a draft of one section of the assessment (data visualisation), and will receive tutor feedback on this work.\nFinally, tutorial classes will be structured to allow students to ask questions, and gain feedback on the data interpretation skills that they will develop throughout the course.\nPlease be aware that grades located within Learn are provisional until these have been confirmed by the exam board, at which point they will be available via EUCLID.\nDates for the return of provisional marks and feedback will be published in course documentation and will normally be within 3 weeks of the submission deadline. In some cases the feedback return date may be later, for example, if different groups of students have different submission deadlines for the same assignment. In such cases course documentation will still inform you of the date to expect provisional marks and feedback. Please be aware that the marking for all assessments is moderated to ensure consistency and marks and this affects the marking timeline. Marks released remain provisional until they are ratified in by the Board of Examiners meeting after the course finishes. Occasionally, this may result in changes to the provisional marks.\n\n\nMarking Scheme\n\nUniversity’s Common Marking Scheme (Opens in a new window).\nAssessment regulations (Opens in a new window).\n\n\n\nLate Submission Penalties\n\n(a) Word Limits and Word Counts\n\nPenalties for exceeding the word limit\n\nWhere an absolute word limit is specified in assessment documentation the following penalties will be applied if the word limit is exceeded.\n\nExceeding word count by ≤ 10%: 10% deduction of the maximum mark or a reduction to the minimum pass mark for the assessment, whichever results in the higher mark.\nExceeding word count by &gt;10% and ≤ 20%: 20% deduction of the maximum mark or a reduction to the minimum pass mark for the assessment, whichever results in the higher mark.\nExceeding word count by &gt; 20%: mark reduced to the minimum pass mark for the assessment.\n\n\n\n(b) What is and is not included in the word limit.\n\nWhen evaluating the word count it does not include the assessment title, table of contents, references, text in figures, text in tables, table and figure titles, table and figure legends, a list of abbreviations or any acknowledgements.\nThe word limit does include in-text citations (where Harvard referencing is required), headings and sub-headings.\nThe use of appendices is not an allowable mechanism for exceeding the maximum word limit. Therefore, unless otherwise stated in the assessment guidance, material included in an appendix will be regarded as non-assessable and will not be considered by the markers/examiners when arriving at a final mark.\n\n\n\n(c) Additional Guidance: Figures and Table With regard to words in figure and / or diagram legends, a figure legend is primarily descriptive of the contents of the figure. The legend must not be used to introduce new\n\ndata or information not referred to in the main text of the assessment. Tables should be used to summarise several pieces of information in a succinct and easily approachable manner. As such, figure legends that go beyond the description of figure contents and unnecessarily extensive tables will not be regarded favourably by markers.\n\nAttempts to deliberately circumvent the word limit through, for example,inappropriate hyphenation, including blocks of text as picture images, etc., will be regarded as potential academic misconduct and referred to the Deanery Academic Misconduct Officer.\n\n\n(d) How the policy will be applied.\n\nStudents will be required to indicate the total word count on the assessment cover sheet. Where a word limit is specified, word counts will be checked by the course administrator by opening submissions in MS Word and removing all sections not included in the final word limit. The word count then specified in MS Word will be taken as the final word count.\n\nNOTE: If you experience problems uploading your document, do not panic; simply send the file directly to the Course Administrator (stewart3.smith@ed.ac.uk). The sent date and time on your email will be taken as the time of submission.\nNote that any submissions made after the return of feedback dates will not be marked.\n\n\nCourse Work Extensions and Exceptional Circumstances\nFor students who need to request an extension for in-course assessments, or need to apply for exceptional circumstances, please refer to the ‘Help and Support’ section on Learn for further details. Note that the maximum period for eligible course assessments is 4 days.\n\n\nHelp and Support\nLinks to University Systems, BMTO Polices & Guidance and Central University Support can be found in the Help and Support section of Learn."
  },
  {
    "objectID": "content/week-1/further-resources.html",
    "href": "content/week-1/further-resources.html",
    "title": "Further Optional Resources",
    "section": "",
    "text": "Data Saves Lives is a European initiative with the aim of raising awareness about the importance of health data, improving understanding of how it is used and establishing a trusted environment for multi-stakeholder dialogue about responsible use and good practices across Europe. Check out their website for interesting case studies and surveys about public opinions and behaviour around health data.\nThe Topol Review was an independent report published in 2019, outlining recommendations to ensure the NHS is the world leader in using digital technologies to benefit patients. This informed look into the future discusses among others, the major impact that genomics is going to have on patient care, as well as how the healthcare workforce can be to prepared deliver the digital future.\nThe NHS, AI and Our Data is an episode of the BBC Radio 4 programme “Analysis”, providing an overview of data in the NHS, describing how it is already transforming healthcare, and discussing privacy and other risks.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Further Optional Resources"
    ]
  },
  {
    "objectID": "content/week-1/topic-1.html",
    "href": "content/week-1/topic-1.html",
    "title": "Topic 1: Introduction to Health Data Science",
    "section": "",
    "text": "What is data science? What kinds of data are there in the healthcare sector and what can one do with them? The purpose of this topic is to introduce you to key concepts in health data science. You will also be introduced to the course team and learn how the course works.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 1: Introduction to Health Data Science"
    ]
  },
  {
    "objectID": "content/week-1/topic-1.html#overview",
    "href": "content/week-1/topic-1.html#overview",
    "title": "Topic 1: Introduction to Health Data Science",
    "section": "",
    "text": "What is data science? What kinds of data are there in the healthcare sector and what can one do with them? The purpose of this topic is to introduce you to key concepts in health data science. You will also be introduced to the course team and learn how the course works.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 1: Introduction to Health Data Science"
    ]
  },
  {
    "objectID": "content/week-1/topic-1.html#health-data-what-why-where-and-how",
    "href": "content/week-1/topic-1.html#health-data-what-why-where-and-how",
    "title": "Topic 1: Introduction to Health Data Science",
    "section": "Health data: what, why, where and how",
    "text": "Health data: what, why, where and how\n\nWhat is health data\nHealth data refers to any kind of data related to health conditions, reproductive outcomes, causes of death and quality of life for an individual or population. This includes biometric information, prescription data, diagnoses and screening test results, as well as data about hospital visits or sleeping and exercise patterns. There is a shift lately in thinking more broadly about health, and in addition to clinical data, this also includes environmental (e.g. pollution levels), socioeconomic (e.g. income level) and lifestyle information. In fact, it is not uncommon nowadays to consider things that are not traditionally associated with health, such as social media posts (e.g. researchers have used data science methods to detect signs of depression in tweets). In this course, we will adopt such an open-minded view of health data.\n\n\nSources of health data\nThere are lots of different sources of health data. Clinical data is produced in hospitals and it is stored in hospital information systems, picture archiving and communication systems, laboratory databases, etc. Clinical data is also produced in primary care (e.g. GP practices in the UK) and stored in local systems. \nBiomedical research data, such as clinical trial data, is produced by academia and pharmaceutical companies and it is stored in databases and libraries. \nHealth business data (e.g. around accounting, billing, management, etc.) is produced by healthcare providers, insurance companies and other organisations, and is typically stored in local information and transaction systems. \nFinally, there is a growing volume of patient-generated data. This includes data produced by wearable devices (e.g. activity trackers that capture data including heart rate, steps and calories) and web-based apps and platforms (e.g. self-management platforms for conditions like diabetes or cancer), among others. This data is typically stored on the cloud or in local databases of the corresponding companies. One of the challenges in health data science is that data currently sits in silos. This means that data from different sources is not integrated. In fact, even data within a single healthcare provider is often fragmented and not joined up.\n\n\nHealth data levels\nHealth data can be captured at different levels, from the microscopic world (e.g. genomics, epigenomics, metagenomics, proteomics, metabolomics) to individuals (e.g. data captured in electronic patient records) and populations (e.g. data about disease spreading across different communities). The data published on the WHO Coronavirus Disease (COVID-19) Dashboard is an example of population-level data. \nA large volume of data is produced at all these levels. For example, we estimate many terabytes of genomic data for each individual. Considering the size of the world population, this is really “big data”. Data generated by sensors in wearable devices is also very big, as they continuously generate data. Medical imaging data (e.g. X-rays) are also very heavy, making it challenging to store and computationally expensive to analyse.\n\n\nData forms\nHealth data comes in lots of different forms, from highly structured to unstructured data. Relational databases e.g. in hospital information systems provide a clear structure to data captured. You can think of a relational database as a collection of tables with rows and columns and links between them (e.g. you could have a Patient table containing demographic information about thousands of patients, a Hospital table with key information about different hospitals in Scotland, and an Admissions table with information about hospital admissions while pointing to the other two tables). \nData captured in spreadsheets also has some structure, but very often there is redundancy or duplication of information captured. \nEven less structure is present in clinical notes, which is natural language data, or in medical images. The lack of clear structure in the way this data is captured makes it harder to analyse and make sense of in an automated fashion. It is also very important to note that the choice of a data representation paradigm, and its underlying structure or absence of, can play a key role in data integration and linkage.\n\n\nBenefits of analysing data\nAnd why is it important to analyse health data? Learning more from data can contribute to important discoveries that allow us to better understand disease and improve the way we deliver care. This includes improved diagnostics, better decision-making and more effective predictions, among others.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 1: Introduction to Health Data Science"
    ]
  },
  {
    "objectID": "content/week-1/topic-1.html#data-science-data-analytics",
    "href": "content/week-1/topic-1.html#data-science-data-analytics",
    "title": "Topic 1: Introduction to Health Data Science",
    "section": "Data Science & Data Analytics",
    "text": "Data Science & Data Analytics\nWatch the following 2 videos to find out what data science is, and what people mean when they use the term “data analytics”.\n\n\n\nData Science & Data Analytics videos",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 1: Introduction to Health Data Science"
    ]
  },
  {
    "objectID": "content/week-1/topic-1.html#precision-medicine-and-stratified-healthcare",
    "href": "content/week-1/topic-1.html#precision-medicine-and-stratified-healthcare",
    "title": "Topic 1: Introduction to Health Data Science",
    "section": "Precision Medicine and Stratified Healthcare",
    "text": "Precision Medicine and Stratified Healthcare\nPrecision medicine is an emerging field and it is transforming the medical approach to disease treatment and prevention. It focuses on identifying the most effective strategy for each patient, based on genetic, environmental, and lifestyle factors.\nThe ability to characterise individuals much more precisely then allows us to identify key differences across human populations and to act accordingly in healthcare provision – this is stratified healthcare. So, one can consider stratified healthcare and precision medicine to go hand-in-hand.\nHealth data science is a key enabler to the development of precision medicine and stratified healthcare. By bringing different types of data together for each patient, we can take a more personalised approach to therapies, tailoring them to suit each individual. This is a rapidly changing environment, and a very exciting one!",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 1: Introduction to Health Data Science"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html",
    "href": "content/week-1/topic-3.html",
    "title": "Topic 4: Getting Started with R",
    "section": "",
    "text": "In case you don’t already have R and RStudio installed, follow the instructions here to get set up. If you already have R and RStudio installed, you can skip this.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#installing-r-rstudio",
    "href": "content/week-1/topic-3.html#installing-r-rstudio",
    "title": "Topic 4: Getting Started with R",
    "section": "",
    "text": "In case you don’t already have R and RStudio installed, follow the instructions here to get set up. If you already have R and RStudio installed, you can skip this.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#r-and-rstudio-recap",
    "href": "content/week-1/topic-3.html#r-and-rstudio-recap",
    "title": "Topic 4: Getting Started with R",
    "section": "R and RStudio recap",
    "text": "R and RStudio recap\nNow that you have access to RStudio you can start using it to experiment with the exercises we cover this week. Throughout the materials, there are chunks of code for you to run. Try copying the code from these chunks directly into RStudio to reproduce the examples and continue your explorations. It is through experimentation that we learn most effectively.\nAs a quick reminder, the image below shows you where to go to open up a new script in RStudio. Then you can start writing your own code and running it.\n\n\n\nOpen a new script in RStudio",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#getting-help",
    "href": "content/week-1/topic-3.html#getting-help",
    "title": "Topic 4: Getting Started with R",
    "section": "Getting Help",
    "text": "Getting Help\nRStudio has a built-in Help tab. To use the Help tab, move your cursor to something in your code and press F1 - this will show you the definition and some examples.\nThe Help tab is only really useful if you already know what you are looking for but can’t remember how it worked exactly. For finding help on things you have not used before, it is best to Google it. R has about 2 million users so someone somewhere will have had the same question or problem.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#starting-with-a-blank-canvas",
    "href": "content/week-1/topic-3.html#starting-with-a-blank-canvas",
    "title": "Topic 4: Getting Started with R",
    "section": "Starting with a Blank Canvas",
    "text": "Starting with a Blank Canvas\nWhen we import data, R remembers the data and stores it in the Environment tab. But this is not really where our data lives. For anything important that we want to load in and save, we write the code in our scripts so that we can bring back the data and objects into our environment whenever we want to by rerunning it - reproducibility in action!\nIt’s good practice to clear out our environment frequently, and always before starting new work (a bit like spring cleaning) to make sure there are no old objects we no longer need cluttering up space. If we didn’t clear the environment, we might accidentally end up using older data we thought had been updated.\nTo clear our environment we Restart R and it only takes a second!\nTo restart R you can do one of the following:\n\nUse the keyboard shortcut Ctrl+Shift+F10\nUse the dropdown menu Session -&gt; Restart R\n\n————–\nNote: RStudio has a default option for saving your environment, but that is not best practice anymore. Make sure that you have changed to the following setting (you only need to do this once):\nGo to Tools -&gt; Global Options -&gt; General and set “Save .RData on exit” to Never. This does not mean you can’t or shouldn’t save your work in .RData/.rda files, but it is best to do it consciously and load exactly what you need to load, rather than letting R always save and load everything for you, as this could also include broken data or objects.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#keyboard-shortcuts",
    "href": "content/week-1/topic-3.html#keyboard-shortcuts",
    "title": "Topic 4: Getting Started with R",
    "section": "Keyboard Shortcuts",
    "text": "Keyboard Shortcuts\nHere are some of the main keyboard shortcuts in R you may find useful to begin with:\n\n\n\n\n\n\n\n\nI want to…\nWindows\nMac\n\n\n  Restart R Session\nCtrl+Shift+F10\nCmd+Shift+F10\n\n\n  Run current line/selection\nCtrl+Enter\nCmd+Enter\n\n\n  Run the whole script\nCtrl+Shift+S\nCmd+Shift+S\n\n\n  Insert %&gt;%\nCtrl+Shift+M\nCmd+Shift+M\n\n\n  Reformat selection\nCtrl+Shift+A\nCmd+Shift+A\n\n\n  Comment/uncomment (multiple)       lines of code\nCtrl+Shift+C\nCmd+Shift+C\n\n\n  Open up Help tab on function\nF1\nF1 \n\n\n  Go to the end of the document\nCtrl + End\nCmd + down arrow",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#projects",
    "href": "content/week-1/topic-3.html#projects",
    "title": "Topic 4: Getting Started with R",
    "section": "Projects",
    "text": "Projects\nRStudio has a great way of helping you to keep all your analysis files together so that R can access them easily. You can do this by creating an RStudio project for each of your data analysis projects. The following video shows you how (switch to full screen to see the video better):\n\n\n\nRStudio projects",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#how-does-r-work",
    "href": "content/week-1/topic-3.html#how-does-r-work",
    "title": "Topic 4: Getting Started with R",
    "section": "How does R work?",
    "text": "How does R work?\nWhen using R, you will predominantly be working with your own data which you must first load in before you can start exploring it, and we’ll be covering how to do this in-depth in the next topic. But to begin with, let’s see how R works.\nNow that you have RStudio up and running, try copying the code from above these boxes and running them yourself in a new script.\nCan you remember what the # symbol does?\n\n# R is like a calculator\n7 + 3\n\n[1] 10\n\n\nThe # symbol allows us to add comments by letting R know not to run this line of text as R code.\nWhat if we want to save the value of this calculation to refer to at a later date?\n\nAssignment Operators\nTo save our value, we have to create an object, a, and then assign the value to the object using the = sign or alternatively, you could use these &lt;- symbol. They are both called assignment operators. In R there are often multiple ways of doing the same thing as you will continue to discover, and which you choose often depends on personal preference.\nMy preference is for the &lt;- because (a) it shows the direction of assignment (right to left) and (b) is distinct from = which can also be used within functions for specific arguments. But both work!\nTry adding and running the following code in your script. Why do you think we have to type a again on its own underneath?\n\n  # assign the results of our calculation to an object \"a\"\n  a &lt;- 7 + 3 \n  # print out the result\n  a \n\n[1] 10\n\n\nIt’s always worth remembering that in R:\n\nif you save an object, then the value does not get printed (displayed on the screen)\nif you print an object, then the value does not get saved\n\nIn our example above, the equals &lt;- sign tells R to give the object on the left of the sign the value of whatever is on the right of the sign, and the value gets saved. Underneath, where only a is typed, we are also printing it so that you can see the result. In this code chunk, we are both saving and printing.\nBut in our first example, there was no &lt;- sign so we were only printing the value, not saving it too.\nNote: When working in RStudio, when you save a value to an object it will appear in the Environment tab. If you haven’t given your values or data a name using an assignment operator, it won’t appear in the Environment tab.\n\n\nA Quick Aside on Names in R…\nYou can name objects in R anything that you like… well almost anything. There are a few rules about names in R:\n\nNo spaces - spaces inside a name are not allowed (the spaces around the &lt;- don’t matter):\nlucky_number &lt;- 5 ✔ lucky number &lt;- 5 ❌\nNames must start with a letter:\nlucky_number &lt;- 5✔1lucky_number &lt;- 5` ❌\nCase sensitive:\nlucky_number is different from Lucky_Number\nReserved words - there is a set of words you can’t use as names, including: if, else, for, in, TRUE, FALSE, NULL, NA, NaN, function (Don’t worry about remembering these, R will tell you if you make the mistake of trying to name a variable after one of these).\n\nFor more information on naming objects in R, check out this blog post.\n\n\nArithmetic Operators\nLet’s go one step further and save each of the values in our previous calculation ( 7 + 3 ) as objects too.\nIn the code chunk below you will see that we’ve added some more calculations. These include the most basic arithmetic operators we’ll be using and as you can see, R uses standard symbols.\nWhy might we want to save each of our values as objects first?\n\n# assign the values \"7\" and \"3\" to objects \"b\" and \"c\"\nb &lt;- 7\nc &lt;- 3\n\n# arithmetic operators\nadd_opr       &lt;- b + c\nsubtract_opr  &lt;- b - c\nmultiply_opr  &lt;- b * c\ndivide_opr    &lt;- b / c\n\n# print out the results\nadd_opr\n\n[1] 10\n\nsubtract_opr\n\n[1] 4\n\nmultiply_opr\n\n[1] 21\n\ndivide_opr\n\n[1] 2.333333\n\n\nSaving our values as objects allows us to carry out various calculations using one set of saved values. If we want to change the value of b or c, we can do so without having to change the values in all subsequent calculations too.\nWhy not try it just now? Change the value of b to 9 ( b &lt;- 9 ) and rerun the chunk to see your updated results.\nRemember, the name on the left of the &lt;- is the object name. Now change the name of one of the objects, but make sure you also change the name in the code for printing the results too.\nAll of R is just an extension of these types of processes: applying more complex functions (calculations) across more complex objects.\nIt’s important to appreciate that objects can be more than just single numbers. They can be entire spreadsheets, which in R tidyverse are known as tibbles. These are the types of objects you will predominantly be working with when analysing healthcare data.\nYou can find further examples of the arithmetic/mathematical operators in R via the introverse package documention.\n\n\nRelational or Comparison Operators\nAs well as performing calculations with arithmetic operators, you can also ask R things, such as is “2 greater than 10?”. In such cases, as you are asking R a questions, the output returned (or answer) is TRUE or FALSE. Another set of operators you will use frequently in R are relational operators, which are great for comparing values and for creating subgroups in your data or excluding outliers.\nNote: You can find a full list of the operators we use on the HealthyR Quick-start cheatsheet, also listed in Further Resources) for this week.\nThese operators allow us to ask questions about our data. For example, are values in a column greater than, less than or equal to a reference value?\nThe symbols used by different programs and languages for logical operators vary more widely than for arithmetic operators, let’s see what R uses, examples are shown in the following code chunk:\n\n# Assign values to \"x\" and \"y\"\nx &lt;- 3\ny &lt;- 7\n\n# Greater than\n2 &gt; 10\n\n[1] FALSE\n\n# Less than\nx &lt; y\n\n[1] TRUE\n\n# Equal to\nx == y\n\n[1] FALSE\n\n# Not equal to\nx != y\n\n[1] TRUE\n\n# Greater than or equal to\nx &gt;= 3\n\n[1] TRUE\n\n# Less than or equal to\n4 &lt;= x\n\n[1] FALSE\n\n\nThe == is very easily and commonly confused with the =. If you get an error when trying to compare values to see if they are equal, there is a good chance you have forgotten to put in the extra =.\nPrinting out a TRUE or FALSE value might seem a bit obscure, but these relational or comparison operators are really useful for filtering data and we’ll use them frequently throughout this course.\n\n\nLogical Operators\nA final set of operators that you will find useful when working with data in R is the logical set of operators. These work in a very similar way to the relational operators: R compares values and returns TRUE or FALSE as the output. You can think of logical operators are asking R to compare 2 or more things. \nYou can find further examples of the logical operators in R via the introverse package documentation.\nLet’s see how this works:\n\n  # assign multiple values to the object \"year\" \n  year &lt;- c(2000, 2001, 2002, 2003, 2004)\n \n  # check \"year\" values to see if they are equal to 2000 OR 2001 \n  year == 2000 | year == 2001\n\n[1]  TRUE  TRUE FALSE FALSE FALSE\n\n  # | for \"OR\"\n  year_subset1 &lt;- year == 2000 | year == 2001\n  year_subset1\n\n[1]  TRUE  TRUE FALSE FALSE FALSE\n\n  # & for \"AND\" \n  year_subset2 &lt;- year &gt; 2001 & year &lt; 2003\n  year_subset2\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n  # ! for \"NOT\" \n  year_subset3 &lt;- !year == 2002\n  year_subset3\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE\n\n\n\n\nData Types\nLike many other types of analysis, database, or spreadsheet software, R needs to know what the variable type (or data type) of each column is. The types we’ll be using most frequently are characters, factors, and numbers.\n\nCharacters\nCharacters (sometimes referred to as strings or character strings) in R are letters, words, or even whole sentences (an example of this might be free text comments). We can convert objects or values to character data type using the function as.character(). Characters are displayed in-between \"\" (or '').\n\n\nFactors\nFactors can be thought of as slightly fussy characters. They’re fussy because they have something called levels. Levels are all the unique values this variable could take e.g. if we have a column with data on sex, there might be two levels, “Male” and “Female” or there might be three levels if there was an option to specify “Other” too. Using factors rather than just characters can be useful because:\n\nThe values that factor levels can take is fixed. For example, if the predefined levels of your column called sex are “Male” and “Female” and you try to add a new patient where sex is just called “F” sex was stored as a character data type rather than a factor, R would have no problem with this and you would end up with “Male”, “Female”, and “F” in your column.\nLevels have an order. By default, R sorts things alphabetically, but if you want to use a non-alphabetical order, e.g. if we had a body_weight variable where we want the levels to be ordered - “underweight” - “normal weight” - “overweight” - we need to make body_weight into a factor. Making a character column into a factor enables us to define and change the order of the levels.\n\nThese are huge benefits, especially as a lot of medical data analyses include the comparison of different risks to a reference level.\n\n\nNumbers\nIn R, we specify numbers using the as.numeric() function. Sometimes numerics are further differentiated based on whether they have decimal places or not. Integer stands for a number without decimal places, whereas double would have decimal places.\n\n\nDate\nDates can be confusing, they can appear in many different formats, and in R they can look very similar to the character data type because they too are displayed between inverted commas ( \"\" ). Once we let R know that our variable is a date however, it can do some clever things as we’ll discover later.\nYou can find out more about how R reads in dates and also more examples on all these other data types by going to Chapter 2.2 in R for health data analysis.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-3.html#practice-time",
    "href": "content/week-1/topic-3.html#practice-time",
    "title": "Topic 4: Getting Started with R",
    "section": "Practice Time!",
    "text": "Practice Time!\n\nIn your RStudio, open a new script and do the following:\n\n\nCreate 2 new variables, x, y, with values 3, 10.\nCarry out a calculation using these variables (e.g. x+y).\nSave the value to an object called calc.\nPrint out the value of the variable to view the output.\n\n\nIn the same script, create a new variable called z and assign it the value of 5. Then create a new variable called calc2 and assign it the value of calc + z. Print out the value of calc2 to view the output.\nCreate a new variable called calc3 and assign it the value of calc2 - calc. Print out the value of calc3 to view the output.\nCreate a new variable called calc4 and assign it the value of calc3 * calc2. Print out the value of calc4 to view the output.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 3: Getting started with R"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html",
    "href": "content/week-1/topic-5.html",
    "title": "Topic 5: Guide to R Markdown",
    "section": "",
    "text": "R Markdown allows us to turn the findings of our analysis in R into well presented and high quality reports in various formats. In this topic you will learn to navigate the different elements in an R Markdown file and we’ll introduce you to some of the main features which make these documents so attractive.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#what-is-r-markdown",
    "href": "content/week-1/topic-5.html#what-is-r-markdown",
    "title": "Topic 5: Guide to R Markdown",
    "section": "What is R Markdown?",
    "text": "What is R Markdown?\nR Markdown is a file format and a tool which combines both R code and Markdown, meaning you can produce documents with text and code fully integrated. We can use R Markdown to create documents which are fully reproducible and easy to share.\n\n\n\nReproducibility court\n\n\nartwork by Allison Horst\nSo far we have been working entirely with R Scripts, so why would we want to switch to using R Markdown instead?\nR Markdown contains lots of “mini” R scripts, called code chunks, but in combining these with text and commentary in Markdown we can:\n\nCommunicate our analysis and conclusions more effectively to those who are not interested in the code\nCollaborate more easily with other R users who are interested in the workings of the R code\nCapture not just our analysis but our ideas and thoughts, just like using a notebook",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#i-know-what-r-is-but-what-exactly-is-markdown",
    "href": "content/week-1/topic-5.html#i-know-what-r-is-but-what-exactly-is-markdown",
    "title": "Topic 5: Guide to R Markdown",
    "section": "I know what R is but what exactly is Markdown?",
    "text": "I know what R is but what exactly is Markdown?\nMarkdown is a lightweight markup language which we can use to add formatting and styling easily to plaintext documents (e.g. **bold**, *italic*). It is one of the most popular markup languages because it was designed to be “easy-to-read, easy-to-write”.\nMarkdown is very powerful because it enables us to convert “plaintext” into various formats such as:\n\nPDF\nWord\nHTML\n\n… at the click of a button!\nAnd then when we add in R to turn it into an R Markdown document, it becomes even more powerful still.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#dissecting-our-document",
    "href": "content/week-1/topic-5.html#dissecting-our-document",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Dissecting our Document",
    "text": "Dissecting our Document\nThere are three basic elements which make up our R Markdown document:\n\nthe metadata in YAML\nthe code chunks in R\nthe text in Markdown\n\nAnd when combined, these allow us to produce the outputs in PDF or HTML or Word… or many more!",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#hang-on-whats-yaml",
    "href": "content/week-1/topic-5.html#hang-on-whats-yaml",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Hang on, what’s YAML?",
    "text": "Hang on, what’s YAML?\nIs this another language you’ve sneaked in, I hear you say?\nNo need to panic, YAML is only used in a small section of our document, in the header. But yes, it is another language and Wikipedia helpfully informs us that:\n“Originally YAML was said to mean Yet Another Markup Language, referencing its purpose as a markup language with the yet another construct, but it was then repurposed as YAML Ain’t Markup Language, a recursive acronym, to distinguish its purpose as data-oriented, rather than document markup.”\nThe YAML helps us to create meaningful metadata. This is where we can add in options for how we want our outputs to be displayed.\nFor example we can specify whether we want a table of contents (toc) to be displayed by including this in our YAML:\n\nThis is also where we can specify that we want our table of contents to be floating (this means it is always visible on the screen), where we can add themes, include instructions for a “code download” button to be added, and much more:\n\nAs well as editing the YAML directly we can control what appears in here by going to the settings cog at the top of the document and selecting Output Options…\n\n\nHere we can also see options to add in section numbers and set the default figure size. When we change these settings we can see that the code in the YAML is automatically updated.\nBe aware that not all output options are available for all formats.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#where-does-the-r-code-go",
    "href": "content/week-1/topic-5.html#where-does-the-r-code-go",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Where does the R code go?",
    "text": "Where does the R code go?\nThe R code is interspersed throughout our document in small sections called code chunks which look like this:\n\nThis back ticks ``` and curly braces {r} combination lets Markdown know it’s going to run some R code. Most of your R code will appear between two sets of back ticks like the example above.\nWatch out for unpaired or rogue sets of back ticks as these can cause errors or strange behaviour and can sometimes be hard to spot.\nWe can run each individual chunk of code by clicking on the green arrow at the top-right of the code chunk. However, the usual Keyboard Shortcut of Control+Enter to run a line is still essential too. It is faster than moving your hand back from the keyboard to the mouse and navigating to this button. Furthermore, this means that if you have several lines in your code chunk, you can run each line separately which helps with fixing errors. The keyboard shortcut for running all lines in a code chunk is Control+Shift+Enter.\n\nBut what about the output? Where does it appear?\nSimilar to when we were working in an R Script, if we save our output as an object it isn’t displayed until we “print” it, but if we only “print” it and don’t assign our code to an object, then our output is only displayed.\nWhen we run code in R Markdown, instead of our output appearing in the console or plotting tab, it appears directly below the code chunk. Our saved objects still appear in the Environment tab.\nR Markdown behaviour is slightly more complicated however, because as well as having the option to run our the code in the ways shown, we can also “knit” our document to see what our finished report will look like. When this happens, the “knitting” process essentially creates a new self-contained environment, separate to the Environment tab we see in RStudio, so any objects assigned will not appear in our Environment tab unless we run them separately. More on this shortly.\nTo add an R chunk, rather than manually entering back ticks and curly brackets, the easiest way is simply to click on the Insert shortcut at the top of your document and select R.\n\nTo run an R chunk, we’ve already mentioned the green arrow within each code chunk. There are other ways to run your code and these can be found in the Run shortcut at the top of your document.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#how-do-i-write-in-markdown",
    "href": "content/week-1/topic-5.html#how-do-i-write-in-markdown",
    "title": "Topic 5: Guide to R Markdown",
    "section": "How do I write in Markdown?",
    "text": "How do I write in Markdown?\nMarkdown is very simple to learn and you may even have been using it without knowing if you have ever formatted your text in a WhatsApp message. For example, we can put an underscore (_) on either side of a word to italicise it.\nHere is a link to an online tutorial which provides a very nice introduction to using Markdown and will take about 10 minutes to complete: Markdown tutorial. The RStudio website also has a self-paced online tutorial introducing RMarkdown as well as an (recently updated) handy RMarkdown Cheatsheet and an older (slightly less overwhelming) version of the cheatsheet.\nThere is also a very handy Markdown Quick Reference guide in the Help menu in RStudio if you need a reminder. I use this a lot.\nSome aspects of formatting we can control with Markdown include:\n\nHeadings\nText emphasis (bold or italic)\nLists\nImages\nLinks\n\nIt’s worth noting a slight quirk when writing in Markdown that a new line does not output a new line - to create a new line you have to leave an empty line.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#organising-the-output",
    "href": "content/week-1/topic-5.html#organising-the-output",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Organising the Output",
    "text": "Organising the Output\nThere are various settings we can alter to control and organise the output of our document. For example, depending on who your intended audience is, you may or may not want to show lots of R code.\nLet’s look at how we can do this.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#chunk-options",
    "href": "content/week-1/topic-5.html#chunk-options",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Chunk Options",
    "text": "Chunk Options\nEach code chunk has a Modify Chunk Options cog shortcut which you can click on:\n\nThis allows us to alter settings such as:\n\necho = FALSE only the output gets printed - useful for including figures\neval = FALSE the code gets printed but it isn’t run - useful for displaying partial code to learners to complete\ninclude = FALSE the code is run but nothing gets printed - useful for loading data other chunks might use\n\nWhen we edit these settings in the Modify Chunk Options, the code for these options appear at the top of our code chunk:\n\nYou will see that multiple code chunk options are separated by commas, but there is no comma after the first letter “r”. This letter “r” is important as this signifies what language the code chunk is in. Other languages are available including SQL and Python.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#the-setup-chunk",
    "href": "content/week-1/topic-5.html#the-setup-chunk",
    "title": "Topic 5: Guide to R Markdown",
    "section": "The Setup Chunk",
    "text": "The Setup Chunk\nUsually the very first code chunk in our document will be the setup chunk. This is essentially a normal code chunk but it has the label setup indicated after the letter r and all following code chunks will use the options specified here (unless otherwise specified on an individual basis).\n\nWe set the option include = FALSE to this code chunk as we want the code to run, but we don’t need this code to be displayed in our report.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#parameters",
    "href": "content/week-1/topic-5.html#parameters",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Parameters",
    "text": "Parameters\nConsider the following scenario: You’ve created a beautiful report with R Markdown, presenting data drawn from various hospitals or Health Boards across the country. But individual hospitals have been in touch and have asked for a report with only their data.\nR Markdown to the rescue! It is possible to produce this in an R Markdown document with very little effort thanks to the use of parameters.\nInstead of manually editing each report, we can use parameters to automatically summarise the data for different hospitals or NHS Health Boards.\nThe input (parameter variable) is included in the YAML header by adding in params: then underneath is information about the name and input value of our parameter.\n\nHere we’re showing the YAML (header) from an example of a life expectancy report on the gapminder dataset. We’ve created a parameter to enable us to switch between reports for different continents easily.\nThe indentations are very important in the YAML, unlike in R code, so be careful with this. Also check that your colons are in the right place too ( : ).\nIf we find ourselves parameterising a document we have already created which was based on one continent’s data, we can simply search (Ctrl + F works here) the document for any mention of the continent and update.\nFor object names we can change the text to make it more generic.\nWhere we have referred to the value of a specific continent in our R code, for example in a filter, we need to update with params$continent where params is letting R know to look in the YAML for a parameter, and continent is telling R to use whatever value appears in this parameter.\nHere is a code chunk from our document before parameterisation.\n\nHere is the edited code chunk after an update to refer to the parameter listed in the YAML.\n\nHere is some descriptive text before parameterisation:\n\nHere is the edited descriptive text after an update to refer to the parameter listed in the YAML:\n\nNote the use of the r here to let R know the following text is R code. This is because these lines don’t appear within a code chunk (between the two sets of ```).",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#knitting-the-document",
    "href": "content/week-1/topic-5.html#knitting-the-document",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Knitting the document",
    "text": "Knitting the document\nThroughout the process of modifying our document we should constantly be “knitting” the report to see what the finished output will look like.\nKnitting is the process where R Markdown runs the entire document, including chunks of code and accompanying text, and creates the output in whatever format you have specified.\nThe knitting icon can be found at the top of your document:\n\nNote that although Knit and Run All both run all code chunks within the document, as mentioned previously, Knit doesn’t save any objects to our environment, but Run does.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#whats-the-difference-between-r-notebook-and-r-markdown",
    "href": "content/week-1/topic-5.html#whats-the-difference-between-r-notebook-and-r-markdown",
    "title": "Topic 5: Guide to R Markdown",
    "section": "What’s the difference between R Notebook and R Markdown?",
    "text": "What’s the difference between R Notebook and R Markdown?\nYou may come across R Notebooks. Both R Notebook and R Markdown are options we can select from the File -&gt; New file menu, and often people ask what the difference is between the two as they have the same file format. The answer is very little!\nR Notebook is one of the many output types that an R Markdown file can produce, so when you select R Notebook, the output part of the YAML will already say output: html_notebook.\nInteracting with an R Notebook is slightly different to that of an R Markdown document. When executing chunks in an R Markdown document, all the code is sent to the console at once, but in an R Notebook, only one line at a time is sent. This allows execution to stop if a line raises an error.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/topic-5.html#top-tip",
    "href": "content/week-1/topic-5.html#top-tip",
    "title": "Topic 5: Guide to R Markdown",
    "section": "Top Tip",
    "text": "Top Tip\nOnce your R Markdown document starts to get quite long (you’ve been working hard!), with several different headings and perhaps various subheadings too, it can start to get slightly tricky to quickly scroll and find the various sections in your raw document.\nTo help with this, RStudio have a helpful tool, the Show document outline option which you can find near the Run menu.\n\nThis lets you quickly jump between sections in your document and see the outline of your structure at a glance. A similar outline feature can be found at the bottom of your document, and code chunks are included here too.\n\nThat’s all you need to know (and more) to get up and running in R Markdown, now have fun in the next Topic exploring all of these options for yourself.\n\nartwork by Allison Horst",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Topic 5: Guide to R Markdown"
    ]
  },
  {
    "objectID": "content/week-1/tutorial.html",
    "href": "content/week-1/tutorial.html",
    "title": "Tutorial Materials",
    "section": "",
    "text": "During this course, it’s recommended that you create a directory somewhere on your computer to store all the tutorial materials. You can call it whatever you like, but for the sake of simplicity, we recommend you create the directory on your Desktop and call it data_science (no spaces in the name!).",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Tutorial materials"
    ]
  },
  {
    "objectID": "content/week-1/tutorial.html#thursday",
    "href": "content/week-1/tutorial.html#thursday",
    "title": "Tutorial Materials",
    "section": "Thursday",
    "text": "Thursday\n\n1. Bingo!\n\n\n2. Introduction (introduction.pptx)\n\n\n3. Assessment brief\n\n\n4. Pair programming demo\n\n\n5. Quiz\n\n\n6. BRFSS Analysis (Behavioral Risk Factor Surveillance System)\nThe goals of this exercise are:\n\nPractice pair programming\nSolve some problems using your current R knowledge (no Tidyverse!)\n\nCreate a New project called brfss_analysis in your data_science directory. Save the starter file provided below in brfss_analysis.\nRemember, you can use the R documentation to help you solve the exercises or Google it!\n\n\n\n Download the starter file",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Tutorial materials"
    ]
  },
  {
    "objectID": "content/week-1/tutorial.html#friday",
    "href": "content/week-1/tutorial.html#friday",
    "title": "Tutorial Materials",
    "section": "Friday",
    "text": "Friday\n\n1. Updating R, RStudio, installing Tidyverse\n\n\n2.",
    "crumbs": [
      "Content",
      "Week 1: Introduction",
      "Tutorial materials"
    ]
  },
  {
    "objectID": "content/week-2/topic-3.html",
    "href": "content/week-2/topic-3.html",
    "title": "How to explore data?",
    "section": "",
    "text": "In this topic, we are focusing on getting our data ready for analysis and reporting. We will cover how to:\n\nInterrogate and check the data for inaccuracies (explore)\nChange the format and transform the data (tidy)\nVisualise and clean the data (prepare).\n\nYou might also find this type of task referred to as data wrangling. You can expect to spend as much as 80% of your time on this part of the process, sometimes more!\n\nartwork by Allison Horst\nWe are continuing to use one of the datasets available from Public Health Scotland:\n\nCancelled Planned Operations by Health Board\n\nWe’re also going to be using the Global Burden of Disease (GBD, or gbd in lowercase), which includes information on the causes of death globally. What we will be using is the number of deaths for the three broad cause categories - Injuries, Communicable diseases, and Non-communicable diseases. But the project and its freely available datasets also include much more detailed breakdowns, both in the types of diseases, countries, as well as different metrics. It is freely available from here: \n\nGlobal Burden of Disease data\n\nHere are the functions we’ll be covering in the topic videos:\n\nbase::library() we’re already familiar with for loading packages\nbase::names() allows us to view all the column names or variables in our dataet\ndplyr::distinct() for exploring the unique values in our columns or variables\ndplyr::filter() allows us to subset data by filtering out rows based on variable criteria\ndplyr::select() allows us to subset data by selecting specific columns or variables\ndplyr::glimpse() provides information on dimensions, data types and a small preview\ndplyr::arrange() & dplyr::desc() lets you sort your data (default is ascending order)\ntidyr::pivot_longer() lengthens the data, increasing rows and decreasing columns\ntidyr::pivot_wider() widens the data, increasing columns and decreasing rows\ndplyr::mutate() for changing or adding columns\nstringr::str_replace() for finding and replacing strings (text) in your data\nggplot2::ggplot() & ggplot2::aes() lets R know you are about to make a plot and what you’re going to plot\nggplot2::geom_point() lets R know you want to make a scatter plot\nbase::replace() for finding and replacing values in your data\n\n\n\nartwork by Allison Horst\n\nExplore Data\nThe main package we will be using to explore the data is dplyr, which is part of the tidyverse. Watch the following video to learn about some of the functions for carrying out your initial exploration of your data.\nIf you want to recreate the following session on your own computer, you can download the cancelled_operations project folder here: cancelled_operations.zip\nNote: To open the project, make sure to “unzip” or “extract all” from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.\nAlternatively, here is the individual cancelled_messy file: phs_cancelled_messy.Rda Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select “yes” to loading into your Global Environment).\n\n\n\nTidy Data\nWatch the following video to learn about some of the functions for reshaping your data so that you can get it into a format which makes it easy to plot.\nIf you want to recreate the following session on your own computer, you can download the cancelled_operations project folder here: cancelled_operations.zip Note: To open the project, make sure to “unzip” or “extract all” from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.\nAlternatively, here is the individual cancelled_messy file: phs_cancelled_messy.Rda Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select “yes” to loading into your Global Environment).\n\nDownload the video transcript link here\nAs described in the video, and visualized below, in a tidy dataset (a) each variable forms a column, (b) each observation forms a row, and (c) and each cell is a single measurement.\n\n\n\n\n\nartwork by Allison Horst\n\n\nPrepare Data\nIn this video we’re going to take a first look at visualising our data as a way of exploring it and looking for outliers, or mistakes.\nIf you want to recreate the following session on your own computer, you can download the cancelled_operations project folder here: cancelled_operations.zip Note: To open the project, make sure to “unzip” or “extract all” from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.\nAlternatively, is the individual cancelled_tidy file: phs_cancelled_tidy.Rda Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select “yes” to loading into your Global Environment).\n\nDownload the video transcript link here\n\n\nOther Useful Functions and Operations\nHere are some other useful functions and operators you might find useful when wrangling with data.\n\n\nThe c() combine function and the %in% operator\nThe combine function, as you may well have guessed, is useful for combining several values: c(). We do this by listing the different elements between the brackets, separated by a comma. Text has to be within inverted commas.\nThe c() function crops up all over the place, for example, in functions where we want to list multiple values as the input to one argument. But it is particularly useful for filtering data.\nWhen combined with the special type of operator, the %in% operator, it can save us extra typing and make our code more readable. We use the %in% operator to identify if a value or set of values appears within another set of values.\nLet’s quickly recap how we might filter data if we didn’t know about %in% operator.\nIf we were interested in filtering our GBD dataset to only include “Communicable” and “Non-communicable” diseases, we might use the following code:\n\ngbd_full %&gt;%\n  # also filtering for a single year to keep the result concise \n  filter(year == 1990) %&gt;%\n  filter(cause == \"Communicable diseases\" | cause == \"Non-communicable diseases\")\n\nWhich produces the following output:\n\nThis works perfectly well, but what if we had a column where we wanted to look at data on a whole list of values. Perhaps we have a column with Health Boards and we want to look at data on all those on the East of Scotland. We would have to repeat | HBName == for each value.\nThis is where the %in% operator and c() function can save us some typing, see the following code which gives exactly the same output as our previous code:\n\ngbd_full %&gt;%\n  # also filtering for a single year to keep the result concise \n  filter(year == 1990) %&gt;%\n  filter(cause %in% c(\"Communicable diseases\", \"Non-communicable diseases\"))\n\nWhich produces the following output:\n\n\n\nThe paste() function for joining values together\nWe’ve just explored the c() function which allows values to be “combined” but they are not actually joined to make a new variable, they remain separate.\nIf we want to make a new character variable by joining other variables together, we need to use the paste()function.\nThe paste() function allows us to paste several variables (e.g. words, numbers, or dates) into one character variable or sentence.\nFor example, we might want to create a new column with text which could be used as a label:\n\n# create a new column\ngbd_full %&gt;%\n  mutate(year_label_paste = paste(\"Year is\", year))\n\nWhich produces the following output:\n\nIn the paste() function we need to specify each element we would like to combine, separated by a comma. By default, the separation between the elements is a space, but we can change this using the sep = argument within the paste function.\nNote: For more informtion on this, try looking the function up in the help tab in RStudio, either by pressing F1 when the cursor is within the function name, or by search in the Help tab search box.\n\n\nThe pull() function or the extract operator\nWe’ve seen how to use the select() function to select a specific column or columns from a dataset. The type of object we get out is the same as the type we put in, just smaller, so if we pipe a tibble (the name for a tidyverse data frame) into select(), we get a smaller tibble out.\nSometimes however we might need our output to be in a slightly different format, we might need it to be a vector, which we can think of as a simple list of values.\nWe can get a vector, either by using the base R extract operator $, or we can use the pull() function from the dplyr package.\nLet’s see how both of these work:\n\n# $ operator \ngbd_full$deaths_millions \n \n# pull() function \ngbd_full %&gt;%\n  pull(deaths_millions)\n\nR will give us all the data for that variable - as seen in the following output:\n\n\n\nThe round() function\nNot surprisingly, we can use the round() function from base R to round variables to create integers.\nFor example, in the GBD dataset we might want to round the total deaths column (deaths_millions) to no decimal places.\n\n# round to whole number \nround(gbd_full$deaths_millions) \n\nWhich produces the following output:\n\nNote: Here we use the $ sign to specify which column from the gbd_full dataset we wanted. We did not pipe (%&gt;%) gbd_full into round() because the first argument in this base R function is looking for a numeric vector (a list of numbers) rather than the name of a tibble or data frame, which is what we are more used to seeing in the tidyverse functions.\n\n\nOther Useful Packages\n\nlubridate\nDates can often be a bit of a nightmare. They can come in many different formats and are prone to error and so can be awkward to work with. In the “Import Excel” video in the last topic we saw that R wasn’t able to recognise the date column when we used the Import Wizard.\nThankfully, like many problems in R, there is a package for just this issue and it’s called the lubridate package. It’s a tidyverse package which makes it easy to work with dates.\nHere is a quick taster, you can:\n\nparse (read in) a very wide range of formats with the ymd() function\nextract the relevant parts from your dates with year() and month() functions\neasily calculate time intervals with the interval() function\n\n\n\nartwork by Allison Horst\n\n\njanitor\nCleaning and tidying our data takes up a considerable amount of valuable time, but there’s one function which can help to make our lives a little bit easier when we’re going round the bend trying to fix badly named variables. It’s the clean_names() function from the janitor package.\nThe clean_names() function converts your variables into snake case style. This just means that it replaces all capital letters, punctuation and spaces with underscores to make the variables easier to work with because R doesn’t like your column headers to have spaces in them or weird characters and symbols.\n\nartwork by Allison Horst",
    "crumbs": [
      "Content",
      "Week 2: Data Tidying and Wrangling",
      "Topic 3: Exploring data"
    ]
  },
  {
    "objectID": "course-information/course-contacts.html",
    "href": "course-information/course-contacts.html",
    "title": "Course Contacts",
    "section": "",
    "text": "Course Organiser\nDr Kasia Banas\nEmail: Kasia.Banas@ed.ac.uk\n\n\nCourse Secretary\nMr Stewart Smith\nEmail: stewart3.smith@ed.ac.uk\n\n\nTeaching staff\nKarim Rivera-Lares (karim.rivera-lares@ed.ac.uk)"
  },
  {
    "objectID": "course-information/help-and-support.html",
    "href": "course-information/help-and-support.html",
    "title": "Help and Support",
    "section": "",
    "text": "Details on:\n\nHelp/support using Learn and other University systems\nBMTO Policies and Guidance\nCentral University Support\nStudent Rep Information\nCareers information\n\nhttps://www.ed.ac.uk/biomedical-sciences/bmto/bmto-undergraduate-students/academic-guidance-and-support/academic-guidance/student-guide"
  },
  {
    "objectID": "course-information/library-resources.html",
    "href": "course-information/library-resources.html",
    "title": "Library Resources",
    "section": "",
    "text": "Resource List\nThis is the Library’s online reading list tool. It links to any Resource List associated with this course and provides access to key readings. If you would like some guidance on using your Resource List, have a look at this video \n\n\nSubject Guide\nSubject Guides help you get the best out of the Library with information on finding academic literature, referencing and more.\n\nMedicine Subject Guide\nLiterature review & study skills resources for intercalating medical students Subject Guide\n\n\n\nDiscoverEd\nUse DiscoverEd to search the Library’s collections and find books, ebooks, ejournal articles and more. Use your University login to sign into your account and manage loans, requests and fines.\n\n\nInterLibrary Loans (ILL)\nIf the University of Edinburgh does not hold the material you need, you can use the InterLibrary Loans (ILL) service to request access to resources held in other libraries. Use the link, ‘InterLibrary Loan Request’ at the top of DiscoverEd. More information about ILL \n\n\nRequest a Book (RaB)\nYou can use the Library’s Request a Book (RaB) service to request purchase of books and other resources to be added to the Library collections to support your University study and research. More information about RaB \n\n\nScan & Deliver\nThis is the Library’s scan on demand service. Scan & Deliver provides scans of chapters or extracts of print items held at all University of Edinburgh Libraries (copyright restrictions apply). Use DiscoverEd to make a request. More information about Scan & Deliver"
  },
  {
    "objectID": "course-information/welcome.html",
    "href": "course-information/welcome.html",
    "title": "Welcome and Learning Outcomes",
    "section": "",
    "text": "Welcome!\nIn this course you will be introduced to data science techniques used in health and biomedicine, you’ll have a chance to practice these techniques in R, and you’ll learn about the social and societal issues surrounding the increased use of data science in human health. The course will be taught in a flipped classroom format: each week, you will be given a set of videos and readings to go through at home, and in the live sessions on Thursdays and Fridays we’ll discuss and practice what you learned from those materials. It is therefore crucial that you do complete the required preparation work before class; otherwise, you will not be able to fully participate.\nThe course materials have been prepared for you by various staff from the Usher Institute and the wider College of Medicine and Veterinary Medicine. The two weeks focused on data ethics will be delivered in collaboration with two experts in this topic: Dr Kevin Guyan from the Business School and Dr Max Perry from the School of Social and Political Science.\nWe look forward to working with you!"
  },
  {
    "objectID": "course-information/welcome.html#learning-outcomes",
    "href": "course-information/welcome.html#learning-outcomes",
    "title": "Welcome and Learning Outcomes",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nOn successful completion of this course, you should be able to:\n Apply a range of specialised data science techniques to different medical and healthcare scenarios.\n Analyse health and biomedical data with the use of the R programming language, including summarisation, visualisation and interpretation.\n Critically examine the ethical, societal and regulatory principles and implications of data science in health.\n Explain and critically discuss key concepts, principles and methods of data science in health."
  }
]