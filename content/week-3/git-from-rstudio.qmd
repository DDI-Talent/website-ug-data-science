---
title: "Creating a Version-Controlled Project in RStudio"
format: html
editor: source
lightbox: false
link-external-icon: false
---

# Introduction

This guide demonstrates how to create a version-controlled project in RStudio
using Git.
Each step is paired with an image that shows precisely where to click and what to expect in the interface.



## Step 1: Start a New Project

Open RStudio and begin by creating a new project:

- Click __File \> New Project...__
- Alternatively, you can click the project dropdown at the top right of your RStudio window.

![Start a new project](images/git-r/01_rs-new-proj.png){#fig-new-proj}



## Step 2: Choose to Create a Project in a New Directory

- Select __"New Directory"__ to start a fresh project folder.

![Choose New Directory](images/git-r/02_proj-new-dir.png){#fig-new-dir}



## Step 3: Choose "Project Type"

- Select __"New Project"__ as the project type.

![Choose R Project](images/git-r/03_proj-type.png){#fig-prog-type}



## Step 4: Choose Project Directory and Enable Git

- Enter a __Directory Name__.
    - Make sure you give the project a meaningful name.
    - E.g. something that will make it easy to remember what the project does.
- Choose where to save the project.
    - A good place for the purposes of this course might be in `Documents/` or a new directory therein perhaps called, something like, `Documents/data-science-tutorials/`
- Tick __"Create a git repository"__.
    - This step is __important__.
    - If you forget to click this, everything else in this doc will fail ðŸ˜±
    - Click __Create Project__.
        - Your new Git enabled project will open automatically.

![Set directory and enable Git](images/git-r/04_choose-proj-dir.png){#fig-proj-dir}

## Your New Git Enabled Project...

Looks like any other, except there will be a new file that was never present in any of your previous projects: `.gitignore`.
You should also see a Git interface tab...

## Step 5: Confirm Git Pane Appears

After creating the project, the __Git__ tab should appear somewhere.
If your RStudio is still in its default configuration, that is usually in the top right pane.

![Git pane appears](images/git-r/05_new-git-pane.png){#fig-git-pane}

If you have changed things around you may have to find it elsewhere

- If you donâ€™t see it anywhere, go to __Tools \> Global Options \> Git/SVN__, and tick the box that says "Enable version control interface".


## Step 6: Make a Commit

- Since your project is brand new, you will have only two files.
    - `.gitignore`
    - `proj-name.Rproj`
- In the __Git__ tab, tick both files to "stage" it (@fig-git-pane).
    - This means tag it to tell Git you want to keep a track of its version history.
- Click __Commit__.

Staging the files is the first step of telling git you want to track changes to it.
Making a __commit__ means actually __tracking__ it.
It is necessary to provide a message that describes the cntent of the commit.

![Write commit message](images/git-r/06_commit-message.png){#fig-commit-msg}

It is common to leave a message like "First commit" for the first commit, but not a good pattern to follow beyond that ("One-hundred and twenty-first commit" anyone!?)
Good practice for writing commit messages is to complete the following sentance...

> This commit will...

So you might have a commit message like 

> Update tutorial script with changes to answer questions 4, 5 an 6

:::{.callout-tip icon='false' collapse=true}
### Git Gud

Honestly, don't be lax with the commit messages.
Conscientious messages will pay you back!
:::

## Step 7: Handle Commit Errors (If Any)

If Git or RStudionis not correctly configured, e.g. missing user name/email or missing credetials, the commit will fail.

- Use the Terminal to run:

``` bash
git config --global user.name "Your Name"
git config --global user.email "you@example.com"
```

![Commit failed](images/git-r/07_commit-fail.png){#fig-commit-fail}



## Step 8: Commit Successfully

Once Git is configured, repeat the commit:

- Stage the file.
- Add a commit message.
- Click __Commit__ again.

![Commit succeeded](images/git-r/07_commit-success.png){#fig-commit-success}
<!-- Image does not currently actually show success. I need to provide some details to RStudio or someting -->


## Step 9: View Git History

You can check the commit history for your project by clicking __History__ in the Git tab to view previous commits.

![Git commit history](images/git-r/08_git-history.png){#fig-git-history}

At the moment you will see only the single commit you have made, but as you add more commits, you will see them all with a summary of your commit messages allowing an at a glance overview of the changes you have made in your repo.

:::{.callout-tip icon='false' collapse=true}
## Summary

In this tutorial we have:

- Created a new RStudio project.
- Enabled Git version control.
- Made and reviewed our first commits.

Follow this precess each week in the course, and for setting up all your future projects.
:::
