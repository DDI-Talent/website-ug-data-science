---
title: 'Setting up repos for use with RStudio'
format: html
number-sections: true
---

The following guide will walk you through the process of setting up a repo on
gitHub.

The prerequisites for this are that you have a Github account.
If you have not
already created one, do so now <https://github.com/signup>.

GitHub is an on-line platform for storing code or other text based projects, in
__repositories__ (repos).
We will go through the process of setting up a repo
step by step.

This is the process you should follow __every week__ in your pair programming
tutorials.
Choose one person who will do this, on their own computer, and work
through the steps together.
Only do this on __that one person's computer__.
Don't worry, all members of the team will get all work at the end, and all
individuals will get a chance to do these steps on their own computer in
future weeks.

## Github

### Creating a new repo in GitHub

-   Sign into your GitHub account here <https://github.com>.
-   Navigate to the repositories tab in your GitHub account.

![](images/git-r/01_gh_repos-tab.png){#fig-repos-tab}

-   Click the big green button to create a new repository.

![](images/git-r/02_gh_new-repo-button.png){#fig-new-repo-button}

This will take you to the repo initialization page.

### Initializing your repo

You can ignore the "template" section.
If you are a keen bean, you can explore
this later.
It will allow you to create a template repo for all future weeks
based on this week's repo.
But we will not go over it here.

-   Give your repo a __meaningful__ name.
    -   `tutorial-repo` sound good, right? ðŸ¤¨...?

![](images/git-r/03_gh_name-repo.png){#fig-name-repo}

-   Also fill in the __Description__.
    -   It says "optional", but fill it in now for benefits later.
    -   More detail = more benefit.

If we follow the defaults, we will create a completely blank repo.
That's
fine, and sometimes may be what you want.
But lets make gitHub do some of the
tedious bits for us (@fig-init-repo).

-   Tick the `add README file` box
-   click the `add .gitignore` drop-down and find your language of choice (if
    you need a clue, its __R__).
-   We can leave the license as __none__ for now.
    -   But you should totally consider adding a license for personal
        projects, and definitely for any future research projects.

![](images/git-r/04_gh_init-repo.png){#fig-init-repo}

And click the big green button at the bottom.

![](images/git-r/05_gh_create-repo.png){#fig-create-repo}

### Preparing to "clone" the repository

After clicking the green button, you will be taken to a new page.
This is your
new repo.
However, it so far is only accessible form GitHub.
To make use of it
we need to obtain a copy of it on our local machine.
the process for doing
this is called __cloning__.

-   Locate the next big green button - it says `Code` - and click.\
-   You will see a web URL with a copy icon next to it.
Click the copy icon.

![](images/git-r/06_gh_get-clone-link.png){#fig-get-clone-link}

## The terminal ðŸ˜¨

### Don't panic - only one command

Decide on a good place to save all your course resources.
It is up to you
where you want these to live, but make sure it makes sense to you, e.g.:

-   Desktop = bad
-   Somewhere in Documents = better

See @fig-dir-str at the end for a suggestion for a suggested set-up.
You can
create a new directory (folder) using whichever file manager you like, e.g.
Windows Explorer, Mac Finder, terminal, etc.

-   Here I created folder in `Documents` called `data-science-tutorials`.
-   I then right-clicked inside the folder in Windows explorer and clicked
    `Open in terminal`...
-   ...and pasted the web URL copied from GitHub

![](images/git-r/01_term_create-local-repo-dir.png){#fig-create-local-repo-dir}

Press enter, to perform the clone.
Once completed you will be shown a short
summary.
What it says is not important, but go ahead and read it as an
optional exercise; see what you can glean.

![](images/git-r/02_term_clone-repo.png){#fig-clone-repo}

Success!
And that's the only interaction with the terminal we need.

**************************************************


## RStudio

At this point we now have a repo on the GitHub cloud storage platform.  
and we have cloned (copied) it to our local computer.  
Now we want to write our R code for the repo inside an RStudio project.  
This will be mostly familiar, but follow along anyway, because there may be a few points that are slightly different.

### Setting Up the project in RStudio

- Create a new project
    - Either `File > New project`
    - Or click the `New project` drop-down 

![](images/git-r/01_rs_new-proj.png){#fig-existing-dir}

- In the menu that opens, select __`Existing Directory`__

![](images/git-r/02_rs_existing-dir.png){#fig-create-project}
Remember, we cloned our repo somewhere, possibly in Documents...

- Use the `Browse` button to find your repo.
- When you have found it click `Create Project`.

![](images/git-r/03_rs_create-project.png){#fig-git-tracked-project}

### Check out out new Git tracked R projects

Open the `Files` pane, and you will see that a few things that are different from the usual state of a new project.

- A `.git` folder
    - Don't mess with this!
    - But, by all means, have sniff around it if you're one of the afore mentioned keen beans.

- A README.md
    - This is the readme file from GitHub
    - You can edit this if you like - it's just a text file and it uses markdown syntax

- A `.gitignore` file
    - We will take a closer look at this shortly.

![](images/git-r/04_rs_git-tracked-project.png){#fig-git-pane}

### RStudio-Git integration

Now that we are using Git with RStudio, we should be able to find a Git pane (@fig-first-commit).
By default, I think it appear in the top left panel of Rstudio.
It may be somewhere else, so if you don't see it, check the other panels

The desire outcome here, is:

1. Identify which files we want Git to track
    - We don not have to track all files.
1. Mark them as files of interest
    - Called "adding them to the index".
1. Commit them
    - It is only after this point that Git starts tracking the files.

One you have found the Git pane, you should see two files listed with some yellow squares and a check-box next to them.

This is how we tell Git to track and changes to files.
We can choose which files we want git to track by ticking the check-box.

- In this case we do want to track both files, so tick __both check-boxes__.

![](images/git-r/05_rs_git-pane.png){#fig-first-commit}
- Then click the `Commit` button.
- Add a commit message
    - No need to be too laconic here.
    - Make it meaningful. Detail is good.
    - Click `Commit`.

![](images/git-r/06_rs_first-commit.png){#fig-first-commit}

- You will then be given a short summary or the commit
- Click close
- Checkout the Git pane again - it should now be empty?

![](images/git-r/08_rs_commit-success.png){#fig-commit-success}

### Let's change something

- Find the `.gitignore` file in your `Files` pane, and click on it.
- Add two lines at the end of the file.
    - `.DS_Store`
    - `thumbs,db`

__No matter what computer you are using, add both lines.__
Your `.gitignore` file should now look like @fig-git-ignore

![](images/git-r/09_rs_gitignore.png){#fig-git-ignore}



### Commit cyle

Once again, take a look at the Git pane.
We should see that the `.gitignore` file has appeared again.
This time instead of the yellow square with a `?` inside, it has a blue square with `M` inside.
This is Git saying

> You know that file you asked me to track? Well it's changed

Go through the process again of adding the file, writing a commit message, and committing the changes.

We have just completed the "commit cycle".
This is the most basic and important workflow to learn in Git.
Committing is like saving.
Do it often!

![](images/git-r/01_git_commit-cycle.png){#fig-commit-cycle}

### Push: Lets share our work with the world

Make sure you have committed all changes that you need to make sure your team mates will get the most up to date version.
This is the same as (@fig-first-commit, but with an extra step: click `Push`.


![](images/git-r/07_rs_first-commit-and-push.png)

![](images/git-r/10_rs_push-success.png){#fig-pull-success}

But what does that actually do?
It send (pushes) our work to the GitHub cloud platform, and because our repos are public, the whole world can access it

![](images/git-r/02_git_commit-cycle-with-push.png){#fig-commit-cycle}


### Pull: How do I get the work?

Maybe the world doesn't want our work... But our team mates probably do.
The process for getting it is the same `clone` process we did already.
Everyone else in the team that wants a copy of the repo should repeat the steps from [1.3 to 2.1](#preparing-to-clone-the-repository)


![](images/git-r/11_rs_pull-success.png){#fig-pull-success}
## Final set-up tips

Here is a suggested directory structure to think about.
You do not have to do this, but it is clear, simple, and easy to compare with your team mates

![](images/git-r/tutorial-repo-setup.png){#fig-dir-str}