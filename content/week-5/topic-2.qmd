---
title: "Creating more exciting tables"
format: html
---

```{r}
#| include: false
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  eval = TRUE)
```

## The gt Package

There are *many* packages which can be used to create tables in R. We have already looked at [knitr::kable()](https://yihui.org/knitr/) and [KableExtra](https://haozhu233.github.io/kableExtra/) in the course. Another popular table package is [flextable](https://davidgohel.github.io/flextable/), which is particularly powerful for making tables in Word. If you are interested, you can find a nice overview of packages for tables in R [here](https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r/).

`gt` is the table compliment to the `ggplot2` package for making plots - the first g in both cases meaning "grammar". `gt` meaning "grammar of tables" and the `gg` in `ggplot2` meaning "grammar of graphics". This underlying general philosophy of tables makes the `gt` package easy to use (with some practice) and extremely flexible and customisable.

Just as we build our plots in ggplot2 with layers, we can build gt tables by editing each part or layer of the table. As the gt developers outline: "The **gt** philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. These include the *table header*, the *stub*, the *column labels* and *spanner column labels*, the *table body*, and the *table footer*."

![Parts of a gt table](images/gt_parts_of_a_table.png){.center fig-align="center" width="563"}

The `gt` package webpages have an excellent introduction to greating `gt` Tables, which you can find here.

[Thomas Mock](https://twitter.com/thomas_mock?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) has some excellent resources on his blog as well which you may find helpful in getting accustomed to the gt package and its wide-ranging functionalities: [gt cookbook](https://themockup.blog/static/resources/gt-cookbook.html#introduction) as well as the [advanced gt cookbook](https://themockup.blog/static/resources/gt-cookbook-advanced.html#introduction) and more advanced [making beautiful tables with gtExtra](https://themockup.blog/posts/2022-06-13-gtextras-cran/).

[***Note:***]{.underline} *You are not expected to master `gt` nor the advanced elements of `gt` for this course. If you are interested, some advanced resources are included here. The gt introduction and gt cookbook would are a good place to start if you wish to explore the package and creating tables over and above what is covered in this optional Topic.*

## The gt table workflow

Not only is `gt` like `ggplot2` but for tables, but it also follows tidyverse conventions! This means you can pipe your wrangled data into the `gt()` function seemlessly.

A typical `gt` Table workflow is visualized below:

![](images/typical%20gt%20workflow.png){.center fig-align="center" width="563"}

You begin with a preprocessed tabular data, such as a tibble. Next you create your gt table and customize it to your needs. Finally, the table is rendered by printing it at the console, including it in an R Markdown document, or exporting to a file using the [gtsave()](#0) function.

The code can look a bit scary, but do not fear! Think about it as writing down in code all of the edits that you would make to a table in Word - only now it is reproducible as you have written this in code!

## An example of gt workflow

#### **The data**

As with everything we have learned about in programming in this course, we must first start with the data.

We will be using a new dataset from [Public Health Scotland](https://www.opendata.nhs.scot/):

-   [Stroke Mortality by Health Board](https://www.opendata.nhs.scot/dataset/scottish-stroke-statistics/resource/19c01b59-6cf7-42a9-876a-b07b9b92d6eb)

Let's start out with some data wrangling to get the data ready for presentation in a table

```{r}
# load libraries 
 library(tidyverse)  
 library(gt) # remember to install gt in the first instance with install.packages("gt")
 
 # import data
 stroke_mortality_raw <- read_csv("https://www.opendata.nhs.scot/dataset/f5dcf382-e6ca-49f6-b807-4f9cc29555bc/resource/19c01b59-6cf7-42a9-876a-b07b9b92d6eb/download/stroke_mortalitybyhbr.csv")
 
 hb <- read_csv("https://www.opendata.nhs.scot/dataset/9f942fdb-e59e-44f5-b534-d6e17229cc7b/resource/652ff726-e676-4a20-abda-435b98dd7bdc/download/hb14_hb19.csv")
 
 stroke_mortality <- stroke_mortality_raw %>%
 # Join cancelled to hb
   left_join(hb, join_by(Hbr == HB)) %>%
 # select the variables we are interested in 
   select(Year, HBName, AgeGroup, Sex, Diagnosis, NumberOfDeaths, CrudeRate, EASR) %>% 
 # filter out aggregate levels of the variables 
   filter(Sex != "All" & AgeGroup != "All")
```

## Create a gt table with `gt()`

For sake of simplicity, let's say that we are specifically interested in the year 2020, adults 75 years old or older, and in 2 Health Boards: NHS Borders and NHS Fife.

To create a `gt` table object, all you need to do is pass your dataset, plus any data wrangling, to the `gt()` function. Because the `gt` package follows tidyverse conventions, our good friend the pipe (%\>%) will continue to be useful to us here to use the gt functions to modify the `gt` table object!

```{r}
#| results: 'asis'
#| echo: true

stroke_mortality %>%
   filter(Year == 2020,
          AgeGroup == "75plus years",
          HBName %in% c("NHS Borders", "NHS Fife")) %>% 
   gt()
```

Because we have filtered the data to only be for one `Year` and one `AgeGroup`, it is not necessarily relevant to include them in the table as we can highlight what data is presented in the table title (covered later in this tutorial). In this case, you can first select only the variables you are interested in showing in the table before creating the gt object.

```{r}
stroke_mortality %>%
   filter(Year == 2020,
          AgeGroup == "75plus years",
          HBName %in% c("NHS Borders", "NHS Fife")) %>% 
   select(HBName, 
          Sex, 
          Diagnosis, 
          NumberOfDeaths, 
          CrudeRate, 
          EASR) %>% 
   gt()
```

## Modify columns with the cols\_\*() functions

Column labels, cell alignment, column width, and placement as well as combine multiple columns with the range of cols\_\*() functions.

For example, `cols_label()` is particularly useful to rename columns to more informative names than what the variable is called in the dataset. This changes the *labels* of the columns, as per the function name, not the underlying column names (which remain the name of the variable in your dataset). Tables should be able to be understood by people who are not familiar with your dataset, so it is important for your variables to have informative names.

```{r}
stroke_mortality %>%
   filter(Year == 2020,
          AgeGroup == "75plus years",
          HBName %in% c("NHS Borders", "NHS Fife")) %>% 
   select(HBName, 
          Sex, 
          Diagnosis, 
          NumberOfDeaths, 
          CrudeRate, 
          EASR) %>% 
   gt() %>% 
   cols_label(HBName = "Health Board",
              NumberOfDeaths = "Number of Deaths",
              CrudeRate = "Crude Rate", 
              EASR = "European Age-Sex Standardised Rate") 
```

`cols_align()` aligns all text within a column. You can specify which columns to align using `vars()` - notice that the arguments are the original variable names. Commonly, the convention is to left-align text with varying length and right-align numbers. You can align different columns different ways by adding multiple `cols_align()` layers.

```{r}
stroke_mortality %>%
   filter(Year == 2020,
          AgeGroup == "75plus years",
          HBName %in% c("NHS Borders", "NHS Fife")) %>% 
   select(HBName, 
          Sex, 
          Diagnosis,
          NumberOfDeaths,
          CrudeRate, 
          EASR) %>% 
   gt() %>% 
   cols_label(HBName = "Health Board",
              NumberOfDeaths = "Number of Deaths",
              CrudeRate = "Crude Rate", 
              EASR = "European Age-Sex Standardised Rate") %>% 
   cols_align(align = "center",
              columns = NumberOfDeaths)
```

`cols_move_*()` set of functions allows you to move columns to the start or end (or wherever you want!) in your table. To move a column to the start we use `cols_move_to_start()` and to move a column to the end, the function is `cols_move_to_end()`.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(HBName, 
         Sex, 
         Diagnosis, 
         NumberOfDeaths, 
         CrudeRate, 
         EASR) %>% 
  gt() %>% 
# to move the diagnosis and Sex columns to the start 
  cols_move_to_start(columns = c(Diagnosis, Sex)) %>% 
# to move the HBName after Number of Deaths 
  cols_move(columns = HBName, after = NumberOfDeaths) %>% 
  cols_label(HBName = "Health Board",
             NumberOfDeaths = "Number of Deaths",
             CrudeRate = "Crude Rate", 
             EASR = "European Age-Sex Standardised Rate") %>% 
 cols_align(align = "center", columns = NumberOfDeaths)
```

## Format columns with the fmt\_\*() functions

To format values within columns, you can use the range of `fmt_*()` functions.

`fmt_number()` formats numeric (number-based) columns. For example, using the argument `decimal = 2` you can set a decimal place or add a suffix such as K for thousands to large numbers using `suffixing = TRUE`.

```{r}
stroke_mortality %>%
   filter(Year == 2020,
          AgeGroup == "75plus years",
          HBName %in% c("NHS Borders", "NHS Fife")) %>% 
   select(HBName, Sex, Diagnosis, NumberOfDeaths, CrudeRate, EASR) %>% 
   gt() %>%
   fmt_number(columns = c(CrudeRate, EASR), decimals = 3)
```

`fmt_percent(`) formats numbers into percents and includes the % symbol for us. By default, the values are multiplied by 100 before adding the % symbol. So, if your data is already multiplied by 100, use the `scale_value = FALSE` argument to tell R that the input is not a proportion.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
          AgeGroup == "75plus years",
          HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(HBName,
         Sex, 
         Diagnosis,
         NumberOfDeaths, 
         CrudeRate, 
         EASR) %>%
  gt() %>%
  fmt_percent(columns = c(CrudeRate, EASR), decimals = 0, scale_value = FALSE)
```

`sub_missing()` formats the default NA missing values in R to be a dash instead. As the subset of data we have been using does not have any NAs, we need to first change the data filtering a bit of our code to include NA values.

```{r}
stroke_mortality %>% 
  filter(Year == 2012,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Orkney", "NHS Grampian")) %>% 
  select(-Year, -AgeGroup) %>%
  gt() %>%
  sub_missing(columns = c(NumberOfDeaths, CrudeRate))
```

## ...and now to the stub (or rows)!

The stub is typically a column of row labels that does not have or need a column label.

### **Add a grouping using the `rowname_col` argument**

There are two ways in which you can add a grouping variable to your table, which differ in aesthetics

1.  by passing grouped data to the `gt()` function

```{r}
 stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(-Year, - AgeGroup) %>%
  group_by(Sex) %>%
  gt()
```

2.  specify `rowname_col` within `gt()`

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(-Year, - AgeGroup) %>%
  gt(rowname_col = "Sex")
```

To add a column name to the stub, if desired, you can use `tab_stubhead()`.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  #select(-Year, - AgeGroup) %>%
  group_by(Sex) %>% 
  gt() %>% 
  summary_rows(columns = NumberOfDeaths, 
               fns = list("Average" = ~mean(., na.rm = TRUE)))
```

You can also add grand summaries to grouped data using `grand_summary_rows()`.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(-Year, - AgeGroup) %>%   
  group_by(Sex) %>% 
  gt() %>% 
  summary_rows(columns = c(NumberOfDeaths, CrudeRate, EASR), 
               fns = list(Average = ~mean(., na.rm = TRUE))) %>% 
  grand_summary_rows(columns = c(NumberOfDeaths, CrudeRate, EASR), 
                     fns = list("Overall Average" = ~mean(., na.rm = TRUE)))
```

You may have noticed that the decimal places are all of the place in the above table. It is good practice to have a consistent reporting of numbers to the same decimal place. We can sort out the columns with `fmt_number()` which have have seen previously and the summary rows with the argument fmt.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(-Year, - AgeGroup) %>%   
  group_by(Sex) %>% 
  gt() %>% 
  # format numbers in columns 
  fmt_number(columns = c(CrudeRate, EASR), decimals = 3) %>% 
  summary_rows(columns = c(NumberOfDeaths, CrudeRate, EASR), 
               fns = list(Average = ~mean(., na.rm = TRUE)),
               # format number in grouped summary rows 
               fmt = list(~ fmt_number(., decimals = 3))) %>% 
  grand_summary_rows(columns = c(NumberOfDeaths, CrudeRate, EASR), 
                     fns = list("Overall Average" = ~mean(., na.rm = TRUE)),
                     # and format number in grand summary row 
                     fmt = list(~ fmt_number(., decimals = 3)))
```

## Add the final touches

Once you have your table formatted as you would like, it is important to add the final touches to make it formative for your target audience, including a header (title) and any notes.

Add a title and/or subtitle using `tab_header()`.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(-Year, - AgeGroup) %>%   
  gt() %>% 
  tab_header(title = "Stroke Mortality in 2020 in Adults Aged 75+",
             subtitle = "Data from NHS Borders and NHS Fife")
```

You can also add spanner column labels if you have multiple similar variables and would like to draw attention to the grouping using `tab_spanner()`. You can use multiple `tab_spanner()` layers to add multiple spanners highlighting different groups of columns.

```{r}
stroke_mortality %>%
  filter(Year == 2020,
         AgeGroup == "75plus years",
         HBName %in% c("NHS Borders", "NHS Fife")) %>% 
  select(-Year, - AgeGroup) %>%  
  gt() %>%
  tab_header(title = "Stroke Mortality in 2020 in Adults Aged 75+",
             subtitle = "Data from NHS Borders and NHS Fife") %>% 
  tab_spanner(label = "Rate per 100k population",
              columns = c(CrudeRate, EASR))
```

## Bonus - Introduction video from `gt` package developers

[Rich Iannone](https://twitter.com/riannone?lang=en) is one of the developers of the `gt` package. You can [watch this video](https://www.youtube.com/watch?v=z0UGmMOxl-c&t=1s) where he introduces the package and does a live walk through of creating gt tables.
