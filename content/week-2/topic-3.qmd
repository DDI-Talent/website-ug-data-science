---
title: "How to explore data?"
format: html
---

In this topic, we are focusing on getting our data ready for analysis and reporting. We will cover how to:

-   Interrogate and check the data for inaccuracies (**explore**)

-   Change the format and transform the data (**tidy**)

-   Visualise and clean the data (**prepare**).

You might also find this type of task referred to as **data wrangling**. You can expect to spend as much as 80% of your time on this part of the process, sometimes more!

![](images/data_cowboy.png){fig-alt="Data cowboy"}

[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)

We are continuing to use one of the datasets available from [Public Health Scotland](https://www.opendata.nhs.scot/):

-   [Cancelled Planned Operations by Health Board](https://www.opendata.nhs.scot/dataset/cancelled-planned-operations/resource/0f1cf6b1-ebf6-4928-b490-0a721cc98884)

We're also going to be using the Global Burden of Disease (GBD, or gbd in lowercase), which includes information on the causes of death globally. What we will be using is the number of deaths for the three broad cause categories - Injuries, Communicable diseases, and Non-communicable diseases. But the project and its freely available datasets also include much more detailed breakdowns, both in the types of diseases, countries, as well as different metrics. It is freely available from here: 

-   [Global Burden of Disease data](http://ghdx.healthdata.org/gbd-results-tool)

Here are the functions we'll be covering in the topic videos:

-   base::library() we're already familiar with for loading packages
-   base::names() allows us to view all the column names or variables in our dataet
-   dplyr::distinct() for exploring the unique values in our columns or variables
-   dplyr::filter() allows us to subset data by filtering out rows based on variable criteria
-   dplyr::select() allows us to subset data by selecting specific columns or variables
-   dplyr::glimpse() provides information on dimensions, data types and a small preview
-   dplyr::arrange() & dplyr::desc() lets you sort your data (default is ascending order)
-   tidyr::pivot_longer() lengthens the data, increasing rows and decreasing columns
-   tidyr::pivot_wider() widens the data, increasing columns and decreasing rows
-   dplyr::mutate() for changing or adding columns
-   stringr::str_replace() for finding and replacing strings (text) in your data
-   ggplot2::ggplot() & ggplot2::aes() lets R know you are about to make a plot and what you're going to plot
-   ggplot2::geom_point() lets R know you want to make a scatter plot
-   base::replace() for finding and replacing values in your data

![](images/dplyr_filter.jpg){fig-alt="dplyr filter cartoon"}

![](images/dplyr_mutate.png){fig-alt="dplyr mutate campaign"}

[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)

### Explore Data

The main package we will be using to explore the data is `dplyr`, which is part of the tidyverse. Watch the following video to learn about some of the functions for carrying out your initial exploration of your data.

If you want to recreate the following session on your own computer, you can download the **cancelled_operations** project folder here: [cancelled_operations.zip](./files/cancelled_operations_2.zip)

*Note: To open the project, make sure to "unzip" or "extract all" from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.*

*Alternatively, here is the individual cancelled_messy file: [phs_cancelled_messy.Rda](./files/phs_cancelled_messy.Rda) Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select "yes" to loading into your Global Environment).*

[![](images/Screenshot%202025-05-26%20at%2016.12.47.png){fig-alt="Explore data"}](https://media.ed.ac.uk/playlist/dedicated/165686341/0_n8z6wzy7/0_0x81oy5g)

### Tidy Data

Watch the following video to learn about some of the functions for reshaping your data so that you can get it into a format which makes it easy to plot.

If you want to recreate the following session on your own computer, you can download the **cancelled_operations** project folder here: [cancelled_operations.zip](./files/cancelled_operations_2.zip) *Note: To open the project, make sure to "unzip" or "extract all" from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.*

*Alternatively, here is the individual cancelled_messy file: [phs_cancelled_messy.Rda](./files/phs_cancelled_messy.Rda) Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select "yes" to loading into your Global Environment).*

[![](images/Screenshot%202025-05-26%20at%2016.22.01.png){fig-alt="Tidy data video"}](https://media.ed.ac.uk/playlist/dedicated/165686341/0_n8z6wzy7/1_6lvj81qx)

Download the video transcript link [here](./files/Tidying%20Data.docx)

As described in the video, and visualized below, in a tidy dataset (a) each variable forms a column, (b) each observation forms a row, and (c) and each cell is a single measurement.

![](images/tidydata_1.jpg){fig-alt="Tidy data cartoon"}

![](images/tidydata_2.jpg){fig-alt="Tidy data cartoon"}

![](images/tidydata_3.jpg){fig-alt="Tidy data cartoon"}

![](images/tidydata_6.jpg){fig-alt="Tidy data cartoon"}

![](images/tidydata_7.jpg){fig-alt="Tidy data cartoon"}

[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)

### Prepare Data

In this video we're going to take a first look at visualising our data as a way of exploring it and looking for outliers, or mistakes.

If you want to recreate the following session on your own computer, you can download the **cancelled_operations** project folder here: [cancelled_operations.zip](./files/cancelled_operations_2.zip) *Note: To open the project, make sure to "unzip" or "extract all" from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.*

*Alternatively, is the individual cancelled_tidy file: [phs_cancelled_tidy.Rda](./files/phs_cancelled_tidy.Rda) Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select "yes" to loading into your Global Environment).*

[![](images/Screenshot%202025-05-26%20at%2016.35.14.png){fig-alt="Prepare data video"}](https://media.ed.ac.uk/playlist/dedicated/165686341/0_n8z6wzy7/0_2w3an1sj)

Download the video transcript link [here](./files/Preparing%20Data.docx)

### Other Useful Functions and Operations

Here are some other useful functions and operators you might find useful when wrangling with data.

### The c() combine function and the %in% operator

The combine function, as you may well have guessed, is useful for combining several values: `c()`. We do this by listing the different elements between the brackets, separated by a comma. Text has to be within inverted commas.

The `c()` function crops up all over the place, for example, in functions where we want to list multiple values as the input to one argument. But it is particularly useful for filtering data.

When combined with the special type of operator, the `%in%` operator, it can save us extra typing and make our code more readable. We use the `%in%` operator to identify if a value or set of values appears within another set of values.

Let's quickly recap how we might filter data if we didn't know about %in% operator.

If we were interested in filtering our GBD dataset to only include "Communicable" and "Non-communicable" diseases, we might use the following code:

```{r}
#| eval: false
gbd_full %>%
  # also filtering for a single year to keep the result concise 
  filter(year == 1990) %>%
  filter(cause == "Communicable diseases" | cause == "Non-communicable diseases")
```

Which produces the following output:

![](images/gbd_output.png){fig-alt="GBD output"}

This works perfectly well, but what if we had a column where we wanted to look at data on a whole list of values. Perhaps we have a column with Health Boards and we want to look at data on all those on the East of Scotland. We would have to repeat `| HBName ==` for each value.

This is where the `%in%` operator and `c()` function can save us some typing, see the following code which gives exactly the same output as our previous code:

```{r}
#| eval: false
gbd_full %>%
  # also filtering for a single year to keep the result concise 
  filter(year == 1990) %>%
  filter(cause %in% c("Communicable diseases", "Non-communicable diseases"))
```

Which produces the following output:

![](images/gbd_output_2.png){fig-alt="GBD output 2"}

### The paste() function for joining values together

We've just explored the `c()` function which allows values to be "combined" but they are not actually joined to make a new variable, they remain separate.

If we want to make a new character variable by joining other variables together, we need to use the `paste()`function.

The `paste()` function allows us to paste several variables (e.g. words, numbers, or dates) into one character variable or sentence.

For example, we might want to create a new column with text which could be used as a label:

```{r}
#| eval: false
# create a new column
gbd_full %>%
  mutate(year_label_paste = paste("Year is", year))
```

Which produces the following output:
