{
  "hash": "9d97b7365d5014b27ed97c9f02929536",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to explore data?\"\nformat: html\n---\n\n\n\n\nIn this topic, we are focusing on getting our data ready for analysis and reporting. We will cover how to:\n\n-   Interrogate and check the data for inaccuracies (**explore**)\n\n-   Change the format and transform the data (**tidy**)\n\n-   Visualise and clean the data (**prepare**).\n\nYou might also find this type of task referred to as **data wrangling**. You can expect to spend as much as 80% of your time on this part of the process, sometimes more!\n\n![](images/data_cowboy.png){fig-alt=\"Data cowboy\"}\n\n[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)\n\nWe are continuing to use one of the datasets available from [Public Health Scotland](https://www.opendata.nhs.scot/):\n\n-   [Cancelled Planned Operations by Health Board](https://www.opendata.nhs.scot/dataset/cancelled-planned-operations/resource/0f1cf6b1-ebf6-4928-b490-0a721cc98884)\n\nWe're also going to be using the Global Burden of Disease (GBD, or gbd in lowercase), which includes information on the causes of death globally. What we will be using is the number of deaths for the three broad cause categories - Injuries, Communicable diseases, and Non-communicable diseases. But the project and its freely available datasets also include much more detailed breakdowns, both in the types of diseases, countries, as well as different metrics. It is freely available from here: \n\n-   [Global Burden of Disease data](http://ghdx.healthdata.org/gbd-results-tool)\n\nHere are the functions we'll be covering in the topic videos:\n\n-   base::library() we're already familiar with for loading packages\n-   base::names() allows us to view all the column names or variables in our dataet\n-   dplyr::distinct() for exploring the unique values in our columns or variables\n-   dplyr::filter() allows us to subset data by filtering out rows based on variable criteria\n-   dplyr::select() allows us to subset data by selecting specific columns or variables\n-   dplyr::glimpse() provides information on dimensions, data types and a small preview\n-   dplyr::arrange() & dplyr::desc() lets you sort your data (default is ascending order)\n-   tidyr::pivot_longer() lengthens the data, increasing rows and decreasing columns\n-   tidyr::pivot_wider() widens the data, increasing columns and decreasing rows\n-   dplyr::mutate() for changing or adding columns\n-   stringr::str_replace() for finding and replacing strings (text) in your data\n-   ggplot2::ggplot() & ggplot2::aes() lets R know you are about to make a plot and what you're going to plot\n-   ggplot2::geom_point() lets R know you want to make a scatter plot\n-   base::replace() for finding and replacing values in your data\n\n![](images/dplyr_filter.jpg){fig-alt=\"dplyr filter cartoon\"}\n\n![](images/dplyr_mutate.png){fig-alt=\"dplyr mutate campaign\"}\n\n[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)\n\n### Explore Data\n\nThe main package we will be using to explore the data is `dplyr`, which is part of the tidyverse. Watch the following video to learn about some of the functions for carrying out your initial exploration of your data.\n\nIf you want to recreate the following session on your own computer, you can download the **cancelled_operations** project folder here: [cancelled_operations.zip](./files/cancelled_operations_2.zip)\n\n*Note: To open the project, make sure to \"unzip\" or \"extract all\" from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.*\n\n*Alternatively, here is the individual cancelled_messy file: [phs_cancelled_messy.Rda](./files/phs_cancelled_messy.Rda) Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select \"yes\" to loading into your Global Environment).*\n\n[![](images/Screenshot%202025-05-26%20at%2016.12.47.png){fig-alt=\"Explore data\"}](https://media.ed.ac.uk/playlist/dedicated/165686341/0_n8z6wzy7/0_0x81oy5g)\n\n### Tidy Data\n\nWatch the following video to learn about some of the functions for reshaping your data so that you can get it into a format which makes it easy to plot.\n\nIf you want to recreate the following session on your own computer, you can download the **cancelled_operations** project folder here: [cancelled_operations.zip](./files/cancelled_operations_2.zip) *Note: To open the project, make sure to \"unzip\" or \"extract all\" from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.*\n\n*Alternatively, here is the individual cancelled_messy file: [phs_cancelled_messy.Rda](./files/phs_cancelled_messy.Rda) Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select \"yes\" to loading into your Global Environment).*\n\n[![](images/Screenshot%202025-05-26%20at%2016.22.01.png){fig-alt=\"Tidy data video\"}](https://media.ed.ac.uk/playlist/dedicated/165686341/0_n8z6wzy7/1_6lvj81qx)\n\nDownload the video transcript link [here](./files/Tidying%20Data.docx)\n\nAs described in the video, and visualized below, in a tidy dataset (a) each variable forms a column, (b) each observation forms a row, and (c) and each cell is a single measurement.\n\n![](images/tidydata_1.jpg){fig-alt=\"Tidy data cartoon\"}\n\n![](images/tidydata_2.jpg){fig-alt=\"Tidy data cartoon\"}\n\n![](images/tidydata_3.jpg){fig-alt=\"Tidy data cartoon\"}\n\n![](images/tidydata_6.jpg){fig-alt=\"Tidy data cartoon\"}\n\n![](images/tidydata_7.jpg){fig-alt=\"Tidy data cartoon\"}\n\n[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)\n\n### Prepare Data\n\nIn this video we're going to take a first look at visualising our data as a way of exploring it and looking for outliers, or mistakes.\n\nIf you want to recreate the following session on your own computer, you can download the **cancelled_operations** project folder here: [cancelled_operations.zip](./files/cancelled_operations_2.zip) *Note: To open the project, make sure to \"unzip\" or \"extract all\" from the folder, before clicking on the cancelled_operations.Rproj file to open the project in RStudio.*\n\n*Alternatively, is the individual cancelled_tidy file: [phs_cancelled_tidy.Rda](./files/phs_cancelled_tidy.Rda) Note: To load the data, find the file on your computer, double click to open (select RStudio if prompted, and select \"yes\" to loading into your Global Environment).*\n\n[![](images/Screenshot%202025-05-26%20at%2016.35.14.png){fig-alt=\"Prepare data video\"}](https://media.ed.ac.uk/playlist/dedicated/165686341/0_n8z6wzy7/0_2w3an1sj)\n\nDownload the video transcript link [here](./files/Preparing%20Data.docx)\n\n### Other Useful Functions and Operations\n\nHere are some other useful functions and operators you might find useful when wrangling with data.\n\n### The c() combine function and the %in% operator\n\nThe combine function, as you may well have guessed, is useful for combining several values: `c()`. We do this by listing the different elements between the brackets, separated by a comma. Text has to be within inverted commas.\n\nThe `c()` function crops up all over the place, for example, in functions where we want to list multiple values as the input to one argument. But it is particularly useful for filtering data.\n\nWhen combined with the special type of operator, the `%in%` operator, it can save us extra typing and make our code more readable. We use the `%in%` operator to identify if a value or set of values appears within another set of values.\n\nLet's quickly recap how we might filter data if we didn't know about %in% operator.\n\nIf we were interested in filtering our GBD dataset to only include \"Communicable\" and \"Non-communicable\" diseases, we might use the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbd_full %>%\n  # also filtering for a single year to keep the result concise \n  filter(year == 1990) %>%\n  filter(cause == \"Communicable diseases\" | cause == \"Non-communicable diseases\")\n```\n:::\n\n\n\n\nWhich produces the following output:\n\n![](images/gbd_output.png){fig-alt=\"GBD output\"}\n\nThis works perfectly well, but what if we had a column where we wanted to look at data on a whole list of values. Perhaps we have a column with Health Boards and we want to look at data on all those on the East of Scotland. We would have to repeat `| HBName ==` for each value.\n\nThis is where the `%in%` operator and `c()` function can save us some typing, see the following code which gives exactly the same output as our previous code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbd_full %>%\n  # also filtering for a single year to keep the result concise \n  filter(year == 1990) %>%\n  filter(cause %in% c(\"Communicable diseases\", \"Non-communicable diseases\"))\n```\n:::\n\n\n\n\nWhich produces the following output:\n\n![](images/gbd_output_2.png){fig-alt=\"GBD output 2\"}\n\n### The paste() function for joining values together\n\nWe've just explored the `c()` function which allows values to be \"combined\" but they are not actually joined to make a new variable, they remain separate.\n\nIf we want to make a new character variable by joining other variables together, we need to use the `paste()`function.\n\nThe `paste()` function allows us to paste several variables (e.g. words, numbers, or dates) into one character variable or sentence.\n\nFor example, we might want to create a new column with text which could be used as a label:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new column\ngbd_full %>%\n  mutate(year_label_paste = paste(\"Year is\", year))\n```\n:::\n\n\n\n\nWhich produces the following output:\n\n![](images/gbd_output_3.png){fig-alt=\"GBD output\"}\n\nIn the paste() function we need to specify each element we would like to combine, separated by a comma. By default, the separation between the elements is a space, but we can change this using the sep = argument within the paste function.\n\n*Note: For more informtion on this, try looking the function up in the help tab in RStudio, either by pressing F1 when the cursor is within the function name, or by search in the Help tab search box.*\n\n### The pull() function or the extract operator\n\nWe've seen how to use the `select()` function to select a specific column or columns from a dataset. The type of object we get out is the same as the type we put in, just smaller, so if we pipe a tibble (the name for a tidyverse data frame) into `select()`, we get a smaller tibble out.\n\nSometimes however we might need our output to be in a slightly different format, we might need it to be a vector, which we can think of as a simple list of values.\n\nWe can get a vector, either by using the base R extract operator `$`, or we can use the `pull()` function from the dplyr package.\n\nLet's see how both of these work:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# $ operator \ngbd_full$deaths_millions \n \n# pull() function \ngbd_full %>%\n  pull(deaths_millions)\n```\n:::\n\n\n\n\nR will give us all the data for that variable - as seen in the following output:\n\n![](images/gbd_output_4.png){fig-alt=\"GBD output\"}\n\n### The round() function\n\nNot surprisingly, we can use the `round()` function from base R to round variables to create integers.\n\nFor example, in the GBD dataset we might want to round the total deaths column (`deaths_millions`) to no decimal places.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# round to whole number \nround(gbd_full$deaths_millions) \n```\n:::\n\n\n\n\nWhich produces the following output:\n\n![](images/gbd_output_5.png){fig-alt=\"GBD output\"}\n\n*Note: Here we use the `$` sign to specify which column from the gbd_full dataset we wanted. We did not pipe (`%>%`) gbd_full into `round()` because the first argument in this base R function is looking for a numeric vector (a list of numbers) rather than the name of a tibble or data frame, which is what we are more used to seeing in the tidyverse functions.*\n\n### Other Useful Packages\n\n#### lubridate\n\nDates can often be a bit of a nightmare. They can come in many different formats and are prone to error and so can be awkward to work with. In the \"Import Excel\" video in the last topic we saw that R wasn't able to recognise the date column when we used the Import Wizard.\n\nThankfully, like many problems in R, there is a package for just this issue and it's called the lubridate package. It's a tidyverse package which makes it easy to work with dates.\n\nHere is a quick taster, you can:\n\n-   parse (read in) a very wide range of formats with the `ymd()` function\n-   extract the relevant parts from your dates with `year()` and `month()` functions\n-   easily calculate time intervals with the `interval()` function\n\n![](images/lubridate.png){fig-alt=\"Lubridate cartoon\"}\n\n![](images/lubridate_ymd.png){fig-alt=\"Lubridate cartoon\"}\n\n[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)\n\n#### janitor\n\nCleaning and tidying our data takes up a considerable amount of valuable time, but there's one function which can help to make our lives a little bit easier when we're going round the bend trying to fix badly named variables. It's the `clean_names()` function from the janitor package.\n\nThe `clean_names()` function converts your variables into snake case style. This just means that it replaces all capital letters, punctuation and spaces with underscores to make the variables easier to work with because R doesn’t like your column headers to have spaces in them or weird characters and symbols.\n\n![](images/janitor_clean_names.png){fig-alt=\"Janitor clean names cartoon\"}\n\n[artwork by Allison Horst](https://twitter.com/allison_horst?lang=en)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}