{
  "hash": "56e432d98b1f6aa54067cdec74bf1a97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Geospatial Data in R with sf and Tidyverse\"\nformat: html\n---\n\n\n\n# What is Geospatial Data\n\n## Spatial Analysis\n\nGeospatial data is data about locations and features on Earth but we often refer to geospatial data simply as “spatial data”. These data can often have latitude and longitude attached to them. An example of spatial data would be using a bus app, and you can see the location of the bus.\n\nAnalysing this data is referred to as **spatial analysis**.\n\nFor example, you could have a map with data layered on top:\n\n![covid_vaccine_country_Africa](./images/Map_of_share_of_people_who_received_at_least_one_dose_of_COVID-19_vaccine_by_country_in_Africa,_2021.svg.png){fig-align=\"center\"}\n\n*Map of share of people who received at least one dose of COVID-19 vaccine by country in Africa, 2021.svg” by [Our World In Data](https://ourworldindata.org/) is licensed under [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.en)*\n\n![](images/Georgia_Population_Density_by_Census_Tract_2018.png){fig-align=\"center\" width=\"473\"}\n\n\"[Georgia Population Density by Census Tract](https://commons.wikimedia.org/wiki/File:Georgia_Population_Density_by_Census_Tract_2018.png#file)\" by Wikimedia, used under [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)\n\n![](images/spatial_example2.png){fig-align=\"center\" width=\"513\"}\n\nOr in this example - Mountain trails in Dovrefjell National Park, Norway created by our colleague John Wilson.\n\n## **Why is it Important?**\n\nSpatial analysis can be used in many disciplines to aid decision makers in their decision making process. Urban planners might use it as might logistics practitioners.\n\nIn the health context, vaccination strategies can be informed or the tracking of infectious diseases can be greatly improved.\n\nOne famous example is John Snow’s investigation into a cholera outbreak in London in 1854. Not convinced that the disease was transmitted by air but rather through the water system, he plotted points on a map to show that cholera deaths were clustered around water outlets.\n\n[Read more on BBC Bitesize](https://www.bbc.co.uk/bitesize/articles/zfvnf82#zwt2xbk)\n\n![*John Snow’s Cholera Map 1854 (public domain)*](images/snow-cholera-map-5f4358-640.jpg){fig-align=\"center\" width=\"513\"}\n\n# Spatial data structures and the sf package\n\n![](images/sf-image.jpg){fig-align=\"center\" width=\"614\"}\n\n[Artwork by \\@allison_horst](https://twitter.com/allison_horst)\n\nSpatial data are different to the usual datasets we have been working with. Spatial data are usually represented by “vector” data, rather than in the rows and columns that we are used to.\n\n## **Wait, what’s vector data?**\n\nVector data is data that represents features in the world as either **points**, **lines** or **polygons**.\n\n-   **Points:** A single pair of coordinates. For example the x,y position of a tower location.\n\n-   **Lines:** Two or more connected points. For example, the start and end of a pathway.\n\n-   **Polygons:** Three or more points that are connected and closed. For example, the outline of a loch.\n\n![](images/pnt_line_poly.png){fig-align=\"center\" width=\"513\"}\n\n[*National Ecological Observatory Network*](https://www.neonscience.org/resources/learning-hub/tutorials/intro-vector-data-r)*.*\n\n## Shapefiles\n\nThe most common file format for vector data is a **Shapefile** which has the extension **.shp**. It stores the points, lines or polygons of the dataset. **.shp** files can store only one type: points, lines or polygons and comes with metadata which indicates which type it stores. Working with Shapefiles in R can be a bit more challenging than working with normal data frames and tibbles, but they allow you to have rich datasets with geographic content.\n\n### Further resources:\n\nFor more about vector data see [Introduction to Vector Data (Data Carpentry)](https://datacarpentry.org/organization-geospatial/02-intro-vector-data.html)\n\n## Simple spatial features (sf)\n\n**sf** stands for Simple Features, a standardized format for representing spatial vector data. It follows a formal standard that defines how spatial geometries—such as points, lines, and polygons—are stored and accessed.\n\nBut what exactly is a feature? You can think of a feature as an object. In the real world, objects can be anything: a building, a tree, or a satellite. While we refer to them as single 'objects', they actually consist of various components. For instance, a tree is made up of a trunk, branches, and leaves. A feature follows the same concept: it may represent a single entity but can consist of multiple parts, along with attributes that describe it.\n\n*\"**Simple Features** (officially **Simple Feature Access**) is a set of standards that specify a common storage and access model of [geographic features](https://en.wikipedia.org/wiki/Geographic_features) made of mostly two-dimensional geometries (point, line, polygon, multi-point, multi-line, etc.) used by [geographic databases](https://en.wikipedia.org/wiki/Geographic_database) and [geographic information systems](https://en.wikipedia.org/wiki/Geographic_information_system). It is formalized by both the [Open Geospatial Consortium](https://en.wikipedia.org/wiki/Open_Geospatial_Consortium) (OGC) and the [International Organization for Standardization](https://en.wikipedia.org/wiki/International_Organization_for_Standardization) (ISO).\" - [Wikipedia](https://en.wikipedia.org/wiki/Simple_Features)*\n\nThe following seven simple feature types are the most common:\n\n![](images/features.png){fig-align=\"center\" width=\"513\"}\n\nIn the **sf** package, spatial objects are stored as a simple data frame with a special column that holds the geometry coordinates. This special column is a list, with each element corresponding to a row in the data frame. The length of each list element varies, depending on how many coordinates are needed to represent each individual feature. To work with **sf** objects in R, we use the **sf** package.\n\n#### **New Zealand Census Example**\n\nLet's look at an example. Download and unzip the file below into a \"data\" folder and create an RProject and a new RMarkdown file (new_zealand_census.Rmd). This data is aggregated census data from New Zealand from 2013.\n\n\n::: {.cell}\n\n:::\n\n\nOr you can download the completed example **complete-new-zealand-census2013.zip**\n\n\n::: {.cell}\n\n:::\n\n\nYou'll notice there are 4 files. This is the format of  Esri Shapefiles. ([Esri](https://www.esri.com/en-us/about/about-esri/technology) is a geographic science and geospatial analytics company).\n\n-   **.shp:** The main file that contains the feature geometry\n\n-   **.shx:** The index file that stores the index of the feature geometry\n\n-   **.dbf:** The dBASE table that stores the attribute information of features\n\n-   **.prj:** A text file that contains information about a coordinate system and map projection\n\nThe **.shp** file is our spatial data and is already an **sf object** (the other files are part of the specification and are used to make reading the data more efficient).This means we can read the file in using the **st_read()** function to read it into our code. All of the functions in the **sf** package that operate on spatial data start with **\"st\\_\".** This stands for **spatial and temporal**.\n\nLet's load the data and have a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You may need to install.packages(\"sf\")\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(here) \nlibrary(janitor) # This is for cleaning the variable names\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in data about New Zealand using the st_read function\nnz_census2013 <- st_read(here(\"data\" ,\"nz_census2013.shp\"))\n \n# We'll use clean_names from janitor package to quickly clean up messy column names.\n# It changes them all to lowercase and adds \"_\" for spaces\nnz_census2013 <- nz_census2013 %>% \n  clean_names()\n```\n:::\n\n\nClick on the **nz_census2013** object. Here we can see:\n\n1.  **simple features object (sf)**: a single observation.\n\n2.  **simple feature geometry list-column (sfc)** : this is the geometry column.\n\n3.  **simple feature geometry (sfg)** : this is the values within the geometry column. We can see the type is **MULTIPOLYGON.**\n\n![](images/Screenshot%202024-10-07%20at%2014.19.55.png){fig-align=\"center\" width=\"625\"}\n\nWhen you inspect the data, you'll see that the geometries are placed in a list-column. Each element of this list holds the simple feature geometry for a particular feature, as geometries are not single-valued.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check class and look at the data\nclass(nz_census2013)\n```\n:::\n\n\nWhen we check the class of the **nz_census2013** object we can see that it is both a data.frame and an **sf** object.\n\nWe can access the geometry aspect of your spatial data by calling the **st_geometry** function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnz_geometry <- st_geometry(nz_census2013)\nnz_geometry\n```\n:::\n\n\nWe can see that the geometry column is a **list** of polygons made up of points.\n\n![](images/Screenshot%202024-10-02%20at%2015.38.33.png){fig-align=\"center\" width=\"625\"}\n\n## Plotting the data\n\nFor visualisation, the **sf** package extends the base plot command, so it can be used on **sf** objects. If used without any arguments it will plot all the attributes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If you want to plot all variables, you can do the following:\nplot(nz_census2013)\n```\n:::\n\n\n![](images/Screenshot%202024-10-07%20at%2014.25.15.png){fig-align=\"center\" width=\"625\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Or we could plot only the area variable of the sf object.\n# Because it's an sf object we can't use the $ operator to get the results we want (e.g. nz_census2013$area). \n# Instead, we use the square bracket notation.\nplot(nz_census2013[\"area\"])\n```\n:::\n\n\n![](images/Screenshot%202024-10-07%20at%2014.27.16.png){fig-align=\"center\" width=\"625\"}\n\nThis is great but often we'll want to use **ggplot** because it gives us more control over our plots.\n\n#### **Plotting spatial data with ggplot**\n\nLuckily, there is a function built into ggplot called **geom_sf.** Let's try it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the data using ggplot \nggplot(data = nz_census2013, aes(fill = pop)) + \n  geom_sf() +\n  scale_fill_continuous(labels = scales::label_comma())\n```\n:::\n\n\n![](images/Screenshot%202024-10-07%20at%2014.29.40.png){fig-align=\"center\" width=\"625\"}\n\nMuch better! Here are a few more examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nz_census2013, aes(fill = income)) + \n  # colour and linewidth refer to the outline of the map\n  geom_sf(colour = \"white\", linewidth = 0.1) +\n  scale_fill_viridis_c(name = \"Income in $\") +\n  theme_void() +\n  labs(title = \"Average Income by Region 2013\")\n```\n:::\n\n\n![](images/Screenshot%202024-10-13%20at%2018.38.20.png){fig-align=\"center\" width=\"625\"}\n\nLet's say we wanted to display a map illustrating the average region percentage of each island who are Maori:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by island and summarise to get mean of maori per region\nnz_census_summary_by_island <- nz_census2013 %>% \n  group_by(island) %>% \n  summarise(average_percent_maori = mean(maori))\n \n \n# Extract the North Island's average percentage Maori for the subtitle\n# We use pull() to get just the values from a specific column, rather than returning a tibble\nnorth_island_percent <- nz_census_summary_by_island %>%\n  filter(island == \"North\") %>%\n  pull(average_percent_maori)\n \n \n# Extract the South Island's average percentage Maori for the subtitle\nsouth_island_percent <- nz_census_summary_by_island %>%\n  filter(island == \"South\") %>%\n  pull(average_percent_maori)\n \n \nnz_census_summary_by_island  %>% \n  ggplot(aes(fill = average_percent_maori)) +\n  geom_sf(colour = \"black\", linewidth = 0.5) +\n  scale_fill_viridis_c(\n    name = \"Percent\",\n    labels = function(x) x * 100\n ) +\n  theme_void() +\n  labs(\n    title =\"Average Region Percentage of Population Maori 2013\",\n    subtitle = paste0(\"North Island: \", round(north_island_percent * 100, 1), \", South Island: \", round(south_island_percent * 100, 1))\n  ) \n```\n:::\n\n\n![](images/Screenshot%202024-10-13%20at%2018.47.50.png){fig-align=\"center\" width=\"625\"}\n\n**Thinking point:** Why there are only two colours on the map?\n\n#### **Key Takeaways**\n\n-   **Spatial data** is represented by \"vector\" data, including **points**, **lines**, and **polygons**.\n\n-   **Points**: Single coordinates (e.g., a tower location).\n\n-   **Lines**: Connected points (e.g., pathways).\n\n-   **Polygons**: Closed shapes formed by points (e.g., boundaries of a loch).\n\n-   **Shapefiles** are a common file format for vector data, storing geographical features (points, lines, polygons).\n\n-   **Shapefiles** include multiple files (.shp, .shx, .dbf, .prj) that contain feature geometry and attribute information.\n\n-   The **sf** package in R is used to work with spatial vector data.\n\n-   Spatial data is stored in a **data frame** with a special **geometry** column, and functions for spatial operations start with **\"st\\_\"**.\n\n-   The **st_read()** function is used to read shapefiles into R as sf objects.\n\n-   **Visualization**: Plot sf data using **ggplot2** with **geom_sf()** for better customization.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}