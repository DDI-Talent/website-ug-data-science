{
  "hash": "9dfeadecd60b109a3ca992871d22074b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Optional: Writing Functions in R\"\nformat: html\n---\n\n### **Writing Functions**\n\n#### **Objectives**\n\n-   Understand the structure and purpose of functions in R.\n\n-   Develop skills in writing functions in R.\n\n#### **Why Do We Use Functions?**\n\nFunctions are a way of writing code that reduces the *repetition* of your code. They are a way to avoid copying and pasting bits of code throughout your script. To quote Hadley Wickham (creator of tidyverse):\n\n***“One of the best ways to improve your reach as a data scientist is to write functions. Functions allow you to automate common tasks in a more powerful and general way than copy-and-pasting. Writing a function has four big advantages over using copy-and-paste.”***\n\nHis 4 big advantages are:\n\n1.  You can give a function an evocative name that makes your code easier to understand.\n\n2.  As requirements change, you only need to update code in one place, instead of many.\n\n3.  You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\n4.  It makes it easier to reuse work from project-to-project, increasing your productivity over time.\n\n#### **How do I know when to write a function?**\n\n***\"A good rule of thumb is to consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code)\"***\n\nAttribution: [“R for Data Science: Functions”](https://r4ds.hadley.nz/functions) by Hadley Wickham is licensed under CC BY-NC-ND 3.0 US\n\n#### **Anatomy of a Function**\n\nOk, but what does a function look like? Here is a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic function structure\n \nmy_function <- function(arg1, arg2) {\n  result <- arg1 + arg2\n  return(result)\n}\n```\n:::\n\n\nLet’s break it down into the key parts:\n\n1.  **name**of the function. This is usually a verb, because functions ‘do’ things.\n\n2.  **function**is a keyword in R and is required to create a function.\n\n3.  **arguments**(also known as parameters but let’s not get too scientific) are values that are ‘passed in’ to the function.\n\n4.  **curly brackets**define the**body**of the function. This is a black box world that has access to the arguments that are passed in.\n\n5.  **return**keyword defines what the output should be. (But as we’ll see, we don’t actually need it!)\n\n![](images/function_anatomy.png){.center fig-align=\"center\" width=\"563\"}\n\n#### **Input and Output**\n\nSo the arguments of a function are the input and the return keyword defines the output.\n\nA washing machine is a good metaphor. Let’s say the washing machine is the function - a black box so to speak. The laundry and detergent are the inputs and the clean laundry is the output.\n\n#### **Implicit Returns**\n\nUsually in R, we skip the return keyword and the function knows to return the last thing that was defined within in. So our example above would become:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Implicit return\n \nmy_function <- function(arg1, arg2) {\n  result <- arg1 + arg2\n}\n```\n:::\n\n\nWe could even skip the aassignemt to the result variable. Hence our function becomes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Implicit return\n \nmy_function <- function(arg1, arg2) {\n  arg1 + arg2\n}\n```\n:::\n\n\nThis still behaves the same way but we have removed the return statement and the variable assignment. The result value will be returned because it is the last thing that is defined in the function body. This means less code. Yay!\n\n#### **Defining & Running Functions**\n\nWhen you define a function, you’re saying to R “please read this piece of code (the function) and store it for later use”.\n\nWhen you run a function, you are asking it to execute. Let’s write an example in RStudio.\n\n***NOTE: “call”, “run”, “execute” and “invoke” are all words for the same thing.***\n\nIf you haven’t already, create a new project or use the project you are currently in. Create a new R Markdown file and save it as my_functions.Rmd.\n\nWrite the following code in a code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_area <- function(length, width) {\n  length * width\n}\n```\n:::\n\n\nWhat do you notice when you run this code?\n\nNothing happens! You will however, find our function definition in the Environment tab. That means, our function has been **defined**.\n\nThe key thing about functions is that we **define** them once but can call them **many times**.\n\nLet’s add some code to call our function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# AS BEFORE\ncalculate_area <- function(length, width) {\n  length * width\n}\n \n# Run the function\ncalculate_area(50, 10) # ADDED\n```\n:::\n\n\nIn this case, we ask R to call the function with the values 50 for length and 10 for width.\n\nExecute the code by clicking the “Source” button. What did you expect to happen? Given the arguments 50 and 10, you might have expected to see 500 output somewhere because the calculate_area function multiplies length and width and returns the area.\n\nIn fact, the function *has* done this but the return value (i.e. 500) has been lost because we haven’t done anything with the return value.\n\nLet’s fix this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# AS BEFORE\ncalculate_area <- function(length, width) {\n  length * width\n}\n \n# Run the function\narea <- calculate_area(50, 10) # NEW\narea # NEW\n```\n:::\n\n\nSuccess! You will see that 500 has been printed in the console. Try adding some more function calls to your script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ... AS BEFORE\n \nlarge_area <- calculate_area(2020, 900) # NEW\nprint(large_area) # 1818000\n \nsmall_area <- calculate_area(2, 2) # NEW\nsmall_area # 4\n```\n:::\n\n\n#### **Practice writing your own functions**\n\n1.  Define a function called **add_two_numbers()** that takes two arguments, adds them together, and returns the result. Remember to call the function and print out the result!\n\n2.  Define a function called **square_number()** that takes a single argument and returns its square.\n\n3.  Define a function called **is_even()** that takes one argument, checks if the number is even or odd, and returns TRUE for even numbers and FALSE for odd numbers. HINT use the modulo operator %%.\n\n#### **A note on default arguments**\n\nConsider the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhappy_birthday <- function(input = \"you\") {\n  paste0(\"Happy birthday to \", input)\n}\n \nhappy_birthday()\n```\n:::\n\n\nWhat do you hypothesise this code will do when we run it? Run the code and see if you are right.\n\nNotice that when we called the function happy_birthday() we didn’t pass in any arguments. We can either pass in an argument or we can skip it. If we skip it, it will default to “you”. But if we pass in an argument, the input will be assigned that value instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhappy_birthday(\"Zaphod\") # Happy birthday to Zaphod\n```\n:::\n\n\n#### **Key Takeaways**\n\n-   **Functions in R** help reduce code repetition, improve readability, and minimise errors by allowing you to encapsulate common tasks into reusable blocks of code.\n\n-   **Naming functions** descriptively (usually as verbs) makes the purpose of your code clearer. Well-named functions improve the understanding and maintainability of your code.\n\n-   **Inputs (arguments)** are passed into functions, and outputs are returned. You can use a function like a “black box” that processes inputs and produces outputs, similar to how a washing machine takes in laundry and detergent and returns clean laundry.\n\n-   **Return values** can be specified explicitly using return() but we usually omit the return keyword.\n\n-   **Function definitions** store code to be run later, and once defined, the function can be called multiple times with different inputs.\n\n-   **Default arguments** allow flexibility in function calls, providing default values when no input is given, but allowing custom inputs when needed.\n\n### Applying Functions\n\n#### **Objectives**\n\n-   Know how to apply functions in several contexts\n\n-   Develop skills writing **vector functions** and **data frame functions**\n\nNow that we’ve understood the basic structure of functions, let’s apply this knowledge to more practical contexts.\n\n#### **Vector Functions**\n\nVector functions take one or more vectors as arguments and return a vector. Let’s look at an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_vectors <- function(vec1, vec2) {\n  vec1 + vec2\n}\n \n# Example usage:\nv1 <- c(1, 2, 3)\nv2 <- c(4, 5, 6)\n \nsum_vector <- add_vectors(v1, v2)\nsum_vector  # c(5, 7, 9)\n```\n:::\n\n\nIn this example, the function is called **add_vectors** and it takes 2 **arguments**. The return value is the sum of the vectors.\n\nWe call the function and pass in **v1** and **v2**. The result is **c(5, 7, 9)**\n\n#### **A More Complex Example**\n\nIn this example we’ll tackle the following problem:\n\n**Given a vector of peoples birthdates, write a function to compute their age in years.**\n\nWhat steps do we need to create a function?\n\n1.  A function **name**. It should be a **verb** so let’s call it **get_ages**\n\n2.  Define the **arguments**. In this case we will have one argument. It should be a noun so let’s call it **birth_dates**\n\n3.  The **body** of the function. This is the code between the curly brackets that does some work and returns a value. In this case, calculate ages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_ages <- function(birth_dates) {\n# TODO: calculate ages\n}\n```\n:::\n\n\nTry defining and calling this function yourself. Give it a go! Then check the solution.\n\n**HINT:** Load the **lubridate** library so you can use the **now()** and **interval()** functions.\n\n#### **Solution**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nget_ages <- function(birthdates) {\n  birthdates_as_dates <- as.Date(birthdates)\n  todays_date <- now()\n  ages <- interval( birthdates_as_dates, todays_date ) / years(1)\n  return( floor(ages) ) \n}\n \nexample_birthdates <- c(\"2001-02-19\", \"1972-02-18\")\n \n# run, execute, call\nget_ages(example_birthdates) # 23 52\n \n# Note: The body of your function might be slightly different to this solution but might achieve the same thing. There's no one answer in coding! The key thing is to understand how functions work.\n```\n:::\n\n\n**Question:** Think about how you would explain the two variables **example_birthdates** and **birthdates** to another person.\n\n**Solution:** One possible way to explain them is: **example_birthdates** is the value that is passed in to the function **get_ages**. **get_ages** has an argument defined as **birthdates**.\n\nWatch an example below of defining and running a function.\n\n#### **Video: Defining and running an age vector function (7:09)**\n\n[Watch the video here](https://media.ed.ac.uk/media/Function+example+-+creating+an+age+vector/1_yktmpwo1)\n\n#### **Dataframe functions**\n\nOften, we find ourselves copying and pasting multiple **dplyr** verbs. For example, have you ever wanted to **count()** a variable and add a column to show the proportions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# E.G.\n \ndf %>% \n  count(my_var) %>% \n  mutate(prop = n / sum(n))\n```\n:::\n\n\nLet’s take an example. Consider the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://x.com/Diabb6/status/1571635146658402309\n# https://r4ds.hadley.nz/functions#common-use-cases\nlibrary(tidyverse)\n \ncount_prop <- function(df, var, sort = FALSE) {\n  df %>%\n    count({{ var }}, sort = sort) %>%\n    mutate(prop = n / sum(n))\n}\n \n# Call the function\ndiamonds %>% count_prop(clarity)\nmpg %>% count_prop(model)\n```\n:::\n\n\nLet’s break it down:\n\n1.  The function **name** is **count_prop**\n\n2.  The **arguments** are **df**, **var** and **sort**\n\n3.  The **body** of the function pipes the given dataframe into **count** and **mutate** and returns a dataframe (tibble)\n\nWhen we call the function, we pipe in the dataframe (in this case **diamonds** and **mpg**) which will be the value of the **df** argument. **clarity** and **model** are variables that will become the value of **var** and **sort** is not passed into the function so the default value (FALSE) is used in the function body.\n\nBasically, we’ve created our own custom **dplyr** style function. Nice!\n\nDid you spot the weird curly braces around the **var** keyword? This is known as **embracing**. We need these in order to tell **dplyr** to use the **value** of the variable rather than the literal word ‘var’. In this example the values will be **clarity** and **model**. This can be a difficult concept to get your head around. You can read a further explanation here -\\> <https://r4ds.hadley.nz/functions#indirection-and-tidy-evaluation>\n\nCan you think of other situations when you have thought *“I wish there was a dplyr function that did x,y,z”*? If so, try writing one!\n\nMore examples can be found [here](https://r4ds.hadley.nz/functions#common-use-cases)\n\n#### **Video: A closer look at \"embracing\"**\n\n[Watch the video here](https://media.ed.ac.uk/media/A+further+look+at+%22embracing%22/1_oywvhmi7)\n\n#### **A note on style**\n\nThinking of good function names is not easy but it’s worth taking a few minutes to think about it before jumping to a name.\n\n**func1** or **func2** are not good names because:\n\n1.  They are not descriptive of what they do.\n\n2.  They are not verbs.\n\nThere’s little, if any, value in making function (or indeed) variable names as short as possible. Longer and more descriptive is always better.\n\nExamples of better names would be:\n\n**strip_white_space()**\n\n**calculate_mean()**\n\n**plot_histogram()**\n\n**filter_data()**\n\nThese are good examples because they are descriptive and action-oriented, telling you exactly what the function is intended to do.\n\n#### **Key Takeaways**\n\n-   Functions help you organize reusable code.\n\n-   **Vector functions:** Operate on vectors and return vector outputs (e.g., add_vectors()).\n\n-   **Data frame functions:** Combining dplyr functions (like count() and mutate()) into custom functions saves time and reduces redundancy (e.g., count_prop()).\n\n-   **Embracing**: {{ }} is shorthand for **embracing** arguments in tidyverse functions. It allows you to pass column names or expressions as arguments in functions.\n\n-   **Good naming matters:** Use descriptive, action-oriented names for functions to improve code readability and understanding.\n\n-   **Practice makes perfect:** Developing your own functions, especially with clear names and focused tasks, makes your R coding more efficient and scalable.\n\n### Writing Custom Plotting Functions with ggplot2\n\n#### **Objectives**\n\n-   Learn how to encapsulate repetitive plotting tasks into functions.\n\n-   Understand how to pass data and aesthetic mappings into custom **ggplot2** functions.\n\n-   Write flexible functions that allow for optional customisation of plots.\n\n#### **Plotting Functions with ggplot2**\n\nIn **ggplot2**, you often find yourself writing similar code multiple times with only slight variations, such as changing the data or the variables being plotted. This can lead to copying and pasting code, which makes your script harder to manage and debug. Functions to the rescue! Can you see how functions can help you simplify your workflow, reduce errors and make your code easier to maintain?\n\nLet’s look at an example. You can code along with these examples in a new R or markdown file, or use the file you created previously.\n\n#### **A Simple Scatter Plot Function**\n\nLet’s start by writing a function that returns a plot, given a dataset and any two variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the ggplot2 library (or tidyverse)\nlibrary(ggplot2)\n \n# Define a custom plotting function for scatter plots\nscatter_plot <- function(df, x_var, y_var) {\n  df %>% \n    ggplot( aes(x = {{ x_var }}, y = {{ y_var }})) +\n    geom_point() +\n    theme_minimal() +\n    labs(title = paste(\"Scatter plot of\", deparse(substitute(x_var)), \"vs\", deparse(substitute(y_var))))\n}\n \n# Example usage with built-in dataset\ndiamonds %>% scatter_plot(price, carat)\n```\n:::\n\n\n(diamonds is a built-in dataset containing the prices and other attributes of almost 54,000 diamonds).\n\nRemember, the double curly brackets around the **x_var** and **y_var** are to tell R to use the **value** of the variable. In this example the values will be **price** and **carat**.\n\n-   **Function Arguments:**\n\n-   **df**: The dataset to use.\n\n-   **x_var** and **y_var**: The variables to plot on the x and y axes.\n\n-   **ggplot2 Aesthetic Mapping (aes):** We use curly brackets {{ }} to pass the variables to the aes function, allowing us to pass column names directly.\n\n-   **Title Creation:**\n\n-   The **deparse(substitute(x_var))** captures the variable name for the plot title.\n\nTry using this function on another dataset of your choice. [**NOTE**]{.underline}: You’ll have to load in the dataset or use a built-in one!\n\n#### **Customising our plot further**\n\nWe can enhance the function by allowing more customisation, such as the colour of points and the size of the title.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the ggplot2 library (or tidyverse)\nlibrary(ggplot2)\n \nscatter_plot_custom <- function(df, x_var, y_var, colour = \"blue\", title_size = 14) {\n  \n  df %>% \n    ggplot(aes(x = {{ x_var }}, y = {{ y_var }})) +\n    geom_point(colour = colour) +\n    theme_minimal() +\n    labs(title = paste(\"Scatter plot of\", deparse(substitute(x_var)), \"vs\", deparse(substitute(y_var)))) +\n    theme(plot.title = element_text(size = title_size))\n}\n \n# Example usage with custom parameters\nmtcars %>% scatter_plot_custom( wt, mpg, colour = \"darkgrey\", title_size = 16)\n```\n:::\n\n\n-   **Default Arguments:** The **colour** and **title_size** arguments let the user modify the appearance of the plot without changing the core structure.\n\n-   **Default Values:** If the user doesn’t specify a colour or title size, the function uses default values (“blue” for colour and 14 for title size).\n\n#### **A Histogram example**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Attribution: https://r4ds.hadley.nz/functions.html#plot-functions\nhistogram <- function(data, var, binwidth = NULL) {\n  data %>% \n    ggplot(aes(x = {{ var }})) + \n    geom_histogram(binwidth = binwidth)\n}\n \ndiamonds %>% histogram(carat, 0.1)\n```\n:::\n\n\nFurther Examples: <https://r4ds.hadley.nz/functions.html#plot-functions>\n\n#### **Key Takeaways**\n\nBy writing custom plotting functions:\n\n-   You can reuse code, avoid repetitive work, and make your scripts cleaner and more flexible.\n\n-   Plotting functions can be made more customisable by allowing arguments for anything you want to be made more flexible.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}