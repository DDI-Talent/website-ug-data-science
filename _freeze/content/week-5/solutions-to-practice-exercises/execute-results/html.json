{
  "hash": "2eaec026435402d4591301b982c9aa1f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Solutions to practice exercises\"\nformat: html\n---\n\n-   Define a function called **add_two_numbers()** that takes two arguments, adds them together, and returns the result.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    add_two_numbers <- function(num_1, num_2) {\n      num_1 + num_2\n    }\n     \n    sum_3_4 <- add_two_numbers(3, 4)\n    sum_3_4\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 7\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    sum_5_5 <- add_two_numbers(5, 5)\n    sum_5_5\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 10\n    ```\n    \n    \n    :::\n    :::\n\n\n-   Define a function called **square_number()** that takes a single argument and returns its square.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    square_number <- function(num) {\n      num**2\n    }\n     \n    square_3 <- square_number(3)\n    square_3\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 9\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    square_5 <- square_number(5)\n    square_5\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 25\n    ```\n    \n    \n    :::\n    :::\n\n\n-   Define a function called **is_even()** that takes one argument, checks if the number is even or odd, and returns TRUE for even numbers and FALSE for odd numbers. HINT use the modulo operator %%.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    is_even <- function(x) {\n      x %% 2 == 0\n    }\n     \n    even_num_3 <- is_even(3)\n    even_num_3\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] FALSE\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    even_num_4 <- is_even(4)\n    even_num_4\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] TRUE\n    ```\n    \n    \n    :::\n    :::\n\n",
    "supporting": [
      "solutions-to-practice-exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}