{
  "hash": "14c317b33dcb3a9a76d9600696af862c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Topic 3: Getting Started with R\"\nformat: html\n---\n\n## Installing R & RStudio\n\nIn case you don't already have R and RStudio installed, follow the [instructions here](https://posit.co/download/rstudio-desktop/) to get set up. If you already have R and RStudio installed, you can skip this.\n\n## R and RStudio recap\n\nNow that you have access to RStudio you can start using it to experiment with the exercises we cover this week. Throughout the materials, there are chunks of code for you to run. Try copying the code from these chunks directly into RStudio to reproduce the examples and continue your explorations. It is through **experimentation** that we learn most effectively.\n\nAs a quick reminder, the image below shows you where to go to open up a new script in RStudio. Then you can start writing your own code and running it.\n\n![Open a new script in RStudio](images/rstudio-new.png){fig-alt=\"Open a new script in RStudio\" fig-align=\"center\"}\n\n## Getting Help\n\nRStudio has a built-in Help tab. To use the **Help tab**, move your cursor to something in your code and press F1 - this will show you the definition and some examples.\n\nThe Help tab is only really useful if you already know what you are looking for but can't remember how it worked exactly. For finding help on things you have not used before, it is best to **Google it**. R has about 2 million users so someone somewhere will have had the same question or problem.\n\n## Starting with a Blank Canvas\n\nWhen we import data, R remembers the data and stores it in the Environment tab. But this is not *really* where our data lives. For anything important that we want to load in and save, we write the code in our scripts so that we can bring back the data and objects into our environment whenever we want to by rerunning it - reproducibility in action!\n\nIt's good practice to **clear out our environment** frequently, and always before starting new work (a bit like spring cleaning) to make sure there are no old objects we no longer need cluttering up space. If we didn't clear the environment, we might accidentally end up using older data we thought had been updated.\n\nTo clear our environment we **Restart R** and it only takes a second!\n\nTo restart R you can do one of the following:\n\n-   Use the keyboard shortcut **Ctrl**+**Shift**+**F10**\n\n-   Use the dropdown menu `Session -> Restart R`\n\n**--------------**\n\nNote: RStudio has a default option for saving your environment, but that is not best practice anymore. Make sure that you have changed to the following setting (you only need to do this once):\n\n*Go to* `Tools -> Global Options -> General` *and set \"Save .RData on exit\" to* **Never***. This does not mean you can't or shouldn't save your work in .RData/.rda files, but it is best to do it consciously and load exactly what you need to load, rather than letting R always save and load everything for you, as this could also include broken data or objects.*\n\n## Keyboard Shortcuts\n\nHere are some of the main keyboard shortcuts in R you may find useful to begin with:\n\n|  |  |  |\n|------------------------|------------------------|------------------------|\n| **I want to...** | **Windows** | **Mac** |\n|   Restart R Session | Ctrl+Shift+F10 | Cmd+Shift+F10 |\n|   Run current line/selection | Ctrl+Enter | Cmd+Enter |\n|   Run the whole script | Ctrl+Shift+S | Cmd+Shift+S |\n|   Insert %\\>% | Ctrl+Shift+M | Cmd+Shift+M |\n|   Reformat selection | Ctrl+Shift+A | Cmd+Shift+A |\n|   Comment/uncomment (multiple)       lines of code | Ctrl+Shift+C | Cmd+Shift+C |\n|   Open up Help tab on function | F1 | F1  |\n|   Go to the end of the document | Ctrl + End | Cmd + down arrow |\n\n## Projects\n\nRStudio has a great way of helping you to keep all your analysis files together so that R can access them easily. You can do this by creating an RStudio project for each of your data analysis projects. The following video shows you how (switch to full screen to see the video better):\n\n[![RStudio projects](images/rsutdio-projects.png){fig-alt=\"RStudio projects video\"}](https://cdnapisec.kaltura.com/html5/html5lib/v2.101/mwEmbedFrame.php/p/2010292/uiconf_id/32599141/entry_id/0_06t7jmhd?wid=_2010292&iframeembed=true&playerId=kaltura_player&entry_id=0_06t7jmhd&flashvars%5BstreamerType%5D=auto&flashvars%5BlocalizationCode%5D=en&flashvars%5BsideBarContainer.plugin%5D=true&flashvars%5BsideBarContainer.position%5D=left&flashvars%5BsideBarContainer.clickToClose%5D=true&flashvars%5Bchapters.plugin%5D=true&flashvars%5Bchapters.layout%5D=vertical&flashvars%5Bchapters.thumbnailRotator%5D=false&flashvars%5BstreamSelector.plugin%5D=true&flashvars%5BEmbedPlayer.SpinnerTarget%5D=videoHolder&flashvars%5BdualScreen.plugin%5D=true&flashvars%5BKaltura.addCrossoriginToIframe%5D=true&&wid=1_ri2n5ueg)\n\n## How does R work?\n\nWhen using R, you will predominantly be working with your own data which you must first load in before you can start exploring it, and we'll be covering how to do this in-depth in the next topic. But to begin with, let's see how R works.\n\nNow that you have RStudio up and running, try copying the code from above these boxes and running them yourself in a new script.\n\nCan you remember what the `#` symbol does?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R is like a calculator\n7 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\nThe `#` symbol allows us to add comments by letting R know not to run this line of text as R code.\n\nWhat if we want to save the value of this calculation to refer to at a later date?\n\n### Assignment Operators\n\nTo save our value, we have to create an object, a, and then assign the value to the object using the `=` sign or alternatively, you could use these `<-` symbol. They are both called assignment operators. In R there are often multiple ways of doing the same thing as you will continue to discover, and which you choose often depends on personal preference.\n\nMy preference is for the `<-` because (a) it shows the direction of assignment (right to left) and (b) is distinct from `=` which can also be used within functions for specific arguments. But both work!\n\nTry adding and running the following code in your script. Why do you think we have to type `a` again on its own underneath?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # assign the results of our calculation to an object \"a\"\n  a <- 7 + 3 \n  # print out the result\n  a \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\nIt's always worth remembering that in R:\n\n-   if you **save** an object, then the value **does not get printed** (displayed on the screen)\n\n-   if you **print** an object, then the value **does not get saved**\n\nIn our example above, the equals `<-` sign tells R to give the object on the left of the sign the value of whatever is on the right of the sign, and the value gets saved. Underneath, where only `a` is typed, we are also printing it so that you can see the result. In this code chunk, we are both saving and printing.\n\nBut in our first example, there was no `<-` sign so we were only printing the value, not saving it too.\n\n*Note: When working in RStudio, when you save a value to an object it will appear in the `Environment tab`. If you haven't given your values or data a name using an assignment operator, it won't appear in the `Environment tab`.*\n\n### A Quick Aside on Names in R...\n\nYou can name objects in R anything that you like... well almost anything. There are a few rules about names in R:\n\n-   No spaces - spaces *inside* a name are not allowed (the spaces around the `<-` don’t matter):\n\n-   `lucky_number <- 5` ✔ `lucky number <- 5` ❌\n\n-   Names must start with a letter:\n\n-   lucky_number \\<- 5`✔`1lucky_number \\<- 5\\` ❌\n\n-   Case sensitive:\n\n-   `lucky_number` is different from `Lucky_Number`\n\n-   Reserved words - there is a set of words you can’t use as names, including: `if, else, for, in, TRUE, FALSE, NULL, NA, NaN, function` (Don’t worry about remembering these, R will tell you if you make the mistake of trying to name a variable after one of these).\n\nFor more information on naming objects in R, check out [this blog post](https://www.r-bloggers.com/2013/12/rules-for-naming-objects-in-r/).\n\n### Arithmetic Operators\n\nLet's go one step further and save each of the values in our previous calculation ( 7 + 3 ) as objects too.\n\nIn the code chunk below you will see that we've added some more calculations. These include the most basic arithmetic operators we'll be using and as you can see, R uses standard symbols.\n\nWhy might we want to save each of our values as objects first?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign the values \"7\" and \"3\" to objects \"b\" and \"c\"\nb <- 7\nc <- 3\n\n# arithmetic operators\nadd_opr       <- b + c\nsubtract_opr  <- b - c\nmultiply_opr  <- b * c\ndivide_opr    <- b / c\n\n# print out the results\nadd_opr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nsubtract_opr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmultiply_opr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n\n```{.r .cell-code}\ndivide_opr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.333333\n```\n\n\n:::\n:::\n\n\nSaving our values as objects allows us to carry out various calculations using one set of saved values. If we want to change the value of `b` or `c`, we can do so without having to change the values in all subsequent calculations too.\n\nWhy not try it just now? Change the value of b to 9 ( b \\<- 9 ) and rerun the chunk to see your updated results.\n\nRemember, the name on the left of the `<-` is the object name. Now change the name of one of the objects, but make sure you also change the name in the code for printing the results too.\n\nAll of R is just an extension of these types of processes: applying more complex functions (calculations) across more complex objects.\n\nIt's important to appreciate that objects can be more than just single numbers. They can be entire spreadsheets, which in R tidyverse are known as tibbles. These are the types of objects you will predominantly be working with when analysing healthcare data.\n\nYou can find further examples of the [arithmetic/mathematical operators](#0) in R via the introverse package documention.\n\n### Relational or Comparison Operators\n\nAs well as performing calculations with arithmetic operators, you can also *ask* R things, such as is \"2 greater than 10?\". In such cases, as you are asking R a questions, the output returned (or answer) is **TRUE** or **FALSE**. Another set of operators you will use frequently in R are relational operators, which are great for **comparing values** and for creating subgroups in your data or excluding outliers.\n\n*Note: You can find a full list of the operators we use on the [HealthyR Quick-start cheatsheet](https://www.dropbox.com/s/6vsgy5o3d6z1h5k/healthyr_quickstart_sheet.pdf?dl=0), also listed in [Further Resources](/content/week-1/further-resources)) for this week.*\n\nThese operators allow us to ask questions about our data. For example, are values in a column greater than, less than or equal to a reference value?\n\nThe symbols used by different programs and languages for logical operators vary more widely than for arithmetic operators, let's see what R uses, examples are shown in the following code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign values to \"x\" and \"y\"\nx <- 3\ny <- 7\n\n# Greater than\n2 > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Less than\nx < y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Equal to\nx == y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Not equal to\nx != y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Greater than or equal to\nx >= 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Less than or equal to\n4 <= x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nThe `==` is very easily and commonly confused with the `=`. If you get an error when trying to compare values to see if they are equal, there is a good chance you have forgotten to put in the extra `=`.\n\nPrinting out a TRUE or FALSE value might seem a bit obscure, but these relational or comparison operators are really useful for **filtering** data and we'll use them frequently throughout this course.\n\n### Logical Operators\n\nA final set of operators that you will find useful when working with data in R is the logical set of operators. These work in a very similar way to the relational operators: R **compares values** and returns TRUE or FALSE as the output. You can think of logical operators are asking R to compare 2 or more things. \n\nYou can find further examples of the [logical operators in R](https://sjspielman.github.io/introverse/introverse_docs/operators_logical.html) via the introverse package documentation.\n\nLet's see how this works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # assign multiple values to the object \"year\" \n  year <- c(2000, 2001, 2002, 2003, 2004)\n \n  # check \"year\" values to see if they are equal to 2000 OR 2001 \n  year == 2000 | year == 2001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n  # | for \"OR\"\n  year_subset1 <- year == 2000 | year == 2001\n  year_subset1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n  # & for \"AND\" \n  year_subset2 <- year > 2001 & year < 2003\n  year_subset2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n  # ! for \"NOT\" \n  year_subset3 <- !year == 2002\n  year_subset3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n### Data Types\n\nLike many other types of analysis, database, or spreadsheet software, R needs to know what the variable type (or data type) of each column is. The types we'll be using most frequently are **characters**, **factors**, and **numbers**.\n\n#### Characters\n\nCharacters (sometimes referred to as **strings** or **character strings**) in R are letters, words, or even whole sentences (an example of this might be free text comments). We can convert objects or values to character data type using the function `as.character()`. Characters are displayed in-between `\"\"` (or `''`).\n\n#### Factors\n\nFactors can be thought of as slightly fussy characters. They're fussy because they have something called **levels**. Levels are all the unique values this variable could take e.g. if we have a column with data on sex, there might be two levels, \"Male\" and \"Female\" or there might be three levels if there was an option to specify \"Other\" too. Using factors rather than just characters can be useful because:\n\n-   The values that factor levels can take is fixed. For example, if the predefined levels of your column called `sex` are \"Male\" and \"Female\" and you try to add a new patient where sex is just called \"F\" `sex` was stored as a character data type rather than a factor, R would have no problem with this and you would end up with \"Male\", \"Female\", and \"F\" in your column.\n\n-   Levels have an order. By default, R sorts things alphabetically, but if you want to use a non-alphabetical order, e.g. if we had a `body_weight` variable where we want the levels to be ordered - \"underweight\" - \"normal weight\" - \"overweight\" - we need to make `body_weight` into a factor. Making a character column into a factor enables us to define and change the order of the levels.\n\nThese are huge benefits, especially as a lot of medical data analyses include the comparison of different risks to a reference level.\n\n#### Numbers\n\nIn R, we specify numbers using the `as.numeric()` function. Sometimes numerics are further differentiated based on whether they have decimal places or not. **Integer** stands for a number without decimal places, whereas **double** would have decimal places.\n\n#### Date\n\nDates can be confusing, they can appear in many **different formats**, and in R they can look very similar to the character data type because they too are displayed between inverted commas ( `\"\"` ). Once we let R know that our variable is a date however, it can do some clever things as we'll discover later.\n\nYou can find out more about how R reads in dates and also more examples on all these other data types by going to [Chapter 2.2](#0) in **R for health data analysis**.\n\n## Practice Time!\n\n1.  In your RStudio, open a new script and do the following:\n\n-   Create 2 new variables, `x`, `y`, with values 3, 10.\n-   Carry out a calculation using these variables (e.g. `x+y`).\n-   Save the value to an object called `calc`.\n-   Print out the value of the variable to view the output.\n\n2.  In the same script, create a new variable called `z` and assign it the value of 5. Then create a new variable called `calc2` and assign it the value of `calc + z`. Print out the value of `calc2` to view the output.\n\n3.  Create a new variable called `calc3` and assign it the value of `calc2 - calc`. Print out the value of `calc3` to view the output.\n\n4.  Create a new variable called `calc4` and assign it the value of `calc3 * calc2`. Print out the value of `calc4` to view the output.\n",
    "supporting": [
      "topic-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}