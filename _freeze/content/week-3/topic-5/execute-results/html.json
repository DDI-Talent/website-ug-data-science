{
  "hash": "b5d105365b593dca522efda369891d3b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Going Further with R Markdown\"\nformat: html\n---\n\nYou need certain R **packages for using R Markdown** and also for carrying out this tutorial. The following instructions will help to get you set up and ready to go.\n\n## **Install packages**\n\nOpen RStudio and **copy-paste** the lines below into the console and press **Enter**:\n\n![](images/clipboard-3377886658.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarkdown_practice <-        \n  c(\"rmarkdown\", \n    \"tinytex\", \n    \"tidyverse\", \n    \"knitr\", \n    \"remotes\", \n    \"gapminder\", \n    \"shiny\", \n    \"flexdashboard\", \n    \"here\") \n\ninstall.packages(markdown_practice)\n```\n:::\n\n\n*Note: The steps above might take a wee while to run, so don't worry if it looks like it has momentarily stopped, just give it a minute.*\n\nIf you are asked whether you would like to **restart R prior to installing**, click on **Yes**. (If it immediately asks again, press **No**.)\n\nIf a message pops up saying you can ignore warning messages, click on **OK**.\n\nOnce all packages have been installed, **restart R** again.\n\n## **Install Tex**\n\nThen **run** the following line by copy-pasting into the console and **Enter**:\n\n`tinytex::install_tinytex()`\n\nIf you are asked whether you would like to **restart R prior to installing**, click on **Yes**. (If it immediately asks again, press **No**).\n\nWhat's going on here? We've installed the package called tinytex , but we also needed to run its function install_tinytex() to install Tex on your computer. So the tinytex package helps us install Tex, which is required in order to produce PDF outputs.\n\n*Note: Don't worry if you have difficulties with the tinytex line or are getting error messages, this is common. You will still be able to produce outputs in the other formats and can have a go at troubleshooting later. [Click here](https://github.com/SurgicalInformatics/healthyr_notebooks_materials#troubleshooting)* *for a link to some troubleshooting suggestions.*\n\nOnce this has run, you might see a message to reopen the R session and check if tinytex:::is_tinytex() is TRUE. Run this bit of code in the Console to check and hopefully it will return TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntinytex:::is_tinytex()\n```\n:::\n\n\n*Note: Notice the triple colon, this is because it's an internal variable name.*\n\nHooray! You have installed all the relevant packages.\n\n## **Download R Markdown Document into an RStudio Project**\n\nFirst, create a new project in RStudio, e.g., you can call it rmd_practice.\n\nThen download the R Markdown file by right clicking on the link below and choosing, **Save Link As**, navigate to your newly created project folder, and save as working_document.Rmd\n\nYou can also right-click the button and choose “Save Link As...” to download.\n\n[⬇ Download working_document.Rmd (ZIP)](https://raw.githubusercontent.com/DDI-Students/data-science-for-health-bms-24-25/main/week_3/topic-5/working_document.zip){.btn .btn-primary}\n\nIn RStudio, navigate to your newly created project folder and click to open your newly saved R Markdown document, working_document.Rmd (you can use the ... in the Files tab to browse for your folder).\n\nOpen it and you are ready to go!\n\n## **Knitting to 3 Different Formats**\n\nWe can Knit working_document.Rmd into HTML, PDF, and Word documents, either using Control+Shift+K to Knit the whole Rmd (RMarkdown) document, or the Knit button which has the following options:\n\n![](./images/W6.2.1.png){width=\"574\"}\n\nYou can set the output format of working_document.Rmd back to an html document by either:\n\na)  Pressing on the small arrow next to the Knit button and selecting \"Knit to HTML\" again (this moves html_document to the top of output:)\n\nor\n\nb)  Editing the YAML header and moving html_document to the top:\n\n![](./images/W6.2.2.png){width=\"569\"}\n\n## **Adding Automated Section Numbering to your Document**\n\nFirst, open the Document Options by clicking on the little cog symbol and selecting Output Options... :\n\n![](./images/W6.2%203.png){width=\"579\"}\n\nThen tick \"Number section headings\" for the \"Output Format\" options that it is available for (HTML, PDF):\n\n![](./images/W6.2%204.png){width=\"570\"}\n\n## **Opening the Markdown Quick Reference**\n\n![](./images/markdown_quick_reference.png){width=\"563\"}\n\nOr look at the **R Markdown :: Cheat Sheet** (Help -\\> Cheatsheets) for basic Markdown syntax and their effects.\n\n## **Inserting New Code Chunks**\n\nInsert a new R code chunk and print a short table in there:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata %>% \n    slice(1:6)\n```\n:::\n\n\n![](./images/insert_chunk.png)\n\nEmbrace the three ticks and letter r ( ```` ```{r} ```` ), and investigate the three tiny buttons(chunk cog, run all above, run chunk) top-right of the chunk:\n\n![](./images/new_chunk.png)\n\nIt's worth noting that copying and then editing an existing code chunk (with all its back ticks) works really well too.\n\n## **Outputting Tables**\n\nAfter knitting our document, you will see that the formatting of our new table is not as nice as the first table in the document. The new table looks like something R would usually print in the console.\n\nTo fix this add %\\>% knitr::kable() , which gives consistently better formatting no matter what your output format is. kable() comes from library(knitr) .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata %>%\n     slice(1:6) %>%\n     knitr::kable()\n```\n:::\n\n\nIn general, it is good practice to rename variables from your dataset to be readable to an audience who may not be familiar with your data and what the variables are called.\n\nTo rename the columns from what the variable names in the dataset, we can use the col.names = argument, as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata %>%\n     slice(1:6) %>%\n     knitr::kable(col.names = c(\"Country\",\n                      \"Continent\",\n                      \"Year\",\n                      \"Life Expectancy\",\n                      \"Population\",\n                      \"GPD per Capita\",\n                      \"Population (millions\"))\n```\n:::\n\n\n## **Inline R Code**\n\nWe can also include R code inside Markdown sentences using a single back tick \\` instead of three \\`\\`\\` :\n\n![](./images/inline_r.png)\n\n## **Current Time**\n\nIt can be very useful to include the current time or date in your Markdown document.\n\nLook at the top of your working document - the part called YAML. Replace the currently hard-coded date with with:\n\ninsert r chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"`r Sys.time()`\"\n```\n:::\n\n\nKnit your document (Ctrl+Shift+K) and see what changed.\n\nBonus: To change the format of this date/time, wrap Sys.time() inside format() , e.g., format('%H:%M %d-%b-%Y'). Because you're already using double quotes in the date, you'll have to use single quotes inside the format() function. So it ends up like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n \"`r format(Sys.time(), '%b-%Y')`\"\n```\n:::\n\n\nNote the difference between the back ticks (\\`) and single ticks (').\n\nDate-time formatting options:\n\n|              |                     |                  |\n|:------------:|:-------------------:|:----------------:|\n| **Notation** |     **Meaning**     |   **Example**    |\n|      %d      |    day as number    |      01-31       |\n|      %A      |       weekday       |  Monday-Sunday   |\n|      %a      | abbreviated weekday |     Mon-Sun      |\n|      %m      |        month        | January-December |\n|      %b      |  abbreviated month  |     Jan-Dec      |\n|      %Y      |    4-digit year     |       2021       |\n|      %y      |    2-digit year     |        21        |\n\n(%H and %M are hour and minute, respectively)\n\n## **Chunk Options**\n\n#### **Hide messages or warnings**\n\nClick on the \"chunk cog\" to hide messages:\n\n![](./images/W6.2%207.png)\n\nAfter you click on the **Show messages** button, message = FALSE appears as a chunk option. You could also type/copy this into other chunks instead of clicking on the cog. Similarly, to hide warnings for a specific chunk, use the same cog or add warning = FALSE .\n\n#### **Figure Size**\n\nGo to the Chunk where we create the plot. Open the chunk cog (same as in the section above) and click on \"Use custom figure size\". Change the width and height of the plot to, for example, 5x7.\n\n#### **Setting options for all chunks at once**\n\nWe can set default options for all our chunks by editing the knitr::opts_chunk\\$set(echo = TRUE) at the top of the document.\n\n![](./images/W6.2%208.png)\n\n## **Creating a new R Markdown Document**\n\n![](./images/new_markdown.png)\n\nThen Save it and give the file a name.\n\nWhen starting a new project, the fastest way to get going is to start with a pre-filled .Rmd document like this, which already has many of the elements you need ready to go. I then usually delete everything below the set-up chunk header and start adding content by copying chunks I've done previously (or from scripts) in there.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}