<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"8dde9fc9d6693309b2c23122fafe86069b462b3a674bb8080323b1e38356a7eefba57a37b863ca92b3405c274bf06de2fcc6940c51b65e7022c5436e25c8b014fbc1724e29cdde1da48716517eb5c194ef59683ad9b53bda3de2ced0288a3370a8d99c22b1f1b3b5210fa20e7bd45ea24d6b538e78304e5de7ea706443c09ddf4a35e00e132576fefe44d86ec4412a19435fd8c53fa91a2827e10de2d2786215ec1f4fc852c9a7dc016478ad1b25c569bd3555df1e8486cde998d02df7580aa2637707aa71ac60fbd741f42655e4d6efff33dfbe84878f787bfef6d1cbbe9bc47ff2084448f24f3c32dc104d8656b7bf1eef96ce8cd1a7d7d6f2969a4e999899d3b757e3e49b29fc184e188abcf1ee6fcf9368d6e0f52645a893fba3685d31c53eddf77ac925a7ca22189eeab62f367d7fc0ed8c7894c955acb966b34f6be148e5ac50e0ec6b3427cdfa9092479c2fb487688002d54a1177f2aea738bbc972fc5141c1a96c4f9f95cc3f76475a930055fc6dfb9624161f8f081ba80e986341de36598315c972f3c89c379508fb230e794eca2e9f2aeffef7164c3264ce8f1955363d5ff868214ea1f6d8993d02b7cdaf6b639f967f545252edea9d254ed2b1aa459436354956696c6e05f79407a5c7d21421d61e91e674bc674253e762bb0de808e4b9a52d24025c00db12432a7464457a6be7deefe5c68ff3862718a0624f5c02cb07a0713b8a92f2d45ec41fd98b94fbe7bf2e8f2f8ee29a690266207b592e3636563b0f0dba2f38f78f6dfb8217e2794c5e5c656097fdf41646b162c31e1d2e38a88ff108a01dc5b28dc4b84116fc3a82d1eecbef80b14f1c3865bcfa50b42249a276150cb928b674aa80e2f45f7b42f0f7474bd86a8154fc0d5baa0ed31c35550875c50f078af48afd90dae6677145d00d54e85fbe2a3a446d26ca8e5074b757e111681cd714d1f3066f7bb538d368748e446aac91d1caa16dcf67edd62fd68c625962ca1947554a6df21b7094d9db3abf4d3c849baef0351b1b0eb2c3ae6491b17f9f91176fcac4b970854820fa9e11a7ce048551a4600294b8f441b748e88528b5f3358b56d2859567568f91733ae57c2510ddd36e9d8ab6d0e6553f414a7d8075cdcdcb68da3cbe292b35625ca790c0c1f71b83602d2b9060474e7442c85ecb0768788ce39d7c5e60599593037581a5c71f914a45a068a3d42d187c63b373fb290f996df4bda335ea11a71d79e529dab7d852fbce17710f678f15a52997fca4a3d25d634f976c30edc7393fafe994b1583c10cf264dacc3995c3fd8c2cb3921fe00fd275a9e946238a429d08065edbdca9cef261a3dbf07fa4036f14c949bf24ac250c27392140e167e2a96bc4297ee9a2684325d4fa483c4a110c5181b4f854050918e340cbba436c5fe9329c575eb4cd4af2f9bcb7b57ae85f90ea999955af06cf66466789c537568ae04225d79ce4eb108f346f57251fc69edbe6fec2b2514e27d216263125132ec61ac04f3456c55073b14439bce86afdd9b45db6dba02a437c0068707abccc4482a5ea177d3fbfcbe8c4a7b34fe71ecebaf564e56432f713dcb780a8f147fa031cb124cf309153b350b89505cb2a61f41932517cd118d9645f33d88db2a7830647138445df37848d154480faf8ee5ea807c12feb52eb20f45712221698c82df76c85491b27f842fd52a757fc0f4017253dac0a5669ae211764bbd8138e2cff3ad7c31d7140fbb08ad91d62c5da88eb933ad79e3f45106a07cb6f2ec87d77ddef4c12428f92dfd7f2dd81498b4b5d424036d4e2136a39f112ae084811312aecb2b934ce1914f18ed201834777c7885a9f792b543a6ffb5f5cdbbccee3e1d8ccb06c560758aae6869a2e53f0deb27604913cbcc98411e4ef2ad8a23758c4b604aec292f0a50355545ea40363b116464526a3a56e9ca1681571deca038b8b155ef176501b6d20c2195dab5080431fbe3d2fcfba50a6c9b4676d87156a5d2235458db2e8f1ade172068099b1c624daad7cada13f5fecda50febfe7a8822b17f5e1a43bdca115d06b26c564bd7413b525f03a8dbe3dc7093dfa1935f6c0181e0e5a99ef2b2a5a4fdbe799fc487b12c9605ff863542d0e4f7eb5b31b746624fd926fc93ccf38539fde45eb7f3083d9346d06c3adfeb7294726f55735c004219a3c233a5864e97d719e3d2ea7d4ed060405e011bc66b63573e844b76492bc00537e92e8b9c8246f9e2051c787b2d2c1913f6369994ade211d61ebbf41941a96b93074f47e4f524afc650b4843467a3b96aa8a04fb596d31605bd6d0d98857e8cc4e98f76a772087fe3b982245a2a5e2f811ca9223d00441309c3b834f560c90c7be5e7e1533171ea8e45a936a2f31dd89528d3a2f39f42ee52a4c042e1476a72c317462833d230f1e68303bd0ba745a446bd3fba590f9a2b373f2ac6ea1bd5ba1ff7cc14a5de28409cf93646ffbe075777f4a44e5961198c607c2280f4fb6f1346bf591f32339c646d7228633cfc0f3fc9d09bb36bcd5489cc402b3ed25db35dd34e528f207bf3873057b7f1382dcf27c157657015b5a70a12a214a9ef3d3370d2b4dfc4d9551d8abfdf6590cb93f93384d54d2b97d898bfec0c8a099868c2010b53f4f28cdd4dd9fa6c5f7a6a86ebf0c6649bd3b4f1d1edbb0b4e2a33e4dfe160c636179c9d167ff8219e333881ad0afbe46728798e4a0553252c450cfc508345db3e87fa463d38728480faafd538c215a3ecf6136463fe44db1e4b7ceb482001d10a96ea91bc370377813ce453ea6c3b15c77148c6e658c1d8e7558651ced4ddf81a5939e7616bc208273e8339556b5d65d88ab3dedf02c6819d8528f9e9a4e18066ce6d7ac6abe9742d763e4e0032d54737973f1a76c00c4d5b608415028794a531389168e0a35120c960e4a088d0c7449897bd8930968e85566e1520778123f39751e07f540dcb13cc46f7924947d64cc6681f116e3cffde7f0bf02f2ad83bcd923e219b72ddf0e30f933188a57b90af2888b6c63c3e0e52b7ec62e93b693a01d2dfe854531140dca06b3f64480f3fa85a7a30005f96b5334586f9efa8c960821907dacd566abe2980f744846db46de63e20178918334f59ffb840b0faa3228d645876f6c8c6f5a3a3d0efc98523c2c44bc306eb9f83a858e48339ed5bffa12e3ea662fb84ee5ec1f8088c068d4ddf0e5159d1df8cab887e4a755bd8be99ca25af7dce9ea8af105669928e98e500a06746f37cfae756e2cb3eaa68aea47bd280730c9027c92f69d2635ae14359038311de7c6ffe5f26a0101679f9c8bcc069530969584e891968dc5945bbf63adfcdbfd56f770266dde951d341bcb510ddf82bcfe5dc80b9c01c6a996225fe94a76285442305d2e3f993413cf79518b6733a55ae1b41459da4b398a3bc8ce5940fdcd6545512420a567f3d6a3a337d7d488ddaebd2e72bcff4ed3e226061aeaba09ac98df8eabf9ecfb617fd54ca15a360a2347eb5c1de7b32ab3e7e059b6c47f78acce9e720c43f2eb0baf74d71447cdae84f75d873bef6b756b271628e5fdc2355b1b5a8139c429f0584edfa4f9c1bf4b583972f28b6abdc2740b4014d483736a7e74afff83265f3e8e6ab9c2fb89d63168ddca7fbd22607be8d349d37c7c62335e0d42a80e3ed6689a9d836d038c819d1a11ae15e0110249aa0dade4598ab6c93b8a4d935365a5ab11e385f884f1ff180ca1506a7b16319a8b5165f6fb4977f69cf32f8ac4213bd35a72a1e9a5cbf1630728a9fc66cf0a2d2cab35bdcb24b59a2be6f3cdbd2320069cb11d177dd47e689d70d9cc55ead14e99efeae69914db82a6f861b88e115ad7509b84233e146bcb40028715745011431378db6a63d88431b6bddec98717e71ac7aa8264a67006cc04ff6874dd9ece3288060e3feac325757eecfebc11f799b33077702eb0373c574aedd983d48ab4329833aeed3518e5c6664e92c652fcc1edc42351204c331810b08ac02ab4ea38388e4faa3025274903534e068e646aa24878a0b799d9abc51a6c224917f1148f8bdae8e3021e4c558caf4a7e0804aa971df72f07791e163834471e98ebbc79fccdc14668191e2e34f505d1a87c93a66c59f38162f92fb3d990ab939b3f974100ff0323f77e88a053f035a6cf5539a58dd855b9b6f35b93a9937216ba971f241fa0dbf394ed41fb55751345f0cef8e8af23a1ab9c230f2ddaba98ba02af9e39c5cbf234918cbf5fd53b9fb6e033fd0f4f18ba302fcebbd0dbcfb76e3b2c74bb6afe5cf25192b48f8123147c967017a36f010d2ad9d7be9c72515072ebcbff718ef61f9229f5ba471235ecbc7b1e2a18f67f16f778754be5f54f17710e422e478ec142bab0e9aeef35c86a8a9a6080da1f60ffa11a22c3b1cbe1fa2c915e2a837b6196c851ed80696a0696f19eaf3da910123f399b6d176f96e1dced946f6c6e0dac42109a13c236fc3716b607483b2f4596bb08e0e41af0569a01255d3ad4dc8d7d385434962502958cb201b066e3bea63368a1cf99946434fed074b64b2e05124fa63fde5a7eb8857274acf11be4febc7f09b95a4470a474120574e691e13b59e021382b401eb3a0749ba3bf083f7c6abb003b9a20265132072ddcd24b9650b1754d55ef2c581b0e22c690b384803fc92f598929c33b21c3bd2f68cd16f5be5ab821062e1e7c0fc576173bf259c1ca55c40de2d33b527bd548e755452faf92603906091f2b0280b3ba53f18d55a9eceff5a9197122704e27457c2ce3074a7e700acbd5372143c50ae15ebe79379b065c0d1dbf6c2a94e2efb86c328cf9824ed967ebac02c5ccb3e3dbca67f8b12e5fb5bc241cbabb1d517ddd272e49bf1ebfd64e2d62236bfc568d7c8c65aa97edcc2a78d943f24c41e79d1c10f535a1366c2995ad2564ceca1b8d3a2685ad960caf581a98715af459330fc7b1a33552e0d2af2fcf46c476d0ffc8779d7b9602b5271f012384b62c0ac68d92626147a95a0c785ed01df44c5f86bc70979dd9fee32b07bc2bd858c829f315202aa8f7e8da68c18225c3a1f09476a79859cf82a035c87b6347bb4ec60c8ce8ad8a4c2645598f468ef9a68a23f225e64044525b9e8fe9848459ca39cf4af440dd526587d0809e46dd09b26050f3c1b7e02de194ccee473665bf0748d5a6eadd242ca907c9eb0801ecdcfaeb92b0fb04cc59a6e831cbcb13f58247a41d551b92e5a5d1d7b98e3044eab1106eae9a29e9eb37bf8354c4e07f52116688d0783d190ad975701fdb945d5f2409a5abbfb0132254812b24970b1efe4ca4d143d899fda7c8aab4d923bc4551a9ab40e0fcdfbfd5a307f56b480a4875186c07fd66ac81e51cc149fc92babc8db52ad9dcfe04374ddb224138296f83770815fe8b2989886f2aa7160f8dca73e609c62ddbe686f504504db3c88039617e49f0b38d48eade8283a34fa53eb75c5ccb66474b002f8e28eb563ebff95b52daf763a5c70d1e61efdba8655502272552252b140d03f289d1a5c104d8c730e582a504f2be85215d690ca60d0f344901574807e17366af0962553a373e0a8c50638d96d4b757b633a301fb0092e9cb0f76d5dc7bcd5517abac468f3eff432b346c30585023d418cfeaa4b25713a2c57043a44014397dc42bc411d2ea841bacca39c307afbdbfc28c72c41e05f0bf4f85035f9ee41e851f1671c7541089f9d49a0baaffb471f1f9857568597ebc2218ddd6293ab8f06a4791652fa9a5567cb324c44f0376b21a095cea5dd556ef4897bf9234012fcec05c206d40266ff85851bafbdb250da98051253a0890298343b9d6ddb2931be7538a7d591392bd0b29d929ea4e96f0c7f11bfb11ac7963905d236cd71586dccd38ddae952c4f06c44b3efb170298c0510e950177ae08cdf989e510b4c2879da4543a416a1c83ee21b2149230a51583ed28ff6c0392921ec759c4d9742202592927dc96f1151dea7bf13199bff7e81f9256d0c363d245ee8be58dac41cfe17e840b91b467cdda21cddf31cac7aa2b5e1ba69d7001ca77066c1781ead89087c0371244ec6dd308faa4db9411c68debdf5cc5d8535b2daf980657fad9a46fdb21c8312d60fe690d13246385f8d15e2adb3ebad1b4a4c2e1e309309e0a51626c66fcc0dff69c03bee85bb91b98465f38e1e0d85c2f8f11495839336e329053aa676096173323e8994255f9a5afe394f614bb90e37ef84e6e24b0867208c3684900c32b61e6e0af2fef28618612cba75c7142a66c2fc134c61e1be480f50b700946b32ed4857bac2b474c263facfc204c8b7c8960d2cfdc9e4854c54c86b4c89996fffdf562e7625c8e62b14d8f0585a34aa36f923ac7ef7455440dbdd92de46784d512e4d3cd9a5379f9254589ef3da4f593bdceac014129e428a278f161b1fa753a29fcef41f0ad5baaed85daffbe02fae83122b12af92a817792383699a3a202dd515dffa963bd433499a6c6b4a970f588dc6575d7088bebad50f208df55e39a1adf82c62fa44210bea8f7e6cfb32fea83e2d4827fa4c28a2f247d09b31d3737abb9769b8da835067d205a9659654e16ca1318ba51863aaebfeb5afa2b4f0460cbcc9d01c8a6dc4a139119bc8ecda17ec04b8e53942a710e607acf09acd7b6b4b3677f07cab127ae0fa2e33cfe113049131d9a2a3abd1adeaf3f11fd4d8cbd9c13c391f809e2bdb251bf5268955c7fe25dedc150f82dc1031aee078f12674cf64279c6e532a9d93e62feed4ac72626d9a5c71c4b279d2838615fdcc4c19be844c31a09a68e666131e9addf17754b856ce2fbe8efd1a59714251f63f9166abe4425a49383b38498961f293c9da8d530a64c21389f9f95030ce8bfbde8402921d56eb84ac13291d4f2b8436c1d43bbd33b50bfb909fc41110ebfe0134d532a517744c52ca75e01ecb8f6a1bda68cba3b8c260e356adee932665eceaba84d402657ee62cddcfde3781f13c08daf709a83ad566dfbd38329e6d1770745df43238b9672fe3a68c2980a384f3566cb136daa133623262d30aa8a9ca7caf12c2bb0176d5f9f30e8eb49dfa76e5a32fb906e442784af76db72899428eabff3245a7cfb1692223673234679afee377622687fdb3d4f5ac2ee3fb94ee84e0f98b5f842ad21b073adc1cb2bb7bab91cb4d78ba48fea603d7cd06a511ae65a8bce81eee617f4795e295d92aa4051a4dbcb859d8c9176945cc786368273a6f4354d28877e9ea59896c6e4c99448c63942c5704cf2bbdea2907d3621efe478f9bc4c01c820e81ed5f6e81ff473a010f7ba610a4ac229bbc785dfe04622e752d2593432491c01cfe1cb86f141e05f855431a940064ec6b2bdf4cb484f0f7742069b9f8ddebfda9dcae68be4799c4c9e3f22e50186b4b6c326536095ee50e8028ceec89f157ec4fc04500d011c932efd75b3784171d2fcf8e86267a59eb9163ea53ccaa25308146297e05ddf7ae1d0eb49ba5198b19f5525ebf5e4def7a6e1df1aa3064ed04f3cd25e04fc29c2ab5a311bf1e872f9e735236ac054ff5cb9be9eb5e57c4a3c485a00b76860abc96878c08c47c9334650c0aac905649ddfee5f7c1ec2cfa451ef2b3381cb300bf7b7de517a506f8f2acfec3338c4644cb27acd99f764892698637b59d290b87c67c5977e0604ca0a8dbe963bffc37f08261f87ff41988cb1b6c43a2bf30fae4c9434efef1e10f34104bbffaf9b510650b8dba75776e78797fee3a368ba54f1e21a906fda107f84a7b349c913822f6913a32d799c32b2fb68a3ac33abe81ba81f71a669adb469ad50e53726aa08f4249055ce597e56108183ab3d7236077e6127c0df00966a4151b26734fc40a47c05ce8664298de2697545fd649fe43c31e76a306f1b331fdb669f453d8934d4d1a559f2bac30a8103c5a542b018b5a7637fa3c1a4daea02734d97406d2bb38cae909981d378ead28abfcd8fd0d6a6478f92fb353db4c7ca016c9dfeff482ebd7c6109f85b9f17060a4c4fb0d1fca8757f4cc155eae2d06f6f0f08bf1d1bf46cb9ab0c3f2060188dcb35f1cac0fe062ed17897b01483da6fb9afc1f08e12eac206639a5210fd2187d8ffb11ae3e8aaf4922d84a25074660b3b01a40a5c0ad53b4a270d5b5989fd697955d6d5cda7378652030ee6bc2788e451087c9f904a9fc8999e626f3d191f577c43bdcc3bf4b458eb090bd9e975853abe48362eb2504340b7d59b3892bb616802f20d511ba67936f3492c421df4b74b23f9251dd93d8504acb4c1e72caded91a6618e781d48128b8dc0f39157885bb7f3736105800ebb8cd8369e21e02ed07c5ccae58fcb4d769c3ab4cb83c332599e4204fd75b097e35fee62dd326abb21895395d949a3da57e4cba7a6262d224d863a50a8b5555892739760e1f6bbfdefec8fe6791d88a26794a516995289b57592c039824741cfd8bb05e3924ae058b315c20df44ada2f0caa8c983a54a15d6d2331d86cb41ea1d5c8b7e322daad24da5aa6d369abb02e38b0f42892f3cad37ac34a213ef5fdb8febe93b60ac7622f72ad4378a0567bcefcc3faadc94aca6200c94d9a8a7a3a4b0a979710b3f71d20fbf314a819c0f736241c3979ef56e9916141153839f29fb8cea16d759d1b792693164fe2cef6a6fc69ab87a7ffa126c9851c3ed4bd41cecbf01fdefd453a2cfe1a7bf11aa6bb545662b29f39525cf94b03fe341f9157233b5d6b14d04f34e9fc6d37e00f1a6e167431ed825cb9a884dbe5a53daee465a7ad852b410ab5a918a1f7522fed811a4c5dc4009bf2fd918746a55500e1122ddc569d2536c8222ff14561803c30a84ab84535be39637a357d8010e76fa14e6c9479ec7d888f548109b39252b1726d84bf40bd98ba6d97eec9a455649c8a0d51601608840769ab06b941bd1e326418c417f96a43cb5731257fb6f169ef7d8dd3b3612c2aa2ca67127864015bdcbf953cfb933dc54a05b3ce3e1705ea53df2a6dd3e4b97c3f5d59fe3251ce458d1cacd903fd05daf20ed975ab04f32922356be77973f03d27b668c02ece9bc8a51fa85b1a54faa05c2623111757d3c2569491f85fe30beb6196f708d43dd260481a6d0026716cc372e67c72143e87baff86bc0c2b763a52d491be4e34613f82b6f46665cc4b5499bd39b8504bf72a27d62a561df21bc1a9d2f693f6c335d48af7e78d697c96f9b91058cdbdeba1eae027c5bc7e9c263279bc9e5991804da637a6b4385fe3c06e45af2e55c3c4873d3e6a45839592422dc28eef02bfaadb020afb2b8f79f4f140a3dacf39e2e8c8b0bdfd1c4e0068a3b8f76f3f9ee6dd66450dcfba3a076be8aeca25da2c97b4b7e134ab76e0593fb4e81bf288a98440ceeb37e867e03b25a15841d541975b578385b0fd63c89c504c0a70577c0cef118fcf87f115009dd31c34937b917cf61d37391d672243b977747f2acde6e2a737c845973279eaa36dafcc94c1a27b30d7a4a8686202678630731b9427a265c2ab91924be5107813b97bbc89c05ba8e2ed7ce769d6ee54662943ceb37b6b65f84a49b73848ef86efeab06cb148478b7f75f0bc7b2b48848e7b7952bfb637c9e6bc51791e82183e9734d996aa5f403abba7f5c0ca73ee70a669560bf8bfa02004ed029095838620c484d42fb146707f2cf43bc4eae0aa218f60a5bdd3082f7ca81d63cf9338f7e4bc6c3e7d97a97eef11979a5985875cf16b047f88857da7dc69a7317e4c4936527cb876c5f3e5d9f6aaaabdc362ca3c2833e502bf52e00c67866216539613a22035a55568f166fdc4713d5091eb5db94aa08969099eee52fd352abd3333989501141a60f06a65407bcdb2e047824d82588960243ef6f5f96c90bbde7e26843def0f21a3fdfd39f4bffa5415848f45cf16a8fc1605a6b2418353a15582dd327f27ddf596cc269dbe81c0ea27e3044f05dffef476af67ee56b5d4f2e54dc2e3d0726f4a9bb4886d1492cc110e5786c57e8753e1fef3adc5e8bb670d537475588b67e89e0f074f9ccd391c39010b5e8ff91a27a0983239f80455ff5dcc52ae98b87459ed2c3b5b6872fb8e339d6c6b339cc39dcf957774da81613c190f6f4e5d26dbb615877d0dec853d24681a67d7f2f14d081c9fec4c80f7360403094b78204a20a3da3354c7eec7e0ced0aee3720fa2feaebb651257b36f4b6cff23a4b7307aa6f70870d4f888697854f364879820b25b3884163b55b8e701128c73d347953b31093c71aff5a654052422f6faec7f864bb055f213056d1f318176ea650fcdc5310d55d279d0bf9c12a4308356efbf82ba94e8471195619cd15ed86020ca22fc1e66d635d1e3e3d9e2f4efbfb93c043ca8386588f18eb69c1ea776afb73229599471c4124fc555deed05b43b7f7bee10dca159c789d4ccc5c732002d3d7eaea23bec6190ba4d4aeb7339cb25ad15efe8d3bab9b9569c9a966d490d779391b0d77042425fbd4f7b0ef187bb2e0bb200d2a4e5002e9cb8001b8e649fcf6061bd68b84986cb43597bb0f2e54dd2f035bd28422b9ef0786be498feee45ac2ef240a38ed3aa66256587251611992bcbfef6f4fc2592a75f47509e067fe7d3eb5f6008f514659a7edcb611f36e067bc08ff15c11df084d08bc24b031693d33437f47255b0b269b2d75f515178957aca0b416f0942d3f96022c0202ea0541a5423467b67e5290e06521f6fa06e5837eb38d0f81d8f3ebafc9fbcbb9529c73523cea8a77504cb9a3c4ea77b9a0c363e8b5ce2480255ac331a8b040dd16e2722cb83d154c88c2c3f1a7d09aa85d6cc19c779b03519d2f68ae652a81e663252254c6941cd3625d3866731acabf4e31c37d56a32866abe6278ec2db039e428c9d348e32b2994ba9ca3f6ef9271b8155ae56493c5e16c7b2ae824d571bf27920fa480f15d093eba9de9c5d313549067857e8ce33554ab24b4647bf9fa1285fb4c61bb02eb2ff709f8f30bc5198eb873a57642fd37a33f2000f60cc24aa75224849bc771291b1c01e61bb53255f7cfc9bcad0b4057474c8346e4a38fd8a26021ca783149642c6d3d686def22a7b74c5498e56b4632503ddef85e4d57ce3115e6f49660c3008abb7b155f8dbfd75ea70620909ecccf6fef01cf0c26425418af1361c841c097f45a31f3e025016f53f12e2cb57c9b667bcff385601c351ac6b1f48e75ba1b0f0c2702425f45e1f48001ce5bfa3a6e1f612a507774cbcde659913e4a973cdf6f6e4f380d33d06c6730a32a6a29995dea655e57ad8165623adfd7a3cb8837210f9723587eafa31f58dde34cddce71cee4cc9f5973bbec3e0a5d416ff355df23a48725271c3c7bbe6d74f1c03fe3612c35367776ba19d623123fc7df08ac6d7a61f3d572fd0ef44e0d406838367edfb1c55e16b5facaca39a8d8f0f7f358855f7bd8cc5eb2005c6afd194fa403100ace3ecd78f0f9f802a888bfd542eceac4ad48bcccc90e050a575380212e4bb47c84181484791c7b51eaabb413aa9ba169b16bccb5ae294fdf0fd674c15eb84523cbc4bc27efaf770c395bb447a314ed27a8f5b302680f7096874aefdb03eb892d6186ae1ab0cd064e210bbf01d297d1eac90d891b7aa10d54ef650782e7f9f5711de6e5052f0af7039388aabb24a9743a287c5cdb3dab801c6dc828a1efd17da46df79f1d6782aa047d87646367760384ccaf0567808c784b08ccde361c61892824e7ae1527421ce22c5c7f94f1d6a003627ca197b930a1ae97e60f349c5fb22605902f65ce0ff05bf6155480dc7f8ca058a0c14f7bc603cccdf953a35351fbef8d2fe7beb87240155b502c063aa2b97480823114b5166a455ab580774d7e45e4451b5e605d36f23ce26c6d13133ee26a67e85cfb9497faa0d1b3de8c9fad770d0f901d485cd43df3397e7cb0ea0063469b23597abe39a2cc8a6cdcd2d80040d459a8c2a5ca057b16ebaeb6ad2ba354976d27916be8895d8a911fda680492d779e0249dbb1c85ab66b832ff78b2f567fa6dbea75ba023f518da05185a33ba98fed37a0df1abb71b7577686f610b99a142ac8b90f384e4dac758635ec586fe5c0b01c69d6fbdaa4949d26bc8378d1bdc143d5a0a2b9fc048ead25c7d371f947bc9124c08c3650a83c58a0510d44865bc6d0711b80828e6246c58fcb1f5d45f9c76255518f8a1876ea138482713b7ac43d8cb43c719c04c82b59e2d6217e90540f8a17c1fe906639e9c63bd8297f70638da63163061244d97b0cf62c1ed7f8366933d0fb7615df65ff6a5a223849d843664669ede568e752a256195bdf808b96d784085dcbc6454a171868f3bb9fc87aee6bc9f359f36e8ca6b163d5566c08a28784f4799f042c44969fe7ec2dc538e0aab219d2ae335e862c2952f0d0dbd151ff947c179bd0b57c1bad73ecfff0ac3b8419f3cf42616b8596350fe061ddb9ef4e56dbfb049f9126b41b2e859aed5853481b70561c6373b1e9f141ca6870dd7bf9c9fc8b0dc3e7a2acdff941c0d7457e0ee813aff13d036cef4f6cc89651b255f1914721dae01acf40ec77a85f4b73008d50004fde2e8f53f36ebcc38319027ee3b61618a60f317a5ed31cfd1234555364252cd688a89f8ff6b741c3b74055fa51313302172235cb357a40cf629b39459620ac4789e6341e45c2263df6745cb762da1d6aadfd6ea8492bb48a262282cee1edc35519796221364bd8bb069ab634b0216d6c54bf25d30b86c919367af4533bbf52f835f64b2aad781ccd174ca4fe7f0e669f65ddecea15694bc0b29b3e3aed5e7658fdf467558f68dc099bbc9561beb450c250738d57543a5f29983db42960cf456aebc4592b2f4300375214d308d05e3ab1b814d76c8c2b82c1a20f86c6ca6ee72948c75c9d958766e48050a5fb15326e27fb54b83e2f229827e2f5ca04b926328cc6400e760874611cb017117daf8abeb5caaadb2cd2fcb6c2f9260a97cdbaced55abd51d8d411ad0eaf359a77b0f746d8799b928a3425a968c90c61fbea2680c1d553548c7ada4cdfe3ca89a1377d823a0d18f114cd7e5135cf7a360af68e37bb57c4617ac0fcf69849101430ce494f4e90bff1a82ebda531560b79c403ddecaa85043de49f0ed8ef8d4dd7fc27560bf854ab7eba58716b004bf15a6f6f211f783ece604f40d4ed20fc6fbfef3fabaf96c173516bd67cf548752cf7ce2e928c5fa03a15a085c3c02e187ebcaa0ebe1fa3b9f32de1e1fd1c328e727524df4ebfe1584d1bf0398675fcf465f6ff74e4b922abb20243aa5b3300d2b3c35ccfb2140b3b63da8ca157b1904a8ae878371eac5bc8b83e44baa2bc267d4281bf3aabcd9607912f0a9b658c138a47318e06663e64130e99b849ffe317150ab103023efed90ddad162d2abbbd5ca8c7022657ac4b2710abfa0f9d2337d86d5d92dc3306b315ef716a69b598d04a2f8c347276729c36982c9451e35eaed215bda059399a3af19064bb6ea957d1d857a7c6b53996c529b9dad9a3bf5b4fdae28cf2fed84bc5a089ef4fc219fa583e276fbadd45ad62b02971633db1f82cd24523dcf7fab5ae0812304337b95478f9623638bfe44524e3ac02962220ddc58ed846141857029257e0840d14e75ab26780643b6575d64a23d512b812fc4532e6d028f65f841c16b8096bb12c1a233f3daec367653688f5ca083477bc4635fd3e2807b56aa97210c75dd88f764e8881a7983f42ce339f9fdbf4412297fc6e788ea9139e3dbf8687d8b4643625cfe45fde9011781bb8e23e1b6d79ef1a5b96297437bbfcff5e02a633944b4bb5d5654578a745e24c85a59765d85181765f8a89bf9df5c5a1e47ea4059adbec0487ebee61e75bacf9e9eff17043ba6efc4785cc0b9cebacf33e21c536904750218ca78f25a8641e11ef3e26552d93399ba55b0aa67e8975d7e7e46324a3bb5feea2fbc41acfd375482d7b78329f618b8962adaa8c0856c95882a6e766d8ed2ed1b41a40f857e080d9a6a5c99bbd62b1542bc1603e04ebb875ce4a0c2dc55051837d921a0338055a058074714e6a42cbbe677a91782d2d1000bf683e5e5bc8d603dca1117bdfb30c61c24e52bd473e8692fc2666f274716ef5c5cb8f787f03fc0feaeb2dd8cfb423a0997252dd8a7b98425194022002aa3183782973f989579f4d08653a469e83064e5b9fdec49157b92ce1f7c248346e845ce12e7e98448bebc145822ace177aadf26db0a8cedf8cf9a79267d55a757ee87e5c31f5e1251115dfd950c0119785279c0520aa025867148e62c76e9923ff3412bacb6f4f7c2ee39619947b9d8b2dc6112e39781de1e6304e842176a445e1255a7bc09d1d42702486c9b7cafe372a8975ddaf4abe7411b3ba575ccc9bf066a2a7a2e62e55c40ed654b44835d357f28cc21c289ef5c26ef9d736526b55760fb5ba240fbd9f0c429ad11e28cfe29abc95b439cca9cc3a7c05953dfac93a5858e747b7e8ede327f75bb0e84d2249e18a8204443ddb7978fa295b93928339a86d086ca8c0341a30893af6f5f0ec4bc30612d99123f425d79eee8ebd94e4773571b3d7fb70b62ec0221810d90c0e0044423f5a185173b3b38789f09771380910bcb6f05dec040f6c60f98e0104e9ae2ee99b267f28b1d760ba18346fab7898ffcfafa7caec842bee4aef5bd70f60cce53c758313f42bc33581803cad07d1a6a06d93a054f7b764ad6dc641dc0cc865a6cc4e3fed7fcd6d73f619d918d0c421d5631385d17454a784fda9466a2951124f0be459f65d585926f21b0e5c015eb03911d8065dbb55ff78c8e329f7143709a79d39f38b1be196525a7872de728fcce18eb933e6c942bcaa7650eceb23917c0fdf6a985f3e62024aa20b2d2b20dc49d7ad8285a09e5e620f39d78d577f483b85599202518ee124f4b29891eceaac7e86d2618df511d25d74fbde4059605e48a80c4d745044e8a67322f295d3b34a46bf61230a81028cb52246903a40566af83d09d4f00b77588becb7fd1ac38c87b732f026b3372f15d3d83b4512a2464ed1dc7d9274b3f69a26b8b2d94a18497ff4d6407746e94a20e8ff62262916d7e984c27e92eb752b572ae80f06eb9cf0240d6cacd07b251a408f15a384a1d388f0712383066b32b6c18f4ea7a45480f8aadb126f75519f6e78cf73cf5972274223963df5ef3378306e326d72de123169c5d9e6e0d3d6b3d4123b49d5cc467aaf9d00ab28d53430b977ae4425cd5610e6474b886f4c01c35629c9bcb35badaf5f5185f118806d561084719d18b2a6c1e3e5038c6ed7c375c605f429178e89e854406eed3ea2385c9a6df9ac056f6c8603f6bcffaf8013558d83351a149651436e21a4b667d2404a0092fbd5dcef56f2070753bccaf842d8841959aac5c881c526b3eea838b5507a66480015beeeb2e783cfa9d1e820db8e009183eac8f1b4cece7257f445ab691d88fa573c8af749cc1b7d28b405c2c3f5cc18c7cb77c79a6f1432f1a670005b6aaf160dc9e084dc535937816aeb5031e46f0c96e17ac8b6879db0ff859c4c721af9ea04ede7df56f781491b74791d8c2e3f377de5fbd74dce22b2053f31516de28752b01642e058e3ce90ab55eb3682493aa980cdb3b41b52e14e6837de191d13a33b8e233034edb37f04025264a38b0cd0f3c92f4d8c54906e0fe6d1399ceee783b9b21223e8f28d4817b2e5469644dfb978d397e178ab50080c1970fbc3dbec3d036690857d3a1590d809853aed2a129b2e882895f8361b22ef9919fb4d32bf6ac4c4fc0ae7b88ce30297a88cde64508badc5a4f5ab8d99ccf2c872169f4471512140875ef4beb9169851015d34225ec04b3daf9ef69517a41de53949a55413584b05a3e12a816b07a6df15d27e9452ba4c0b23f9e159162c6ef126627d65786e2081d27cc3772854df862e5e3ced6367bb48edecdd7cba1a3f041f5c2598f84bc000386a55fd32e09df46adc345ddecc161476548580cb032bcdfa05f34ce08be1c2697522e1084720f3350b8a609dc88e79e652337413a3076c46ec10472d2f8a71a480a5c65caaa5028bcc8f4a549a6593b531e53db14a5bfe5fc6ff6af9db05431a8d833a0bbe233b5e503fb37126ce958603eee9afe968eb8349d1eefb85ade50ba35cf5922b43c269c471c62cbf70fd44a3fa2d52e47795262ed68a6e26307b0e04ea2b06921061ff29dbadffe66819f32bf1ae92cc4b3d9fe519802586df12fad825eabc413f6097c5c6a3b06c362657bb30be276267c0f642b7a09e3107631352cae39de95d8052181c1d3bb820c8bc60723bd8cb3379d8c4c1baf04f0ef1d6b70aa8478abe9b9f6ea9725245e22262fee35e4b79bb494a1024341a436d37fb6aad00a4bff3714fcb70b499e5998bac2becf0c98b7858eaf1e06d136c3c48e9ca3d5a580e3376b78db96ccd4ffcc68fd5b2c407452aa53edf8f31edac8957b645151e0378c30935f90e50a4e25de47c96cf29602e5f0e7c5076bcc323451e5fd73072d0597c98b92b87922b388221062330491a7272c4cbd793e398f4b15ec8dbd9bc3f4c4f3d30a1847f52dfdb5843b593b29274192500bac62af049b9f3e68048f3501515d88b5870eceaff3d5c38df70ee31c2828a23b53f1a517ce4ee34d68589e17806f1f1c8c9e2832aa3c8b877d37712bab73ad0adf678be52436825632780bddea4050be713538e05b8bc6b2443a6eb01b4b24e6fde3ba66650188a39be602369aef3d367c0a83905c0e72b595eab51e7b47b599d73e7b3e1377b34da0499bc383a460eb125862c7238945bd3dbd9dd6a53881ba8536206b3260a7a3f4e93a8ef0f896ffcea5f8cb4f0d0fe060adfe66b2347e3f4d21532865d8eb1b66f1788275b10e113692516c8c3a16c80eb3056ca5b69c96dc2fd20c2dd54c953668037e2106a10d56feae1ee6db2a90ca9106214732f1fb1200d3f4162af280672cf495b9bfc60eeb60e2ac8458e286c4478a8a566ad0f1fa7befe842e05964afc247c764decb6e88e3ea082d4d304ce1838f2125d1f6fa867bbaba0eb62b1b07909968a30b88d16ea2fa0448b9f3a0ba09f234b194e676b330de38d1558ee03ff76198ec3713326072c9f802414546f99150b22ec91f8a6494b01d4a4c3026e329e6f2ffe48f9677537e40821138e0eac9ba3b57ba463fc0b546eefaaf9cc341257395b592c0fea14a05d77c87ad783061ef3311e4c0506477eec2cbf426478cbfe6e8b3881d9708ff82048effce2a860f5b8bdc764d173e2497a23802028c8f3fb28e96fef954fe8ed999a57b1f4f8b4a11f05bf172077458e83cae143bee5e032d6d696dcba2f2734306d09c60c042d9be3bc6511ff8d7b7491e4764c69f1d3a0da863f62015b8d5a1dfb81d82460e0c927a132db420351eb3721dd0f6e8d08506c7f1546cbfe91b8376cdc3533d13f39eef674703c94c038761df92d64cb8aa733144118a20edc7b12753b13ee9d120923c5cf55b40cba34923f2f7dc2c22fc6d87ce6f7d59f5c5633b0c8686228d666b1da95c0239a765ed6de1180ed7a37709d494ec1026e2d1b406d2d394ff8c3ffb398458d88c71f270fb432ee8d0e9904899ac8d781a2f0a9b48ea6c2d602f718999ed2680d41b926a7471c14e4059a9dc0de0fa36dda5073fa01bd2e9ff69366fcc74b9a3ebb7a988c9b9527553340fc415c48d46485254dde4802dea2fb3f153ac9330b9ee525f1efef354e61b7cff33adec28ee08760b83e9c0e0d7755c3dc2843484382e5b5c63e71833577e635ff107d10299eb7d8e7b46b54fca9d4e668ff3a2b719688ccdb729210644837c08bcc32f71333cad6c4226e27b2c4266bab5f73198d88252424c1516da5d9f2241a8cbc0821a0394ce07bbff36153ea29d4bc4896f33f7dfcbfe2873358350fe5b142c39b5778acd122a72d2a011e168530a3d4346707445ea775a1aecfdf79d692d1784d7cce2134284a5217fcfda1f7eed815877e04ce202c2d9869b589b6bf952cf776e1b2c2085efee73922d4e61045622d7f25fd5f3c1a20f22cc1b2ad5e406f45753949b84e09623fde0b78e468546a7e4824433a7f278ce0ff2749181959221173f2a75aecb3a1dbb7610f704b179e5215d6028139ac2f38090112695d5320579ebd34bc30459285553d10eebabaa49eba3070cfba1017c6313490fbf3176d6863154e35433b8a349ab1b2c587b8e6a1491b5da9189d0360dc251620e13534738b07a60a45d35d064a2fd262512bea1a52faa9ed9a83e97dd2471c0e8ad389519b602ceb2da459867cb063d01a80f841d9b8ab90d44d7ba2f12171e00e1a29163781112c9d0b1b27e7f821b47fb2e7dcb77ae939d5030a01fb273a670293568af963c2662549bc970b8fb71f681fdd885d0689bfd117b54253e81282f6126f019ff744ed7093fd8cafaaa23279c2ee90aa7734b1518c422c962b30d95c81a644548f31b9a052988640cf0661f8786e746038ab0c353c0a2071e64303ee78569f3b07074971c797e1d8cfcc53a84cd2a7f9f635f12d3c8224b92e006d42dbda90df0114dcffc7da962792410ec04da22d7a73504298244ddf5cd4495b1f899997d053800184611ace9a414584d8e87f969390a2b8ec93c82aec0390b76561f4ee9cdee04c99d14bea7923a1d9f39b7280bbe18a7f6839b80b1290a6ea747e99bcad206a6e4b17955e31f05b7aa8a1490300feed9cbc1cd639fe84329e388c1a37e3b57ac42ea154d55524b83b20f59981669d4be507d8edd2b29bd0fb9d9fd1fbc0f9bd6ab69909f88d5060f9d3606cd68d71a544209e8c685d1d7633ac44bb038f74f797975603f1f9fa0c503aa5ca95e9d6cb46ab25f71f557679999b1210640545a14e8861989194b00d06c8b35edd2c2989d38facd8e43d2eeaca29ac27d56be37a789c59d9a4c0b5a89b718ac71662c5d5822a5d155a1bd76cbd7bfaa7c494979e5070e8279a1473b90d68cad9d7975b9d55e8a254b8fa6ee7cd4aa22fc9255c589b65fe0c3fa932ba31a577297c8ca9c72dd741293ee928b81ca2ac467027abc1d418f39c91292df7c1d963bbb664fe7c779bdf8f72aefc9062ebb0824b3531fe87eff491d788a0b4337d5c60602aa5872dd1ec3dec11aa74feb371c51db7c98a3ec7e4659fe28b40b8e8e71758054b7143347c7729de0bc55a8230802e81bf725d11a32b44bfe2e01764bb34e5d82bc78c71d9b31b5e784008acf235eef3ca0a064da5fa0134d68d0574d26a46e802db238656745966b8e3f14337de241820c4fe695c738c90ebfca42116da34d9825b58ec1411f0759039131bc471816fba09a3ed3d527f2b60f9fc9827704bd25db23cce101b11d951b73a1ce10e1c3534c0728cdeef37d0c9807a4daeb1db8f3c79c02b5a9df5e93f68d06949f4c8b5eed27a7ef58f1966b53b0bf82e19471ebde28ba3c7835eff1623a659933010d53153c519acc70586b84ef2c46daf5f843b6aa23bd7e11bc086b4afdf9fdeed223ddd1a4b6506e48ac64ee67a935a1d8f9717710c926196d147cd0c436e3460f5dd8a0439ef6616abedc05cafa6fb435bfc435fac385f8e28da77e765752eca65adbb5f63d09db9692124e869ad73f97646284ca833eb15a4ba49d22a277be0cb584617d9a8d25f52b3180c77e98b6e4994f77883738263e93f98fcd1ab9064fdeaf48912a8f3bf54fced597202631ee3923fd4c103b8426ee046f2f8cd9586afa97955e5f796d7a29e104182fc2e38b7d925ff63ccd25920ed61849b54b5c9b42538833ca433bfc48ed1ea63b70291ab2ef448d714215251b2d027850b7d2a4d25680871bb8d64f260239b93419b9d607792f7a8eb72b519418625c9daf9d464af63a5e4ddc165ec2d4e66bdee72951a33fc213df269dd22f1350a4896b740349ba11a806fa5238599b130ee7eadfea20feaeea4d90e5c8508de7d168320929e75312a0225d82d60a4df2209eda4b58582c4e4b4a40a7391330769508b68eab529a944e5b98bbe4468499aace3469ffdd95cbbae7620c91f353a728a52da5d83aa349933083752673f6f7ab32b9cea017ef80fb6d69e2f99020d6812a18e0575f655d60ef233888c5b487cf432900354e75e7dab50c102cef753be20c1f417dea786ec9a4968cf739012c2004f9c7b4244eded02b9c726f733b37d0bc746bba142ed113595e1a0a3ac71b7fedf96056f9f54d2e79c209d8f9cebbe96f2e3b3522eb01e4195b451d137c237fe6fa6b447728b9a1c5a1237cf6d33ab9209989efe89fd5ded727551b346fc0bedd5645d9a11c9842bbca9d0b39729c7ecf70acc7c53fbf7f2d7c21e8818e28b80b3b00e1c0e55d1dc1a3f0715843933c469dc325b209fe02e9e5e4f062cd8d43bddcdd0ad956a7fb85f3f558f4d30b8d3f999d6413c32df4506eee0ad8d366aa72109aafeea0e5137d3c88ec37fb4abde473933e90d2baaf204db1beeeca25250b784ca21e898cf2a6bebe341367105b3fcd65a02be4daf3cd355efc98694dc668a2d32d2c0d5a916f8bde530deb82512d52b21cdd5da712e61d071e00af73547292200eaace9c86865f59f17b2e0c485513018af1b89c6b85453dfad0c213dc16ba6e433f4d3689a045421ad8e50f4261ef94d9d469d10247f8976b19e7dddab97c2991d15c09ea724c9e7a84f3db3439bd58d64d25229af518d01c92846b3cff5f3fb8b73c4a12f81f6691d54045e0e977e67fb436cde0f434465df6407d8352d5d793f82b99ec7612dac205fdb828b1ef2e4e541247d901986302e85430ae2daff8886410e392ee34d53ec44da330f2191772f6031a175daddf0da6b41c7c5b4e39df5b6909e8ee5ed16d176a2dcd916ff9b6d23186dfa1eb6fb56a51a1e5270f0f2c2ac980fa79cd99dccfd02c996641229868964e06af95b8cc794bae9f3c6847eef08019eddba1f203ba9900625806e6bcd20867b0139abf565749891f496abbb05306177f5a90e6619b212917a8e0cf9de10b8037359587a5135070de06d0afe62c0a05cf6a1b186166b0b011e71c039db8257ee7264b526f95fbab2bc54b87706b912d0e256731ecb8cbf6f998f2eec4c69923b43946715165e57c3b2f83aa6dcfc83576d6a9c92491b33f0c0e93af9bfa4e6d9fc7ed716d51623e3c530ee811f7dea6368e75fd2edba9e76d6c4b7c6d0a6b40b84b81f7d915211f6902263e73d46312f2d532c4a7a7a754a0431b527431aa9ccffdc1f0c548f6fc0649b410bdf9129286ee4f47aba9197bb949e39dc9aa906834039c4937b59b8b116d758ba536a80d39b479bd22e0d4bb90002fbec2eef6588aa8fbea4ed7a47600171cd174c3f40cf826339bb2c25ce604573e0c51d0aae8b8fdd7580f9a51bcf9036af00804aeb20126981f5eba6e34139f688b3940463d0b0ae78613db0743cc832627e7ac825c282ecca3471c29cc18ba1f5587c287a423d0a21e5904b570dc06941cb4f212a3afffbd5de443217c2ddea6d12cf544062c9747125a57f7c47e3de6f362b39854a423183adf18b5cadba411c7466d54b777c9f746b91b1bcdab478cec839dd7f4e7df186f845dcf1bbccf6096596864ab66c7ffce6b9e7ec104e003f4b8c5e6d83d580715eb39db0a7dabb2f097b32bf2bdb4f73e612828330c540e079731a43ad1af1e1de50798f367cf57d559877a49b51356b6b954781eaab7edb112d6bb1fdb6c2888de9e8a146d0fd215e6631fb2ed687eedd11bc96021fa1048e44a77430debdd26e199bc1b97b3f4cdb607257ce5275ffcdf01dd6bc1f9b0ab4d86563e5cbd75d508ccbad1a6e7f61c44c166b19622a58543aa93c210783d6c4b2ac7a6023f1533a232314e280429410b3976c124379f8060357a99f43375d3c481a62a8a17be3ebe05dbfbfe12ad0061c7fab21df0e4435675b53f462ca859736eff2bfaec87af1bd11c3774f504e1e80e2b3bfd7d56809dff4c33772fde644b901b0cee22926d16dd3c2e346ab2d4e6a2ebb3b2f25aacf78400e0236dd001b80bda10254cb31cb87d21261b9adeb9d86d2054d06d37968d41df7f51c3fa06f4889c696fd1ccdbf0e06da823ab539100d55e046aa86f829d0ba37b85bc0ba1b780c08032181ef03c7d508289b348eb16ea511023dd5708b9b5788cfb91deb2f6f5a5a069f51a58eb6bf7ec564b0e6bbe428e54f36b8baeae969ba51b54fb4e42382ae21562002238a22d9e74f087ee49af8803be7a071e95c5433f7adfb07632b2958e4b134d07dd93385cd3eb02f19942d1bac92bef063c5b6835025c522c8ff853316503a59adb7ff222d407505db2cd8679152eb13525aaf050ed777be5208a5d19617317c8755a4ed3dbad3e0d28a13251362682916197e2ef592bec4a2a6ab292b5d4d8ae00f8de04e6495c7f9066af5b40cc3c20e0f683be56f1b4df4bd41f4bebb419dd94e8351fb72ae4f1cd4bfb8e3f41c94d07bee272566be504aa2d3fc747f1b665355a3680fa8bd4c8a1224cccc486217bea7e1d78eb5e00002483c50efab3056c6295e20d9049d0a400441002282bc11ec5ac451c6dcf6d097c4b6f015daf9bdfb9c0204c1430e9e0e683bd99bc33163582625e9d8463488afd045cf16f266259b2c181c862e68d477f81fc648ba1f8aa1ba70589c42b72cfd9270687c61010828e02660f7d99dbf91022d4df2e79dd70aae71fa35559921c69f30c668167fd4d776c8f72281a6c4441e1b0bc3bb3ef185402988a9c4da05414c7f5110d780331682eaff344795b84552268e4af39d0031d919c47cb2f0df817cd71104f995f385d7884003c81d7bde636995353ee0d98877b48f04d8073917a27c87e39c6459f2142eb9aefd690656517691dc1e0ae97d80f2576fa17014971485d854abdc89956757164c49048ad8b12c3241bd184d887ac8bcf763a092f6ac1743a3a824430d1f9eb27ae8411a121e7c9512f44c22bae67b7f831441f094e0227bfdf732bf77405daed4717d4bfc618b1e46251d88d94e92a979920d81f42ebc8224ed34b0692d2b3d017d711e426c61dc189cfaf109cb0e7b07b969151703035b63507af0b72eadef21672689a8bdd94d11ace3facd853b1b22fe302cb98bc622bc7a0c814277c0c0f1b61ce284e25cea16950937552197d15a76d8f93dd3289f01f9f25d397bc5b5b310b19ad2161880a9c791fdfa43c3f2b4f58d4236292d84948859d66c250f856eab0b98316b4e11fde261687c6453a44454b859d1d6f31fe0a63d5f72470cb4d230914ad8c8d64027e5b5c6b32affa51b12b1ec08d0ab27780446b26f4d7411d27e267cc08e3b9e7298e5d00975d0ae2fb6e149d28149c143f54a0e786e60fdd4a49c07f078ff13b450d8d2c444e6390b308ffda802483f70892c9bacc25d626f1e258ee69bc30c9d6459a7e7890afa3392bc67278f9da2842d3b8cfd01ef3bb4be7a5536dc8b1b76b6c73dbdd0c9b46c8fe41182c42042772f179a9a1a618baed8c09697c9a02ca535e6472478a8e60508b3af45de2e395bd538d45b88e633be0a0823dbaaaf366c64f26c69fa7a3e8d757e49ba7819f69ab833a447029627cc87e2d02a8af4cc8b8c7e2639c592ef9e3cdabfe2b1560bb999c50478ef379ee329fc8f2326255f36acd84c80be91f26d83266cd423c7bb9f645c5f356ca36f2199defade25ed6512011bf3295b37629a183e5b6e4b38de7ff204ed767f43ce0fbf8407d5490cb0b1de8dd9eeb2777ae3665b88810ff90862c46c2932fb98a221e518fc3b2f652ded7610e550724c64c798199c352fe535cf4fe28a595f22cdf3db37625860fa34a06aa88d49ee1d6727bf296be31194ef1974be590d02970a419469b8361ee941970a2b4fcee9e52ba4fb237150e9ca3b8a754c8b8fa83d04c9905dadf6dfe2eb2d45e8a32e527029f4e531fe1069e7ec73d97a9a5e20614e35e3a6f03fc585865e8d3957e87dc66c15e79775518d6f3d8c44ba0a7a2796485f46aa3a32ad24ca09595a3b8b0ad7dacb0ee2255b249f701b12ea5e49a7be89abf06f16fc48f6365aee245afc36cc876fdf67c7824e33c7a5f1646fb41aab45146daa3cb8c62aadfdcbdd06ac4ac3275f01d804929ae035a09ebe8040eab27a8620d9bce403452572df174db5c804443a779d50c3d1cce0369ccbbd55ed823a63f24d04979fa2cb102ebbca1a0fe4a4bba1e8f84dc797918d8a6a62e86e3c9ff28f1025777c2b59d10b0176d0d5d159a76f1be7acdf50a5ea180713007d81b3562baa6880d37042127c48219e89c5aed5ad959732a628033814b3eb62ca8545c052404ec9c153b6e8b3842ee9b8457514c27cad838c9e592b59bf28eee6bebc46cf6934bd8dc27728c809f2d6b1edd74414ed61506a834e06cb37a40bb33ab9382e521bda52017d2335694922ec611737530150914c3fa71d88e0d7a0201e966ab1e97ae1a82b9119f6d9fbbb83691c12af9c606966f6543edcddc6f5403c1be39e7e84edf0e65854f1a69f6e336280454ad69823cf027dc231370a570315d84e97d2b8ca812ee94ed4b7af97f6e83374f40a81c42036dac9e218e106699fd7aad8b8b69f7325c0249621373d4e3039a737a5dad91c48861ae4f5c569f2b875af2684f82bd8368a1c078ef9be8b7213e34bdaf9a949e57fffac58360fba22ba9ffcae985ac070cd548701ef2fa8d156ad0899b5de28f997c0161378adb17842c0a3378e58b1a1fa32e7a467a3e906ced973d1dc6faa22991d4fd645155c9a0f308fa2b5ffd7bcef421c0a0ee065d2d4017606daf14c7ff74ce87b4603256e50a14125d66165f312ce1f62f5c652afe48a9c81bdf0918aef11094b11fcddec83174c5c2fedeee54f33931cb3fa286f0d368dbe991a6d5224ca3679d75620a14b7b7c989faa0d0a37f6968ef9a4871a9a5b100c067a278c1b4944a42537e65aecc337b51a8ae01e3117a130d0d7200e44fb6beb8e267b9d1ae504f0e144552d1b3014b4a822553402f1d06d6d427cae60b306ff940ba3e58f90ae3242046b3504b1feea21a1156166fb2f6aa4b481a4f2e8172ad7216116554b37514bbfc75ef78bf17f917f32c589ec2f76ca10493caf8f3c9d70ea1784621a0988230159afa986c4dfa47ca83c4627a8aee631f76b80d175b17507b1848dc0a047a36581c51466a13301a47627bb60de784d2f6da2cb54efdad0c088144b8f7752b2c5b5f5c52c97ea1f42e1bd2dd0a5e514dcf8286031701d6b46fe0a7ed865b31a1428d831c22d418278e360bbe9385d51eb54c1543fe3c3ae44b89ebb79735aaaeadb77ff9379ca3ac7aa80675a8324eff814efb66e2f232fd695e0bf81279916162d77c0651bc9ca14a288b0f2484355caeecfd91d4331772366f95a40ec6f7a23a33650358c3a84a4e3ba3180ab54d2680f4a00280c4994b1d96c9d2cba81db0d45257fb4c24e8eb49ccd764d6fd92ae420e1657fb28576c7fff293b0ad4c4d03fded8ebb3849e20a5963662d4d2522e38d19dc5a2bdf1278d2bb1311a496191c99c54487ac2790ae80e4e89e3cf7871bb1c0a2caf92ffe23d378fced08e9b1545a1ce120cb830d18c5cd56b778864f68c2bac244b5ef98e5a6eb65bfedf1502a1796ff5cbc0f89239fadf498cff6ee9c997f65364c22ce1e690747bf92b901aee8dc10755fc4a596a4ab181cb73d030a30011ea95114668be1afec3f9851dcb16bb3e57c3380ff313e4c909ab9bdd9658991531c10d33573646221857506e830ad3cb0d36894ef6f1bda54347d17d1bbf5134071b4d8bddc972d11e2181e1d6ad1749631a186699b493b5b3fd16b1af912601b669216d9eda617faa5ef041311eec605fc8e603a385e5967bac56c268e8ca232c0237e178c411ca10f1bb6ca82301cedae9fb421f4e6c321c4d743b4511d9a6611a17afb97ecce5b8c782aad661d2abab26e693d9e76fc18b96f31e0a2955f43cf532fa908f90a4f436dd4a4ab9fbff9c9e008cdf942c8e4a08264652301ab4335587ae9da0f852f132a4b663597c60b801609d9da91578c414de94c6615090a6a097475e2d54174ff00b73e67586b3d9d58c7653c6a7d2cc963e81eb408349c90bfb87c98ee2e6e6e44e3939af8d0d00a7be435c2178234d51c823a29eff05e5223452a360ae2cc26775baae0695afc01b172015d98a90308a8a469a40eee842387e1e16f0ef6e0d8b4d8b2321ffb5b1a9943373ac2169db8b218c7e0055ff981605d20be99c5fd8bc6ee227dd9f429224295f1303b8f051070a73ea19c1373b1119098dd8c79646f6fe45494bd670cae7117fdba4f4015481ec4b682f18f82af9f77a50584c8936da660eea9eff49a080f8926cf97ef05e3b7fbfa5c46dbc07e446af9e4eac0878e2843714da844e1af44ab779d9988b67732e7c8fc927ce53cb29481a7b047cd505a2e75b53f8a09f082c5887d3b4f8ace57d0e0b1e867bdd7d6d5c0c699d90d60a7a938ce243fc069de05d4a661e30feef808f3344bf6579051fc3163c0090c8cd1a9566696766b6de2146e481580e33730f539ab020924ded971700f395a2f73436efbe895c6de981950c20565f5aae837ddbb6e44e0b6a696ede99bf37ccf469fc10e4233477e2caff20d81d590977385b5ae92278302096c6b1cb19d2a6f62e2264715622a1a2944fb71fbeb13b770023b25925a14db218e8fd339dc775ddedb5c403e0875d6a956ff9cbca3d36a06beb71ccc843bd075ff14c66ac1053ab8caa39d90ec01fcb34bedc30707086753aec800cc7f01abdc00257df532386e17e9652d21e5caec74f7b2f51b7e3b3acb3e695ea9dbddc9f038a912d324a9ff00f02aa5235ebd74e59d2897705069e7926ea401b4b07e559e9b4af9baf267e9b66d4246b0343fbf89deed1a5c07e876debfe835848a732bd16bea791c1bf9f1ed563fd3c42cd31cfcea75e86d4db61e7c7d5f06c72a9a625665f2a94856a097ea5dbe22f260d24abf1552307933a431a750bef691dcf3790319b1bc0ed64a7e52cc7ea7130a8dd65199ea3782a62bc8167e5ff61ad8055aeb990c94689f37b4cc89b0b76b74861097a4d7089d1b1f95877985190d2be8d0476948beb515c37872682cb99ed960c0f9bd0fc2ba822e3c30f7d3f61a4160dadfcbaadb974d575f4cfdfe92f10faa25155253c95079c2396e9fe576ee02b483dcef8352191a2b904ca79cdd9d1e0d9874658791a1dbcd2d2abc44d77b8cf115cd0e0b31949382dc1762bdde8ad6cd6b92ff1afbfbcc94019e2541569e205d97a215b7ebf10f4736c465b6f1eeb6e9fa36d5e5563e21c6dee6bbf949dc57bc805fafae4e8f2061d8f1127ed9b43195a14c33eb964c7ed372d2f1c3265c67e89644a885080da2737527c485285c22803341d7b0c0281e7d034b4daa7cc9224af6545ab5f303e14a3a6aad647e769435f119605a24492d04ac866baa32709b634d85f1407bacbff7b2f57cacfe6386d8b3d474a429f92ba5f616df07ebb1c38ef7e5b19e9e1e3433ea200d9a0ea3c7d20de25f0803839338354c31175a03b57cc3928cf0e98c3ab75c8fd904d07e6be6b7063fe7a2c804da06d3a06c37d79ddf0e4223c712cca7293452d9b4b3e121a029ecfed9d4b45c5a383457fc971f6fda76be73f16680e9cd22533020e65d3f4ad911d8afc16efad43f98f3b268d9f22f10b9d422261003fd0b2871cb1122f1df20b1dfceef1ded8339ff9902edd06c26eacf51e2fdc09d6ddb598f7f83dd53857b4ce12b256763125d43b0a02de846dc9018b3b84b40fc7a7e817047e19a4918bb4f4ebd9f3d039f4188d0b0c68ef888efdbdd6a90aae04cf594240faa20656fcae360e625487b4b90fdbaa8f9082a76f6b13757274a412d627ff22165d2b731e1ab1d3463e1d8e43c95ddcbf15d033b4f158fb94f938837403186eac6deccf81fb8d535da384deee8749decbae8b12e5d0b06f54fc78fbc760507f2589f03a88ad3b4f3ab272774e5a958eae2b6b4c4fe6cdafc49eae55f8c5607f0c5086797570c180bc4c0bee81784c8b59dff027a5d095c3a908bad7de2c5143d00288ec5932ff98566e98b0ac4a7cb7dde6705a596c4cbeb65642301d0795a3d139f69c56f4632100ca3b193ec4b3df198522bf79071423d868bae8790a34c65cd2e86e231686805c4b012b4f378dcdc43c120b209976a0749bcd0bc640a2d1085380d9109f30442d4fc606ae122ef3fcb9014d4ef4416799f08dec0802f421267fe65c5054bc10c8ebeb8757454edfdf31ab214132bdd034aaf8ac58fc2a23d225eecb2da3f9a7f18eb6770e899ac2a1e3f1920c965d60200de6f1d6b20775cf18513970edb8c73c228c74a0fa5768bc77cfbccc74a535f95b2c9cd393c35b75931843ed75f29c5975cbb75945428a6f3e7c041c2d2435e803c48effe88f759318daf7f98590ca4a88e9ba83ad66833269d6dd2635084d44d436306d554e610c5e9d64849b3c79d5df79f52fcea1556cfe34dc1e652cf5cc6d1071fdaf56ac866c9b96c2f7bca112f13f3384d82e5dbefde4fb6851104358565254ccb59b9b162f094bf5960543d043b1dc6138497560d49a21ca4","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"12345678901234567890123456789012"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
